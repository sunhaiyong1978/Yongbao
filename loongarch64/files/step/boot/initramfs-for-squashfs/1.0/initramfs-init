#!/bin/sh

/bin/clear
echo "开始初始化..."

mount -t proc proc /proc

RD_BREAK=""
RD_BREAK=$(cat /proc/cmdline | awk -F' rd.break=' '{print $2}' | awk -F' ' '{print $1}')
if [ "x${RD_BREAK}" == "xkernel-ready" ]; then
    /bin/sh
    exit 1
fi

mount -t devtmpfs dev /dev
mount -t sysfs sys /sys

mkdir /ISOSYSTEM

mkdir /rootfs
mkdir -p /overlayfs
# mount -t tmpfs tmpfs /overlayfs
# mkdir -p /overlayfs/upper
# mkdir -p /overlayfs/worker
mkdir /images

function get_all_disks()
{
    for i in $(find /sys/block/* | grep -v -e "loop" -e "ram")
    do
        RETURN_VAL="$RETURN_VAL $(basename $i)"
    done
    echo $RETURN_VAL
    return
}

function get_removable_disks()
{
    for i in $(get_all_disks)
    do
        REMOVEABLE=$(cat /sys/block/$i/removable)
        if [ "x${REMOVEABLE}" == "x1" ]; then
                RETURN_VAL="$RETURN_VAL $i"
        fi
    done
    echo $RETURN_VAL
    return
}

function get_unmovable_disks()
{
    for i in $(get_all_disks)
    do
        REMOVEABLE=$(cat /sys/block/$i/removable)
        if [ "x${REMOVEABLE}" == "x0" ]; then
                RETURN_VAL="$RETURN_VAL $i"
        fi
    done
    echo $RETURN_VAL
    return
}

function get_disk_partions()
{
    for i in $(blkid /dev/${1}* | awk -F':' '{print $1}')
    do
        RETURN_VAL="$RETURN_VAL $(basename $i)"
    done
    echo $RETURN_VAL
    return
}

function get_partion_form_attrib()
{
    for i in ${1}
    do
        ATTRIB_VAL=$(blkid /dev/$i | grep "${2}=\"${3}\"")
        if [ "x${ATTRIB_VAL}" != "x" ]; then
            echo "$i"
            return
        fi
    done
    echo ""
    return
}

function get_partion_form_label_file()
{
    for i in ${1}
    do
        mount -o ro /dev/$i /mnt/usb 2>/dev/null
        if test $? = 0 ; then
            if [ -f /mnt/usb/LABEL ]; then
                if grep -q "${2}" /mnt/usb/LABEL ; then
                    umount /mnt/usb
                    echo "$i"
                    return
                fi
            fi
            umount /mnt/usb
        fi
    done
    echo ""
    return
}

function get_partion_fstype()
{
    FSTYPE=$(blkid /dev/${1} | awk -F' TYPE=' '{print $2}' | awk -F' ' '{ print $1 }' | tr -d \")
    echo "${FSTYPE}"
    return
}

function get_partion_overlay_file()
{
    mount -o ro /dev/${1} /mnt/usb 2>/dev/null
    if test $? = 0 ; then
        if [ -f /mnt/usb/.userdata ]; then
            FSTYPE=$(blkid /mnt/usb/.userdata | awk -F' TYPE=' '{print $2}' | awk -F' ' '{ print $1 }' | tr -d \")
            case "with-${FSTYPE}" in
            with-ext* | with-xfs)
                 echo ".userdata"
                 ;;
            *)
                 echo ""
                 ;;
            esac
        fi
        umount /mnt/usb
    else
        echo ""
    fi
    return
}

function get_partion_overlay_directory()
{
    mount -o ro /dev/${1} /mnt/usb 2>/dev/null
    if test $? = 0 ; then
        if [ -d /mnt/usb/.userdata ]; then
            echo ".userdata"
        else
            echo ""
        fi
        umount /mnt/usb
    else
        echo ""
    fi
    return
}


function get_overlay_upper()
{
    OVERLAY_FILE=""
    case "with-$(get_partion_fstype ${1})" in
        with-iso9660)
            echo ""
            return
            ;;
        with-vfat)
            OVERLAY_FILE=$(get_partion_overlay_file ${1})
            if [ "x${OVERLAY_FILE}" == "x" ]; then
                echo ""
                return;
            else
                echo "file"
                return;
            fi
            ;;
        with-ext* | with-xfs)
            OVERLAY_FILE=$(get_partion_overlay_directory ${1})
            if [ "x${OVERLAY_FILE}" != "x" ]; then
                echo "directory"
                return
            else
                OVERLAY_FILE=$(get_partion_overlay_file ${1})
                if [ "x${OVERLAY_FILE}" == "x" ]; then
                    echo ""
                    return;
                else
                    echo "file"
                    return;
                fi
            fi
            ;;
        *)
            echo "Unknown FSTYPE $(get_partion_fstype ${MOUNT_DISK})"
            /bin/sh
            exit 3
            ;;
    esac
    echo ""
    return
}


UNAME_STR=$(uname -a | awk -F' ' '{print $3}')
if [ "x$(cat /uname_str.save)" == "x${UNAME_STR}" ]; then
	mkdir -p /lib/modules/${UNAME_STR}
	mv /lib/*.ko /lib/modules/${UNAME_STR}
	modprobe fat
	modprobe vfat
	modprobe usb-storage
	modprobe uas
fi


MOUNT_DISK=""
MOUNT_STR=""
LABEL_FIND=0
# RD_BREAK=""

USERDATA_READONLY=0

LABEL=$(cat /proc/cmdline | awk -F' LABEL=' '{print $2}' | awk -F' ' '{print $1}')
LIVE_MODE=$(cat /proc/cmdline | awk -F' live_mode=' '{print $2}' | awk -F' ' '{print $1}')
USERDATA_READONLY=$(cat /proc/cmdline | awk -F' userdata_ro=' '{print $2}' | awk -F' ' '{print $1}')
ROOT_PARTION=$(cat /proc/cmdline | awk -F' root=' '{print $2}' | awk -F' ' '{print $1}')
ROOT_ATTR_NAME=$(echo ${ROOT_PARTION} | awk -F'=' '{print $1}')
ROOT_ATTR_VAL=$(echo ${ROOT_PARTION} | awk -F'=' '{print $2}')
# RD_BREAK=$(cat /proc/cmdline | awk -F' rd.break=' '{print $2}' | awk -F' ' '{print $1}')

if [ "x${RD_BREAK}" == "xpre-mount" ]; then
    /bin/sh
    exit 1
fi

if [ "x${LABEL}" == "x" ] && [ "x${ROOT_PARTION}" == "x" ]; then
    /bin/sh
    exit 1
fi

if [ "x${ROOT_PARTION}" != "x" ]; then
    GET_DISKS=$(get_unmovable_disks)
    GET_PARTION=""
    for i in ${GET_DISKS}
    do
        GET_PARTION=$(get_partion_form_attrib "$(get_disk_partions ${i})" "ROOT_ATTR_NAME" "${ROOT_ATTR_VAL}")
        if [ "x${GET_PARTION}" != "x" ]; then
            MOUNT_DISK=${GET_PARTION}
            break;
        fi
    done
fi

if [ "x${MOUNT_DISK}" == "x" ]; then
    sleep 5
    GET_DISKS=$(get_removable_disks)
    GET_PARTION=""
    for i in ${GET_DISKS}
    do
        GET_PARTION=$(get_partion_form_attrib "$(get_disk_partions ${i})" "ROOT_ATTR_NAME" "${ROOT_ATTR_VAL}")
        if [ "x${GET_PARTION}" != "x" ]; then
            MOUNT_DISK=${GET_PARTION}
            break;
        fi
    done
fi

if [ "x${MOUNT_DISK}" == "x" ]; then
    if [ "x${LABEL}" != "x" ]; then
        GET_DISKS=$(get_all_disks)
        GET_PARTION=""
	echo "查询“${LABEL}”标记指定的存储设备分区......"
        for i in ${GET_DISKS}
        do
# echo "test $i ${LABEL}"
echo -n "查询 $i 设备..."
            GET_PARTION=$(get_partion_form_label_file "$(get_disk_partions ${i})" "${LABEL}")
            if [ "x${GET_PARTION}" != "x" ]; then
		echo "发现。"
                echo "在 ${GET_PARTION} 分区中查找到了指定的启动文件,将开始启动系统..."
                LABEL_FIND=1
                MOUNT_DISK=${GET_PARTION}
                break;
	    else
		echo "未发现。"
            fi
        done
        if [ "x${GET_PARTION}" == "x" ]; then
	    echo "所有可识别的分区都已查询，但未发现指定的启动标记文件。"
            /bin/sh
            exit 2
        fi
    fi
fi


function get_images_list()
{
    IMAGE_LIST=$(cat /ISOSYSTEM/images/images.list | grep -v "^#" | grep -v "[[:blank:]]kernel_" | sort -n | awk -F' ' '{ print $2 }')
    echo ${IMAGE_LIST}
    return
}


if [ "x${MOUNT_DISK}" != "x" ]; then
    OVERLAY_DIR=""
    case "with-$(get_partion_fstype ${MOUNT_DISK})" in
        with-iso9660 | with-vfat | with-ext* | with-xfs)
            OVERLAY_DIR=$(get_overlay_upper ${MOUNT_DISK})
            ;;
        *)
#            echo "Unknown FSTYPE $(get_partion_fstype ${MOUNT_DISK})"
            echo "不能识别 ${MOUNT_DISK} 分区上的 $(get_partion_fstype ${MOUNT_DISK}) 文件系统。"
            /bin/sh
            return
            ;;
    esac
    mount /dev/$MOUNT_DISK /ISOSYSTEM
    if test $? != 0 ; then
	USERDATA_READONLY=1
	mount -o ro /dev/$MOUNT_DISK /ISOSYSTEM
    fi

    if [ ! -f /ISOSYSTEM/images/kernel_${UNAME_STR}.$(uname -m).squashfs ]; then
	echo "没有发现启动内核对应的内核组件文件，不能继续，请检查 /dev/$MOUNT_DISK 分区中的/images目录是否存在，且该目录下是否存在 kernel_${UNAME_STR}.$(uname -m).squashfs 文件。"
	mkdir /images/kernel_${UNAME_STR}
#	/bin/sh
#	return
    else
	mkdir /images/kernel_${UNAME_STR}
	mount -t squashfs /ISOSYSTEM/images/kernel_${UNAME_STR}.$(uname -m).squashfs /images/kernel_${UNAME_STR}
    fi
    if [ x"${MOUNT_STR}" == x ]; then
        MOUNT_STR="/images/kernel_${UNAME_STR}"
    else
        MOUNT_STR="${MOUNT_STR}:/images/kernel_${UNAME_STR}"
    fi


    for i in $(get_images_list)
    do
        if [ -f /ISOSYSTEM/images/$i.squashfs ]; then
#	    echo -n "找到 ${i} 组件，进行加载..."
	    STEP_MOUNT_STR=""
            mkdir /images/${i}
            mount -t squashfs /ISOSYSTEM/images/${i}.squashfs /images/${i}
            STEP_MOUNT_STR="/images/${i}"
#	    echo "完成！"
	    UPDATE_STR="${i%%.*}.update.${i#*.}"
	    if [ "X${UPDATE_STR}" != "x.update." ]; then
		    if [ -f /ISOSYSTEM/images/update/${UPDATE_STR}.squashfs ]; then
			echo -n "发现${i}组件的升级部分，进行加载..."
	 		mkdir /images/${UPDATE_STR}
                	mount -t squashfs /ISOSYSTEM/images/update/${UPDATE_STR}.squashfs /images/${UPDATE_STR}
			STEP_MOUNT_STR="/images/${UPDATE_STR}:${STEP_MOUNT_STR}"
			echo "完成！"
		    fi
	    fi
            if [ x"${MOUNT_STR}" == x ]; then
                MOUNT_STR="${STEP_MOUNT_STR}"
            else
                MOUNT_STR="${MOUNT_STR}:${STEP_MOUNT_STR}"
            fi
        fi
    done

    if [ "x${USERDATA_READONLY}" == "x1" ]; then
        if [ "x${OVERLAY_DIR}" == "xdirectory" ]; then
            if [ x"${MOUNT_STR}" == x ]; then
                MOUNT_STR="/ISOSYSTEM/.userdata/userdata"
            else
                MOUNT_STR="/ISOSYSTEM/.userdata/userdata:${MOUNT_STR}"
            fi
	else
            if [ "x${OVERLAY_DIR}" == "xfile" ]; then
		mkdir /images/.userdata
                mount /ISOSYSTEM/.userdata /.userdata
            	if [ x"${MOUNT_STR}" == x ]; then
                	MOUNT_STR="/.userdata/userdata"
		else
		        MOUNT_STR="/.userdata/userdata:${MOUNT_STR}"
		fi
	    fi
	fi
    fi

    if [ "x${LIVE_MODE}" == "x1" ] || [ "x${USERDATA_READONLY}" == "x1" ]; then
        mount -t tmpfs tmpfs /overlayfs
	if [ "x${LIVE_MODE}" == "x1" ]; then
		echo -e "当前处于 \e[31m初始体验\e[0m 模式，系统将使用最初始化的状态进行启动。"
	else
		echo -e "当前处于 \e[31m系统保护\e[0m 模式，本次对系统本身的修改都将在重启后恢复。"
	fi
    else
        if [ "x${OVERLAY_DIR}" == "xdirectory" ]; then
            mount --bind /ISOSYSTEM/.userdata /overlayfs
        else
            if [ "x${OVERLAY_DIR}" == "xfile" ]; then
                mount /ISOSYSTEM/.userdata /overlayfs
            else
                mount -t tmpfs tmpfs /overlayfs
		echo -e "当前处于 \e[32m体验\e[0m 模式，对系统本身的修改都将在重启后恢复。"
            fi
        fi
    fi

    mkdir -p /overlayfs/userdata
    mkdir -p /overlayfs/.worker

    if [ "x${LIVE_MODE}" == "x1" ] || [ "x${USERDATA_READONLY}" == "x1" ]; then
	if [ "x${LIVE_MODE}" == "x1" ]; then
		mkdir /overlayfs/userdata/etc/
		echo "1" > /overlayfs/userdata/etc/.live_mode
	fi
	if [ "x${USERDATA_READONLY}" == "x1" ]; then
		mkdir /overlayfs/userdata/etc/
		echo "1" > /overlayfs/userdata/etc/.userdata_ro
	fi
    fi

    if [ x"$MOUNT_STR" != x ]; then
	mount -t overlay overlay -o lowerdir=${MOUNT_STR},upperdir=/overlayfs/userdata,workdir=/overlayfs/.worker /rootfs
        exec switch_root /rootfs /sbin/init
    else
        /bin/sh
    fi
else
    /bin/sh
fi

