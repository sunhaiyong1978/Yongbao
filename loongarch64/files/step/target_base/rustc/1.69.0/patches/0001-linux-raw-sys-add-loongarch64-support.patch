From b22cd8d66d6f3ab67b1cd9bc52c1fe8f9fcd19e3 Mon Sep 17 00:00:00 2001
From: Sun Haiyong <sunhaiyong@zdbr.net>
Date: Wed, 12 Apr 2023 08:39:46 +0000
Subject: [PATCH] linux-raw-sys add loongarch64 support.

---
 vendor/linux-raw-sys/src/lib.rs               |   16 +
 vendor/linux-raw-sys/src/loongarch64/errno.rs |  135 +
 .../linux-raw-sys/src/loongarch64/general.rs  | 5205 +++++++++++++++++
 vendor/linux-raw-sys/src/loongarch64/ioctl.rs | 1465 +++++
 .../linux-raw-sys/src/loongarch64/netlink.rs  | 2860 +++++++++
 5 files changed, 9681 insertions(+)
 create mode 100644 vendor/linux-raw-sys/src/loongarch64/errno.rs
 create mode 100644 vendor/linux-raw-sys/src/loongarch64/general.rs
 create mode 100644 vendor/linux-raw-sys/src/loongarch64/ioctl.rs
 create mode 100644 vendor/linux-raw-sys/src/loongarch64/netlink.rs

diff --git a/vendor/linux-raw-sys/src/lib.rs b/vendor/linux-raw-sys/src/lib.rs
index 3204531d0..6c9c948ec 100644
--- a/vendor/linux-raw-sys/src/lib.rs
+++ b/vendor/linux-raw-sys/src/lib.rs
@@ -165,6 +165,22 @@ pub mod ioctl;
 #[path = "aarch64/netlink.rs"]
 pub mod netlink;
 #[cfg(feature = "errno")]
+#[cfg(target_arch = "loongarch64")]
+#[path = "loongarch64/errno.rs"]
+pub mod errno;
+#[cfg(feature = "general")]
+#[cfg(target_arch = "loongarch64")]
+#[path = "loongarch64/general.rs"]
+pub mod general;
+#[cfg(feature = "ioctl")]
+#[cfg(target_arch = "loongarch64")]
+#[path = "loongarch64/ioctl.rs"]
+pub mod ioctl;
+#[cfg(feature = "netlink")]
+#[cfg(target_arch = "loongarch64")]
+#[path = "loongarch64/netlink.rs"]
+pub mod netlink;
+#[cfg(feature = "errno")]
 #[cfg(target_arch = "mips")]
 #[path = "mips/errno.rs"]
 pub mod errno;
diff --git a/vendor/linux-raw-sys/src/loongarch64/errno.rs b/vendor/linux-raw-sys/src/loongarch64/errno.rs
new file mode 100644
index 000000000..8c5620d74
--- /dev/null
+++ b/vendor/linux-raw-sys/src/loongarch64/errno.rs
@@ -0,0 +1,135 @@
+/* automatically generated by rust-bindgen 0.59.2 */
+
+pub const EPERM: u32 = 1;
+pub const ENOENT: u32 = 2;
+pub const ESRCH: u32 = 3;
+pub const EINTR: u32 = 4;
+pub const EIO: u32 = 5;
+pub const ENXIO: u32 = 6;
+pub const E2BIG: u32 = 7;
+pub const ENOEXEC: u32 = 8;
+pub const EBADF: u32 = 9;
+pub const ECHILD: u32 = 10;
+pub const EAGAIN: u32 = 11;
+pub const ENOMEM: u32 = 12;
+pub const EACCES: u32 = 13;
+pub const EFAULT: u32 = 14;
+pub const ENOTBLK: u32 = 15;
+pub const EBUSY: u32 = 16;
+pub const EEXIST: u32 = 17;
+pub const EXDEV: u32 = 18;
+pub const ENODEV: u32 = 19;
+pub const ENOTDIR: u32 = 20;
+pub const EISDIR: u32 = 21;
+pub const EINVAL: u32 = 22;
+pub const ENFILE: u32 = 23;
+pub const EMFILE: u32 = 24;
+pub const ENOTTY: u32 = 25;
+pub const ETXTBSY: u32 = 26;
+pub const EFBIG: u32 = 27;
+pub const ENOSPC: u32 = 28;
+pub const ESPIPE: u32 = 29;
+pub const EROFS: u32 = 30;
+pub const EMLINK: u32 = 31;
+pub const EPIPE: u32 = 32;
+pub const EDOM: u32 = 33;
+pub const ERANGE: u32 = 34;
+pub const EDEADLK: u32 = 35;
+pub const ENAMETOOLONG: u32 = 36;
+pub const ENOLCK: u32 = 37;
+pub const ENOSYS: u32 = 38;
+pub const ENOTEMPTY: u32 = 39;
+pub const ELOOP: u32 = 40;
+pub const EWOULDBLOCK: u32 = 11;
+pub const ENOMSG: u32 = 42;
+pub const EIDRM: u32 = 43;
+pub const ECHRNG: u32 = 44;
+pub const EL2NSYNC: u32 = 45;
+pub const EL3HLT: u32 = 46;
+pub const EL3RST: u32 = 47;
+pub const ELNRNG: u32 = 48;
+pub const EUNATCH: u32 = 49;
+pub const ENOCSI: u32 = 50;
+pub const EL2HLT: u32 = 51;
+pub const EBADE: u32 = 52;
+pub const EBADR: u32 = 53;
+pub const EXFULL: u32 = 54;
+pub const ENOANO: u32 = 55;
+pub const EBADRQC: u32 = 56;
+pub const EBADSLT: u32 = 57;
+pub const EDEADLOCK: u32 = 35;
+pub const EBFONT: u32 = 59;
+pub const ENOSTR: u32 = 60;
+pub const ENODATA: u32 = 61;
+pub const ETIME: u32 = 62;
+pub const ENOSR: u32 = 63;
+pub const ENONET: u32 = 64;
+pub const ENOPKG: u32 = 65;
+pub const EREMOTE: u32 = 66;
+pub const ENOLINK: u32 = 67;
+pub const EADV: u32 = 68;
+pub const ESRMNT: u32 = 69;
+pub const ECOMM: u32 = 70;
+pub const EPROTO: u32 = 71;
+pub const EMULTIHOP: u32 = 72;
+pub const EDOTDOT: u32 = 73;
+pub const EBADMSG: u32 = 74;
+pub const EOVERFLOW: u32 = 75;
+pub const ENOTUNIQ: u32 = 76;
+pub const EBADFD: u32 = 77;
+pub const EREMCHG: u32 = 78;
+pub const ELIBACC: u32 = 79;
+pub const ELIBBAD: u32 = 80;
+pub const ELIBSCN: u32 = 81;
+pub const ELIBMAX: u32 = 82;
+pub const ELIBEXEC: u32 = 83;
+pub const EILSEQ: u32 = 84;
+pub const ERESTART: u32 = 85;
+pub const ESTRPIPE: u32 = 86;
+pub const EUSERS: u32 = 87;
+pub const ENOTSOCK: u32 = 88;
+pub const EDESTADDRREQ: u32 = 89;
+pub const EMSGSIZE: u32 = 90;
+pub const EPROTOTYPE: u32 = 91;
+pub const ENOPROTOOPT: u32 = 92;
+pub const EPROTONOSUPPORT: u32 = 93;
+pub const ESOCKTNOSUPPORT: u32 = 94;
+pub const EOPNOTSUPP: u32 = 95;
+pub const EPFNOSUPPORT: u32 = 96;
+pub const EAFNOSUPPORT: u32 = 97;
+pub const EADDRINUSE: u32 = 98;
+pub const EADDRNOTAVAIL: u32 = 99;
+pub const ENETDOWN: u32 = 100;
+pub const ENETUNREACH: u32 = 101;
+pub const ENETRESET: u32 = 102;
+pub const ECONNABORTED: u32 = 103;
+pub const ECONNRESET: u32 = 104;
+pub const ENOBUFS: u32 = 105;
+pub const EISCONN: u32 = 106;
+pub const ENOTCONN: u32 = 107;
+pub const ESHUTDOWN: u32 = 108;
+pub const ETOOMANYREFS: u32 = 109;
+pub const ETIMEDOUT: u32 = 110;
+pub const ECONNREFUSED: u32 = 111;
+pub const EHOSTDOWN: u32 = 112;
+pub const EHOSTUNREACH: u32 = 113;
+pub const EALREADY: u32 = 114;
+pub const EINPROGRESS: u32 = 115;
+pub const ESTALE: u32 = 116;
+pub const EUCLEAN: u32 = 117;
+pub const ENOTNAM: u32 = 118;
+pub const ENAVAIL: u32 = 119;
+pub const EISNAM: u32 = 120;
+pub const EREMOTEIO: u32 = 121;
+pub const EDQUOT: u32 = 122;
+pub const ENOMEDIUM: u32 = 123;
+pub const EMEDIUMTYPE: u32 = 124;
+pub const ECANCELED: u32 = 125;
+pub const ENOKEY: u32 = 126;
+pub const EKEYEXPIRED: u32 = 127;
+pub const EKEYREVOKED: u32 = 128;
+pub const EKEYREJECTED: u32 = 129;
+pub const EOWNERDEAD: u32 = 130;
+pub const ENOTRECOVERABLE: u32 = 131;
+pub const ERFKILL: u32 = 132;
+pub const EHWPOISON: u32 = 133;
diff --git a/vendor/linux-raw-sys/src/loongarch64/general.rs b/vendor/linux-raw-sys/src/loongarch64/general.rs
new file mode 100644
index 000000000..79d309016
--- /dev/null
+++ b/vendor/linux-raw-sys/src/loongarch64/general.rs
@@ -0,0 +1,5205 @@
+/* automatically generated by rust-bindgen 0.59.2 */
+
+#[repr(C)]
+#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
+pub struct __BindgenBitfieldUnit<Storage> {
+storage: Storage,
+}
+impl<Storage> __BindgenBitfieldUnit<Storage> {
+#[inline]
+pub const fn new(storage: Storage) -> Self {
+Self { storage }
+}
+}
+impl<Storage> __BindgenBitfieldUnit<Storage>
+where
+Storage: AsRef<[u8]> + AsMut<[u8]>,
+{
+#[inline]
+pub fn get_bit(&self, index: usize) -> bool {
+debug_assert!(index / 8 < self.storage.as_ref().len());
+let byte_index = index / 8;
+let byte = self.storage.as_ref()[byte_index];
+let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
+let mask = 1 << bit_index;
+byte & mask == mask
+}
+#[inline]
+pub fn set_bit(&mut self, index: usize, val: bool) {
+debug_assert!(index / 8 < self.storage.as_ref().len());
+let byte_index = index / 8;
+let byte = &mut self.storage.as_mut()[byte_index];
+let bit_index = if cfg!(target_endian = "big") { 7 - (index % 8) } else { index % 8 };
+let mask = 1 << bit_index;
+if val {
+*byte |= mask;
+} else {
+*byte &= !mask;
+}
+}
+#[inline]
+pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
+debug_assert!(bit_width <= 64);
+debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
+debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
+let mut val = 0;
+for i in 0..(bit_width as usize) {
+if self.get_bit(i + bit_offset) {
+let index = if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
+val |= 1 << index;
+}
+}
+val
+}
+#[inline]
+pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
+debug_assert!(bit_width <= 64);
+debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
+debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
+for i in 0..(bit_width as usize) {
+let mask = 1 << i;
+let val_bit_is_set = val & mask == mask;
+let index = if cfg!(target_endian = "big") { bit_width as usize - 1 - i } else { i };
+self.set_bit(index + bit_offset, val_bit_is_set);
+}
+}
+}
+#[repr(C)]
+#[derive(Default)]
+pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
+impl<T> __IncompleteArrayField<T> {
+#[inline]
+pub const fn new() -> Self {
+__IncompleteArrayField(::core::marker::PhantomData, [])
+}
+#[inline]
+pub fn as_ptr(&self) -> *const T {
+self as *const _ as *const T
+}
+#[inline]
+pub fn as_mut_ptr(&mut self) -> *mut T {
+self as *mut _ as *mut T
+}
+#[inline]
+pub unsafe fn as_slice(&self, len: usize) -> &[T] {
+::core::slice::from_raw_parts(self.as_ptr(), len)
+}
+#[inline]
+pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
+::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
+}
+}
+impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
+fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
+fmt.write_str("__IncompleteArrayField")
+}
+}
+#[repr(C)]
+pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
+impl<T> __BindgenUnionField<T> {
+#[inline]
+pub const fn new() -> Self {
+__BindgenUnionField(::core::marker::PhantomData)
+}
+#[inline]
+pub unsafe fn as_ref(&self) -> &T {
+::core::mem::transmute(self)
+}
+#[inline]
+pub unsafe fn as_mut(&mut self) -> &mut T {
+::core::mem::transmute(self)
+}
+}
+impl<T> ::core::default::Default for __BindgenUnionField<T> {
+#[inline]
+fn default() -> Self {
+Self::new()
+}
+}
+impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
+#[inline]
+fn clone(&self) -> Self {
+Self::new()
+}
+}
+impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
+impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
+fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
+fmt.write_str("__BindgenUnionField")
+}
+}
+impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
+fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
+}
+impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
+fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
+true
+}
+}
+impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
+pub const LINUX_VERSION_CODE: u32 = 393728;
+pub const LINUX_VERSION_MAJOR: u32 = 6;
+pub const LINUX_VERSION_PATCHLEVEL: u32 = 2;
+pub const LINUX_VERSION_SUBLEVEL: u32 = 0;
+pub const AT_SYSINFO_EHDR: u32 = 33;
+pub const AT_VECTOR_SIZE_ARCH: u32 = 1;
+pub const AT_NULL: u32 = 0;
+pub const AT_IGNORE: u32 = 1;
+pub const AT_EXECFD: u32 = 2;
+pub const AT_PHDR: u32 = 3;
+pub const AT_PHENT: u32 = 4;
+pub const AT_PHNUM: u32 = 5;
+pub const AT_PAGESZ: u32 = 6;
+pub const AT_BASE: u32 = 7;
+pub const AT_FLAGS: u32 = 8;
+pub const AT_ENTRY: u32 = 9;
+pub const AT_NOTELF: u32 = 10;
+pub const AT_UID: u32 = 11;
+pub const AT_EUID: u32 = 12;
+pub const AT_GID: u32 = 13;
+pub const AT_EGID: u32 = 14;
+pub const AT_PLATFORM: u32 = 15;
+pub const AT_HWCAP: u32 = 16;
+pub const AT_CLKTCK: u32 = 17;
+pub const AT_SECURE: u32 = 23;
+pub const AT_BASE_PLATFORM: u32 = 24;
+pub const AT_RANDOM: u32 = 25;
+pub const AT_HWCAP2: u32 = 26;
+pub const AT_EXECFN: u32 = 31;
+pub const AT_MINSIGSTKSZ: u32 = 51;
+pub const __FD_SETSIZE: u32 = 1024;
+pub const _LINUX_CAPABILITY_VERSION_1: u32 = 429392688;
+pub const _LINUX_CAPABILITY_U32S_1: u32 = 1;
+pub const _LINUX_CAPABILITY_VERSION_2: u32 = 537333798;
+pub const _LINUX_CAPABILITY_U32S_2: u32 = 2;
+pub const _LINUX_CAPABILITY_VERSION_3: u32 = 537396514;
+pub const _LINUX_CAPABILITY_U32S_3: u32 = 2;
+pub const VFS_CAP_REVISION_MASK: u32 = 4278190080;
+pub const VFS_CAP_REVISION_SHIFT: u32 = 24;
+pub const VFS_CAP_FLAGS_MASK: i64 = -4278190081;
+pub const VFS_CAP_FLAGS_EFFECTIVE: u32 = 1;
+pub const VFS_CAP_REVISION_1: u32 = 16777216;
+pub const VFS_CAP_U32_1: u32 = 1;
+pub const VFS_CAP_REVISION_2: u32 = 33554432;
+pub const VFS_CAP_U32_2: u32 = 2;
+pub const VFS_CAP_REVISION_3: u32 = 50331648;
+pub const VFS_CAP_U32_3: u32 = 2;
+pub const VFS_CAP_U32: u32 = 2;
+pub const VFS_CAP_REVISION: u32 = 50331648;
+pub const _LINUX_CAPABILITY_VERSION: u32 = 429392688;
+pub const _LINUX_CAPABILITY_U32S: u32 = 1;
+pub const CAP_CHOWN: u32 = 0;
+pub const CAP_DAC_OVERRIDE: u32 = 1;
+pub const CAP_DAC_READ_SEARCH: u32 = 2;
+pub const CAP_FOWNER: u32 = 3;
+pub const CAP_FSETID: u32 = 4;
+pub const CAP_KILL: u32 = 5;
+pub const CAP_SETGID: u32 = 6;
+pub const CAP_SETUID: u32 = 7;
+pub const CAP_SETPCAP: u32 = 8;
+pub const CAP_LINUX_IMMUTABLE: u32 = 9;
+pub const CAP_NET_BIND_SERVICE: u32 = 10;
+pub const CAP_NET_BROADCAST: u32 = 11;
+pub const CAP_NET_ADMIN: u32 = 12;
+pub const CAP_NET_RAW: u32 = 13;
+pub const CAP_IPC_LOCK: u32 = 14;
+pub const CAP_IPC_OWNER: u32 = 15;
+pub const CAP_SYS_MODULE: u32 = 16;
+pub const CAP_SYS_RAWIO: u32 = 17;
+pub const CAP_SYS_CHROOT: u32 = 18;
+pub const CAP_SYS_PTRACE: u32 = 19;
+pub const CAP_SYS_PACCT: u32 = 20;
+pub const CAP_SYS_ADMIN: u32 = 21;
+pub const CAP_SYS_BOOT: u32 = 22;
+pub const CAP_SYS_NICE: u32 = 23;
+pub const CAP_SYS_RESOURCE: u32 = 24;
+pub const CAP_SYS_TIME: u32 = 25;
+pub const CAP_SYS_TTY_CONFIG: u32 = 26;
+pub const CAP_MKNOD: u32 = 27;
+pub const CAP_LEASE: u32 = 28;
+pub const CAP_AUDIT_WRITE: u32 = 29;
+pub const CAP_AUDIT_CONTROL: u32 = 30;
+pub const CAP_SETFCAP: u32 = 31;
+pub const CAP_MAC_OVERRIDE: u32 = 32;
+pub const CAP_MAC_ADMIN: u32 = 33;
+pub const CAP_SYSLOG: u32 = 34;
+pub const CAP_WAKE_ALARM: u32 = 35;
+pub const CAP_BLOCK_SUSPEND: u32 = 36;
+pub const CAP_AUDIT_READ: u32 = 37;
+pub const CAP_PERFMON: u32 = 38;
+pub const CAP_BPF: u32 = 39;
+pub const CAP_CHECKPOINT_RESTORE: u32 = 40;
+pub const CAP_LAST_CAP: u32 = 40;
+pub const O_ACCMODE: u32 = 3;
+pub const O_RDONLY: u32 = 0;
+pub const O_WRONLY: u32 = 1;
+pub const O_RDWR: u32 = 2;
+pub const O_CREAT: u32 = 64;
+pub const O_EXCL: u32 = 128;
+pub const O_NOCTTY: u32 = 256;
+pub const O_TRUNC: u32 = 512;
+pub const O_APPEND: u32 = 1024;
+pub const O_NONBLOCK: u32 = 2048;
+pub const O_DSYNC: u32 = 4096;
+pub const FASYNC: u32 = 8192;
+pub const O_DIRECT: u32 = 16384;
+pub const O_LARGEFILE: u32 = 32768;
+pub const O_DIRECTORY: u32 = 65536;
+pub const O_NOFOLLOW: u32 = 131072;
+pub const O_NOATIME: u32 = 262144;
+pub const O_CLOEXEC: u32 = 524288;
+pub const __O_SYNC: u32 = 1048576;
+pub const O_SYNC: u32 = 1052672;
+pub const O_PATH: u32 = 2097152;
+pub const __O_TMPFILE: u32 = 4194304;
+pub const O_TMPFILE: u32 = 4259840;
+pub const O_TMPFILE_MASK: u32 = 4259904;
+pub const O_NDELAY: u32 = 2048;
+pub const F_DUPFD: u32 = 0;
+pub const F_GETFD: u32 = 1;
+pub const F_SETFD: u32 = 2;
+pub const F_GETFL: u32 = 3;
+pub const F_SETFL: u32 = 4;
+pub const F_GETLK: u32 = 5;
+pub const F_SETLK: u32 = 6;
+pub const F_SETLKW: u32 = 7;
+pub const F_SETOWN: u32 = 8;
+pub const F_GETOWN: u32 = 9;
+pub const F_SETSIG: u32 = 10;
+pub const F_GETSIG: u32 = 11;
+pub const F_SETOWN_EX: u32 = 15;
+pub const F_GETOWN_EX: u32 = 16;
+pub const F_GETOWNER_UIDS: u32 = 17;
+pub const F_OFD_GETLK: u32 = 36;
+pub const F_OFD_SETLK: u32 = 37;
+pub const F_OFD_SETLKW: u32 = 38;
+pub const F_OWNER_TID: u32 = 0;
+pub const F_OWNER_PID: u32 = 1;
+pub const F_OWNER_PGRP: u32 = 2;
+pub const FD_CLOEXEC: u32 = 1;
+pub const F_RDLCK: u32 = 0;
+pub const F_WRLCK: u32 = 1;
+pub const F_UNLCK: u32 = 2;
+pub const F_EXLCK: u32 = 4;
+pub const F_SHLCK: u32 = 8;
+pub const LOCK_SH: u32 = 1;
+pub const LOCK_EX: u32 = 2;
+pub const LOCK_NB: u32 = 4;
+pub const LOCK_UN: u32 = 8;
+pub const LOCK_MAND: u32 = 32;
+pub const LOCK_READ: u32 = 64;
+pub const LOCK_WRITE: u32 = 128;
+pub const LOCK_RW: u32 = 192;
+pub const F_LINUX_SPECIFIC_BASE: u32 = 1024;
+pub const RESOLVE_NO_XDEV: u32 = 1;
+pub const RESOLVE_NO_MAGICLINKS: u32 = 2;
+pub const RESOLVE_NO_SYMLINKS: u32 = 4;
+pub const RESOLVE_BENEATH: u32 = 8;
+pub const RESOLVE_IN_ROOT: u32 = 16;
+pub const RESOLVE_CACHED: u32 = 32;
+pub const F_SETLEASE: u32 = 1024;
+pub const F_GETLEASE: u32 = 1025;
+pub const F_CANCELLK: u32 = 1029;
+pub const F_DUPFD_CLOEXEC: u32 = 1030;
+pub const F_NOTIFY: u32 = 1026;
+pub const F_SETPIPE_SZ: u32 = 1031;
+pub const F_GETPIPE_SZ: u32 = 1032;
+pub const F_ADD_SEALS: u32 = 1033;
+pub const F_GET_SEALS: u32 = 1034;
+pub const F_SEAL_SEAL: u32 = 1;
+pub const F_SEAL_SHRINK: u32 = 2;
+pub const F_SEAL_GROW: u32 = 4;
+pub const F_SEAL_WRITE: u32 = 8;
+pub const F_SEAL_FUTURE_WRITE: u32 = 16;
+pub const F_GET_RW_HINT: u32 = 1035;
+pub const F_SET_RW_HINT: u32 = 1036;
+pub const F_GET_FILE_RW_HINT: u32 = 1037;
+pub const F_SET_FILE_RW_HINT: u32 = 1038;
+pub const RWH_WRITE_LIFE_NOT_SET: u32 = 0;
+pub const RWH_WRITE_LIFE_NONE: u32 = 1;
+pub const RWH_WRITE_LIFE_SHORT: u32 = 2;
+pub const RWH_WRITE_LIFE_MEDIUM: u32 = 3;
+pub const RWH_WRITE_LIFE_LONG: u32 = 4;
+pub const RWH_WRITE_LIFE_EXTREME: u32 = 5;
+pub const RWF_WRITE_LIFE_NOT_SET: u32 = 0;
+pub const DN_ACCESS: u32 = 1;
+pub const DN_MODIFY: u32 = 2;
+pub const DN_CREATE: u32 = 4;
+pub const DN_DELETE: u32 = 8;
+pub const DN_RENAME: u32 = 16;
+pub const DN_ATTRIB: u32 = 32;
+pub const DN_MULTISHOT: u32 = 2147483648;
+pub const AT_FDCWD: i32 = -100;
+pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
+pub const AT_EACCESS: u32 = 512;
+pub const AT_REMOVEDIR: u32 = 512;
+pub const AT_SYMLINK_FOLLOW: u32 = 1024;
+pub const AT_NO_AUTOMOUNT: u32 = 2048;
+pub const AT_EMPTY_PATH: u32 = 4096;
+pub const AT_STATX_SYNC_TYPE: u32 = 24576;
+pub const AT_STATX_SYNC_AS_STAT: u32 = 0;
+pub const AT_STATX_FORCE_SYNC: u32 = 8192;
+pub const AT_STATX_DONT_SYNC: u32 = 16384;
+pub const AT_RECURSIVE: u32 = 32768;
+pub const EPOLL_CLOEXEC: u32 = 524288;
+pub const EPOLL_CTL_ADD: u32 = 1;
+pub const EPOLL_CTL_DEL: u32 = 2;
+pub const EPOLL_CTL_MOD: u32 = 3;
+pub const POSIX_FADV_NORMAL: u32 = 0;
+pub const POSIX_FADV_RANDOM: u32 = 1;
+pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
+pub const POSIX_FADV_WILLNEED: u32 = 3;
+pub const POSIX_FADV_DONTNEED: u32 = 4;
+pub const POSIX_FADV_NOREUSE: u32 = 5;
+pub const FALLOC_FL_KEEP_SIZE: u32 = 1;
+pub const FALLOC_FL_PUNCH_HOLE: u32 = 2;
+pub const FALLOC_FL_NO_HIDE_STALE: u32 = 4;
+pub const FALLOC_FL_COLLAPSE_RANGE: u32 = 8;
+pub const FALLOC_FL_ZERO_RANGE: u32 = 16;
+pub const FALLOC_FL_INSERT_RANGE: u32 = 32;
+pub const FALLOC_FL_UNSHARE_RANGE: u32 = 64;
+pub const NR_OPEN: u32 = 1024;
+pub const NGROUPS_MAX: u32 = 65536;
+pub const ARG_MAX: u32 = 131072;
+pub const LINK_MAX: u32 = 127;
+pub const MAX_CANON: u32 = 255;
+pub const MAX_INPUT: u32 = 255;
+pub const NAME_MAX: u32 = 255;
+pub const PATH_MAX: u32 = 4096;
+pub const PIPE_BUF: u32 = 4096;
+pub const XATTR_NAME_MAX: u32 = 255;
+pub const XATTR_SIZE_MAX: u32 = 65536;
+pub const XATTR_LIST_MAX: u32 = 65536;
+pub const RTSIG_MAX: u32 = 32;
+pub const _IOC_NRBITS: u32 = 8;
+pub const _IOC_TYPEBITS: u32 = 8;
+pub const _IOC_SIZEBITS: u32 = 14;
+pub const _IOC_DIRBITS: u32 = 2;
+pub const _IOC_NRMASK: u32 = 255;
+pub const _IOC_TYPEMASK: u32 = 255;
+pub const _IOC_SIZEMASK: u32 = 16383;
+pub const _IOC_DIRMASK: u32 = 3;
+pub const _IOC_NRSHIFT: u32 = 0;
+pub const _IOC_TYPESHIFT: u32 = 8;
+pub const _IOC_SIZESHIFT: u32 = 16;
+pub const _IOC_DIRSHIFT: u32 = 30;
+pub const _IOC_NONE: u32 = 0;
+pub const _IOC_WRITE: u32 = 1;
+pub const _IOC_READ: u32 = 2;
+pub const IOC_IN: u32 = 1073741824;
+pub const IOC_OUT: u32 = 2147483648;
+pub const IOC_INOUT: u32 = 3221225472;
+pub const IOCSIZE_MASK: u32 = 1073676288;
+pub const IOCSIZE_SHIFT: u32 = 16;
+pub const FSCRYPT_POLICY_FLAGS_PAD_4: u32 = 0;
+pub const FSCRYPT_POLICY_FLAGS_PAD_8: u32 = 1;
+pub const FSCRYPT_POLICY_FLAGS_PAD_16: u32 = 2;
+pub const FSCRYPT_POLICY_FLAGS_PAD_32: u32 = 3;
+pub const FSCRYPT_POLICY_FLAGS_PAD_MASK: u32 = 3;
+pub const FSCRYPT_POLICY_FLAG_DIRECT_KEY: u32 = 4;
+pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64: u32 = 8;
+pub const FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32: u32 = 16;
+pub const FSCRYPT_MODE_AES_256_XTS: u32 = 1;
+pub const FSCRYPT_MODE_AES_256_CTS: u32 = 4;
+pub const FSCRYPT_MODE_AES_128_CBC: u32 = 5;
+pub const FSCRYPT_MODE_AES_128_CTS: u32 = 6;
+pub const FSCRYPT_MODE_SM4_XTS: u32 = 7;
+pub const FSCRYPT_MODE_SM4_CTS: u32 = 8;
+pub const FSCRYPT_MODE_ADIANTUM: u32 = 9;
+pub const FSCRYPT_MODE_AES_256_HCTR2: u32 = 10;
+pub const FSCRYPT_POLICY_V1: u32 = 0;
+pub const FSCRYPT_KEY_DESCRIPTOR_SIZE: u32 = 8;
+pub const FSCRYPT_KEY_DESC_PREFIX: &[u8; 9usize] = b"fscrypt:\0";
+pub const FSCRYPT_KEY_DESC_PREFIX_SIZE: u32 = 8;
+pub const FSCRYPT_MAX_KEY_SIZE: u32 = 64;
+pub const FSCRYPT_POLICY_V2: u32 = 2;
+pub const FSCRYPT_KEY_IDENTIFIER_SIZE: u32 = 16;
+pub const FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR: u32 = 1;
+pub const FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER: u32 = 2;
+pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY: u32 = 1;
+pub const FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS: u32 = 2;
+pub const FSCRYPT_KEY_STATUS_ABSENT: u32 = 1;
+pub const FSCRYPT_KEY_STATUS_PRESENT: u32 = 2;
+pub const FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED: u32 = 3;
+pub const FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF: u32 = 1;
+pub const FS_KEY_DESCRIPTOR_SIZE: u32 = 8;
+pub const FS_POLICY_FLAGS_PAD_4: u32 = 0;
+pub const FS_POLICY_FLAGS_PAD_8: u32 = 1;
+pub const FS_POLICY_FLAGS_PAD_16: u32 = 2;
+pub const FS_POLICY_FLAGS_PAD_32: u32 = 3;
+pub const FS_POLICY_FLAGS_PAD_MASK: u32 = 3;
+pub const FS_POLICY_FLAG_DIRECT_KEY: u32 = 4;
+pub const FS_POLICY_FLAGS_VALID: u32 = 7;
+pub const FS_ENCRYPTION_MODE_INVALID: u32 = 0;
+pub const FS_ENCRYPTION_MODE_AES_256_XTS: u32 = 1;
+pub const FS_ENCRYPTION_MODE_AES_256_GCM: u32 = 2;
+pub const FS_ENCRYPTION_MODE_AES_256_CBC: u32 = 3;
+pub const FS_ENCRYPTION_MODE_AES_256_CTS: u32 = 4;
+pub const FS_ENCRYPTION_MODE_AES_128_CBC: u32 = 5;
+pub const FS_ENCRYPTION_MODE_AES_128_CTS: u32 = 6;
+pub const FS_ENCRYPTION_MODE_ADIANTUM: u32 = 9;
+pub const FS_KEY_DESC_PREFIX: &[u8; 9usize] = b"fscrypt:\0";
+pub const FS_KEY_DESC_PREFIX_SIZE: u32 = 8;
+pub const FS_MAX_KEY_SIZE: u32 = 64;
+pub const MS_RDONLY: u32 = 1;
+pub const MS_NOSUID: u32 = 2;
+pub const MS_NODEV: u32 = 4;
+pub const MS_NOEXEC: u32 = 8;
+pub const MS_SYNCHRONOUS: u32 = 16;
+pub const MS_REMOUNT: u32 = 32;
+pub const MS_MANDLOCK: u32 = 64;
+pub const MS_DIRSYNC: u32 = 128;
+pub const MS_NOSYMFOLLOW: u32 = 256;
+pub const MS_NOATIME: u32 = 1024;
+pub const MS_NODIRATIME: u32 = 2048;
+pub const MS_BIND: u32 = 4096;
+pub const MS_MOVE: u32 = 8192;
+pub const MS_REC: u32 = 16384;
+pub const MS_VERBOSE: u32 = 32768;
+pub const MS_SILENT: u32 = 32768;
+pub const MS_POSIXACL: u32 = 65536;
+pub const MS_UNBINDABLE: u32 = 131072;
+pub const MS_PRIVATE: u32 = 262144;
+pub const MS_SLAVE: u32 = 524288;
+pub const MS_SHARED: u32 = 1048576;
+pub const MS_RELATIME: u32 = 2097152;
+pub const MS_KERNMOUNT: u32 = 4194304;
+pub const MS_I_VERSION: u32 = 8388608;
+pub const MS_STRICTATIME: u32 = 16777216;
+pub const MS_LAZYTIME: u32 = 33554432;
+pub const MS_SUBMOUNT: u32 = 67108864;
+pub const MS_NOREMOTELOCK: u32 = 134217728;
+pub const MS_NOSEC: u32 = 268435456;
+pub const MS_BORN: u32 = 536870912;
+pub const MS_ACTIVE: u32 = 1073741824;
+pub const MS_NOUSER: u32 = 2147483648;
+pub const MS_RMT_MASK: u32 = 41943121;
+pub const MS_MGC_VAL: u32 = 3236757504;
+pub const MS_MGC_MSK: u32 = 4294901760;
+pub const OPEN_TREE_CLONE: u32 = 1;
+pub const OPEN_TREE_CLOEXEC: u32 = 524288;
+pub const MOVE_MOUNT_F_SYMLINKS: u32 = 1;
+pub const MOVE_MOUNT_F_AUTOMOUNTS: u32 = 2;
+pub const MOVE_MOUNT_F_EMPTY_PATH: u32 = 4;
+pub const MOVE_MOUNT_T_SYMLINKS: u32 = 16;
+pub const MOVE_MOUNT_T_AUTOMOUNTS: u32 = 32;
+pub const MOVE_MOUNT_T_EMPTY_PATH: u32 = 64;
+pub const MOVE_MOUNT_SET_GROUP: u32 = 256;
+pub const MOVE_MOUNT__MASK: u32 = 375;
+pub const FSOPEN_CLOEXEC: u32 = 1;
+pub const FSPICK_CLOEXEC: u32 = 1;
+pub const FSPICK_SYMLINK_NOFOLLOW: u32 = 2;
+pub const FSPICK_NO_AUTOMOUNT: u32 = 4;
+pub const FSPICK_EMPTY_PATH: u32 = 8;
+pub const FSMOUNT_CLOEXEC: u32 = 1;
+pub const MOUNT_ATTR_RDONLY: u32 = 1;
+pub const MOUNT_ATTR_NOSUID: u32 = 2;
+pub const MOUNT_ATTR_NODEV: u32 = 4;
+pub const MOUNT_ATTR_NOEXEC: u32 = 8;
+pub const MOUNT_ATTR__ATIME: u32 = 112;
+pub const MOUNT_ATTR_RELATIME: u32 = 0;
+pub const MOUNT_ATTR_NOATIME: u32 = 16;
+pub const MOUNT_ATTR_STRICTATIME: u32 = 32;
+pub const MOUNT_ATTR_NODIRATIME: u32 = 128;
+pub const MOUNT_ATTR_IDMAP: u32 = 1048576;
+pub const MOUNT_ATTR_NOSYMFOLLOW: u32 = 2097152;
+pub const MOUNT_ATTR_SIZE_VER0: u32 = 32;
+pub const INR_OPEN_CUR: u32 = 1024;
+pub const INR_OPEN_MAX: u32 = 4096;
+pub const BLOCK_SIZE_BITS: u32 = 10;
+pub const BLOCK_SIZE: u32 = 1024;
+pub const SEEK_SET: u32 = 0;
+pub const SEEK_CUR: u32 = 1;
+pub const SEEK_END: u32 = 2;
+pub const SEEK_DATA: u32 = 3;
+pub const SEEK_HOLE: u32 = 4;
+pub const SEEK_MAX: u32 = 4;
+pub const RENAME_NOREPLACE: u32 = 1;
+pub const RENAME_EXCHANGE: u32 = 2;
+pub const RENAME_WHITEOUT: u32 = 4;
+pub const FILE_DEDUPE_RANGE_SAME: u32 = 0;
+pub const FILE_DEDUPE_RANGE_DIFFERS: u32 = 1;
+pub const NR_FILE: u32 = 8192;
+pub const FS_XFLAG_REALTIME: u32 = 1;
+pub const FS_XFLAG_PREALLOC: u32 = 2;
+pub const FS_XFLAG_IMMUTABLE: u32 = 8;
+pub const FS_XFLAG_APPEND: u32 = 16;
+pub const FS_XFLAG_SYNC: u32 = 32;
+pub const FS_XFLAG_NOATIME: u32 = 64;
+pub const FS_XFLAG_NODUMP: u32 = 128;
+pub const FS_XFLAG_RTINHERIT: u32 = 256;
+pub const FS_XFLAG_PROJINHERIT: u32 = 512;
+pub const FS_XFLAG_NOSYMLINKS: u32 = 1024;
+pub const FS_XFLAG_EXTSIZE: u32 = 2048;
+pub const FS_XFLAG_EXTSZINHERIT: u32 = 4096;
+pub const FS_XFLAG_NODEFRAG: u32 = 8192;
+pub const FS_XFLAG_FILESTREAM: u32 = 16384;
+pub const FS_XFLAG_DAX: u32 = 32768;
+pub const FS_XFLAG_COWEXTSIZE: u32 = 65536;
+pub const FS_XFLAG_HASATTR: u32 = 2147483648;
+pub const BMAP_IOCTL: u32 = 1;
+pub const FSLABEL_MAX: u32 = 256;
+pub const FS_SECRM_FL: u32 = 1;
+pub const FS_UNRM_FL: u32 = 2;
+pub const FS_COMPR_FL: u32 = 4;
+pub const FS_SYNC_FL: u32 = 8;
+pub const FS_IMMUTABLE_FL: u32 = 16;
+pub const FS_APPEND_FL: u32 = 32;
+pub const FS_NODUMP_FL: u32 = 64;
+pub const FS_NOATIME_FL: u32 = 128;
+pub const FS_DIRTY_FL: u32 = 256;
+pub const FS_COMPRBLK_FL: u32 = 512;
+pub const FS_NOCOMP_FL: u32 = 1024;
+pub const FS_ENCRYPT_FL: u32 = 2048;
+pub const FS_BTREE_FL: u32 = 4096;
+pub const FS_INDEX_FL: u32 = 4096;
+pub const FS_IMAGIC_FL: u32 = 8192;
+pub const FS_JOURNAL_DATA_FL: u32 = 16384;
+pub const FS_NOTAIL_FL: u32 = 32768;
+pub const FS_DIRSYNC_FL: u32 = 65536;
+pub const FS_TOPDIR_FL: u32 = 131072;
+pub const FS_HUGE_FILE_FL: u32 = 262144;
+pub const FS_EXTENT_FL: u32 = 524288;
+pub const FS_VERITY_FL: u32 = 1048576;
+pub const FS_EA_INODE_FL: u32 = 2097152;
+pub const FS_EOFBLOCKS_FL: u32 = 4194304;
+pub const FS_NOCOW_FL: u32 = 8388608;
+pub const FS_DAX_FL: u32 = 33554432;
+pub const FS_INLINE_DATA_FL: u32 = 268435456;
+pub const FS_PROJINHERIT_FL: u32 = 536870912;
+pub const FS_CASEFOLD_FL: u32 = 1073741824;
+pub const FS_RESERVED_FL: u32 = 2147483648;
+pub const FS_FL_USER_VISIBLE: u32 = 253951;
+pub const FS_FL_USER_MODIFIABLE: u32 = 229631;
+pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
+pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
+pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
+pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
+pub const FUTEX_WAIT: u32 = 0;
+pub const FUTEX_WAKE: u32 = 1;
+pub const FUTEX_FD: u32 = 2;
+pub const FUTEX_REQUEUE: u32 = 3;
+pub const FUTEX_CMP_REQUEUE: u32 = 4;
+pub const FUTEX_WAKE_OP: u32 = 5;
+pub const FUTEX_LOCK_PI: u32 = 6;
+pub const FUTEX_UNLOCK_PI: u32 = 7;
+pub const FUTEX_TRYLOCK_PI: u32 = 8;
+pub const FUTEX_WAIT_BITSET: u32 = 9;
+pub const FUTEX_WAKE_BITSET: u32 = 10;
+pub const FUTEX_WAIT_REQUEUE_PI: u32 = 11;
+pub const FUTEX_CMP_REQUEUE_PI: u32 = 12;
+pub const FUTEX_LOCK_PI2: u32 = 13;
+pub const FUTEX_PRIVATE_FLAG: u32 = 128;
+pub const FUTEX_CLOCK_REALTIME: u32 = 256;
+pub const FUTEX_CMD_MASK: i32 = -385;
+pub const FUTEX_WAIT_PRIVATE: u32 = 128;
+pub const FUTEX_WAKE_PRIVATE: u32 = 129;
+pub const FUTEX_REQUEUE_PRIVATE: u32 = 131;
+pub const FUTEX_CMP_REQUEUE_PRIVATE: u32 = 132;
+pub const FUTEX_WAKE_OP_PRIVATE: u32 = 133;
+pub const FUTEX_LOCK_PI_PRIVATE: u32 = 134;
+pub const FUTEX_LOCK_PI2_PRIVATE: u32 = 141;
+pub const FUTEX_UNLOCK_PI_PRIVATE: u32 = 135;
+pub const FUTEX_TRYLOCK_PI_PRIVATE: u32 = 136;
+pub const FUTEX_WAIT_BITSET_PRIVATE: u32 = 137;
+pub const FUTEX_WAKE_BITSET_PRIVATE: u32 = 138;
+pub const FUTEX_WAIT_REQUEUE_PI_PRIVATE: u32 = 139;
+pub const FUTEX_CMP_REQUEUE_PI_PRIVATE: u32 = 140;
+pub const FUTEX_32: u32 = 2;
+pub const FUTEX_WAITV_MAX: u32 = 128;
+pub const FUTEX_WAITERS: u32 = 2147483648;
+pub const FUTEX_OWNER_DIED: u32 = 1073741824;
+pub const FUTEX_TID_MASK: u32 = 1073741823;
+pub const ROBUST_LIST_LIMIT: u32 = 2048;
+pub const FUTEX_BITSET_MATCH_ANY: u32 = 4294967295;
+pub const FUTEX_OP_SET: u32 = 0;
+pub const FUTEX_OP_ADD: u32 = 1;
+pub const FUTEX_OP_OR: u32 = 2;
+pub const FUTEX_OP_ANDN: u32 = 3;
+pub const FUTEX_OP_XOR: u32 = 4;
+pub const FUTEX_OP_OPARG_SHIFT: u32 = 8;
+pub const FUTEX_OP_CMP_EQ: u32 = 0;
+pub const FUTEX_OP_CMP_NE: u32 = 1;
+pub const FUTEX_OP_CMP_LT: u32 = 2;
+pub const FUTEX_OP_CMP_LE: u32 = 3;
+pub const FUTEX_OP_CMP_GT: u32 = 4;
+pub const FUTEX_OP_CMP_GE: u32 = 5;
+pub const __UAPI_DEF_IF_IFCONF: u32 = 1;
+pub const __UAPI_DEF_IF_IFMAP: u32 = 1;
+pub const __UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
+pub const __UAPI_DEF_IF_IFREQ: u32 = 1;
+pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
+pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
+pub const __UAPI_DEF_IN_ADDR: u32 = 1;
+pub const __UAPI_DEF_IN_IPPROTO: u32 = 1;
+pub const __UAPI_DEF_IN_PKTINFO: u32 = 1;
+pub const __UAPI_DEF_IP_MREQ: u32 = 1;
+pub const __UAPI_DEF_SOCKADDR_IN: u32 = 1;
+pub const __UAPI_DEF_IN_CLASS: u32 = 1;
+pub const __UAPI_DEF_IN6_ADDR: u32 = 1;
+pub const __UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
+pub const __UAPI_DEF_SOCKADDR_IN6: u32 = 1;
+pub const __UAPI_DEF_IPV6_MREQ: u32 = 1;
+pub const __UAPI_DEF_IPPROTO_V6: u32 = 1;
+pub const __UAPI_DEF_IPV6_OPTIONS: u32 = 1;
+pub const __UAPI_DEF_IN6_PKTINFO: u32 = 1;
+pub const __UAPI_DEF_IP6_MTUINFO: u32 = 1;
+pub const __UAPI_DEF_SOCKADDR_IPX: u32 = 1;
+pub const __UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
+pub const __UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
+pub const __UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
+pub const __UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
+pub const __UAPI_DEF_XATTR: u32 = 1;
+pub const _K_SS_MAXSIZE: u32 = 128;
+pub const SOCK_SNDBUF_LOCK: u32 = 1;
+pub const SOCK_RCVBUF_LOCK: u32 = 2;
+pub const SOCK_BUF_LOCK_MASK: u32 = 3;
+pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
+pub const SOCK_TXREHASH_DISABLED: u32 = 0;
+pub const SOCK_TXREHASH_ENABLED: u32 = 1;
+pub const IP_TOS: u32 = 1;
+pub const IP_TTL: u32 = 2;
+pub const IP_HDRINCL: u32 = 3;
+pub const IP_OPTIONS: u32 = 4;
+pub const IP_ROUTER_ALERT: u32 = 5;
+pub const IP_RECVOPTS: u32 = 6;
+pub const IP_RETOPTS: u32 = 7;
+pub const IP_PKTINFO: u32 = 8;
+pub const IP_PKTOPTIONS: u32 = 9;
+pub const IP_MTU_DISCOVER: u32 = 10;
+pub const IP_RECVERR: u32 = 11;
+pub const IP_RECVTTL: u32 = 12;
+pub const IP_RECVTOS: u32 = 13;
+pub const IP_MTU: u32 = 14;
+pub const IP_FREEBIND: u32 = 15;
+pub const IP_IPSEC_POLICY: u32 = 16;
+pub const IP_XFRM_POLICY: u32 = 17;
+pub const IP_PASSSEC: u32 = 18;
+pub const IP_TRANSPARENT: u32 = 19;
+pub const IP_RECVRETOPTS: u32 = 7;
+pub const IP_ORIGDSTADDR: u32 = 20;
+pub const IP_RECVORIGDSTADDR: u32 = 20;
+pub const IP_MINTTL: u32 = 21;
+pub const IP_NODEFRAG: u32 = 22;
+pub const IP_CHECKSUM: u32 = 23;
+pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
+pub const IP_RECVFRAGSIZE: u32 = 25;
+pub const IP_RECVERR_RFC4884: u32 = 26;
+pub const IP_PMTUDISC_DONT: u32 = 0;
+pub const IP_PMTUDISC_WANT: u32 = 1;
+pub const IP_PMTUDISC_DO: u32 = 2;
+pub const IP_PMTUDISC_PROBE: u32 = 3;
+pub const IP_PMTUDISC_INTERFACE: u32 = 4;
+pub const IP_PMTUDISC_OMIT: u32 = 5;
+pub const IP_MULTICAST_IF: u32 = 32;
+pub const IP_MULTICAST_TTL: u32 = 33;
+pub const IP_MULTICAST_LOOP: u32 = 34;
+pub const IP_ADD_MEMBERSHIP: u32 = 35;
+pub const IP_DROP_MEMBERSHIP: u32 = 36;
+pub const IP_UNBLOCK_SOURCE: u32 = 37;
+pub const IP_BLOCK_SOURCE: u32 = 38;
+pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
+pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
+pub const IP_MSFILTER: u32 = 41;
+pub const MCAST_JOIN_GROUP: u32 = 42;
+pub const MCAST_BLOCK_SOURCE: u32 = 43;
+pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
+pub const MCAST_LEAVE_GROUP: u32 = 45;
+pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
+pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
+pub const MCAST_MSFILTER: u32 = 48;
+pub const IP_MULTICAST_ALL: u32 = 49;
+pub const IP_UNICAST_IF: u32 = 50;
+pub const MCAST_EXCLUDE: u32 = 0;
+pub const MCAST_INCLUDE: u32 = 1;
+pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
+pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
+pub const __SOCK_SIZE__: u32 = 16;
+pub const IN_CLASSA_NET: u32 = 4278190080;
+pub const IN_CLASSA_NSHIFT: u32 = 24;
+pub const IN_CLASSA_HOST: u32 = 16777215;
+pub const IN_CLASSA_MAX: u32 = 128;
+pub const IN_CLASSB_NET: u32 = 4294901760;
+pub const IN_CLASSB_NSHIFT: u32 = 16;
+pub const IN_CLASSB_HOST: u32 = 65535;
+pub const IN_CLASSB_MAX: u32 = 65536;
+pub const IN_CLASSC_NET: u32 = 4294967040;
+pub const IN_CLASSC_NSHIFT: u32 = 8;
+pub const IN_CLASSC_HOST: u32 = 255;
+pub const IN_MULTICAST_NET: u32 = 3758096384;
+pub const IN_CLASSE_NET: u32 = 4294967295;
+pub const IN_CLASSE_NSHIFT: u32 = 0;
+pub const IN_LOOPBACKNET: u32 = 127;
+pub const INADDR_LOOPBACK: u32 = 2130706433;
+pub const INADDR_UNSPEC_GROUP: u32 = 3758096384;
+pub const INADDR_ALLHOSTS_GROUP: u32 = 3758096385;
+pub const INADDR_ALLRTRS_GROUP: u32 = 3758096386;
+pub const INADDR_ALLSNOOPERS_GROUP: u32 = 3758096490;
+pub const INADDR_MAX_LOCAL_GROUP: u32 = 3758096639;
+pub const __LITTLE_ENDIAN: u32 = 1234;
+pub const IN_ACCESS: u32 = 1;
+pub const IN_MODIFY: u32 = 2;
+pub const IN_ATTRIB: u32 = 4;
+pub const IN_CLOSE_WRITE: u32 = 8;
+pub const IN_CLOSE_NOWRITE: u32 = 16;
+pub const IN_OPEN: u32 = 32;
+pub const IN_MOVED_FROM: u32 = 64;
+pub const IN_MOVED_TO: u32 = 128;
+pub const IN_CREATE: u32 = 256;
+pub const IN_DELETE: u32 = 512;
+pub const IN_DELETE_SELF: u32 = 1024;
+pub const IN_MOVE_SELF: u32 = 2048;
+pub const IN_UNMOUNT: u32 = 8192;
+pub const IN_Q_OVERFLOW: u32 = 16384;
+pub const IN_IGNORED: u32 = 32768;
+pub const IN_CLOSE: u32 = 24;
+pub const IN_MOVE: u32 = 192;
+pub const IN_ONLYDIR: u32 = 16777216;
+pub const IN_DONT_FOLLOW: u32 = 33554432;
+pub const IN_EXCL_UNLINK: u32 = 67108864;
+pub const IN_MASK_CREATE: u32 = 268435456;
+pub const IN_MASK_ADD: u32 = 536870912;
+pub const IN_ISDIR: u32 = 1073741824;
+pub const IN_ONESHOT: u32 = 2147483648;
+pub const IN_ALL_EVENTS: u32 = 4095;
+pub const IN_CLOEXEC: u32 = 524288;
+pub const IN_NONBLOCK: u32 = 2048;
+pub const IPTOS_TOS_MASK: u32 = 30;
+pub const IPTOS_LOWDELAY: u32 = 16;
+pub const IPTOS_THROUGHPUT: u32 = 8;
+pub const IPTOS_RELIABILITY: u32 = 4;
+pub const IPTOS_MINCOST: u32 = 2;
+pub const IPTOS_PREC_MASK: u32 = 224;
+pub const IPTOS_PREC_NETCONTROL: u32 = 224;
+pub const IPTOS_PREC_INTERNETCONTROL: u32 = 192;
+pub const IPTOS_PREC_CRITIC_ECP: u32 = 160;
+pub const IPTOS_PREC_FLASHOVERRIDE: u32 = 128;
+pub const IPTOS_PREC_FLASH: u32 = 96;
+pub const IPTOS_PREC_IMMEDIATE: u32 = 64;
+pub const IPTOS_PREC_PRIORITY: u32 = 32;
+pub const IPTOS_PREC_ROUTINE: u32 = 0;
+pub const IPOPT_COPY: u32 = 128;
+pub const IPOPT_CLASS_MASK: u32 = 96;
+pub const IPOPT_NUMBER_MASK: u32 = 31;
+pub const IPOPT_CONTROL: u32 = 0;
+pub const IPOPT_RESERVED1: u32 = 32;
+pub const IPOPT_MEASUREMENT: u32 = 64;
+pub const IPOPT_RESERVED2: u32 = 96;
+pub const IPOPT_END: u32 = 0;
+pub const IPOPT_NOOP: u32 = 1;
+pub const IPOPT_SEC: u32 = 130;
+pub const IPOPT_LSRR: u32 = 131;
+pub const IPOPT_TIMESTAMP: u32 = 68;
+pub const IPOPT_CIPSO: u32 = 134;
+pub const IPOPT_RR: u32 = 7;
+pub const IPOPT_SID: u32 = 136;
+pub const IPOPT_SSRR: u32 = 137;
+pub const IPOPT_RA: u32 = 148;
+pub const IPVERSION: u32 = 4;
+pub const MAXTTL: u32 = 255;
+pub const IPDEFTTL: u32 = 64;
+pub const IPOPT_OPTVAL: u32 = 0;
+pub const IPOPT_OLEN: u32 = 1;
+pub const IPOPT_OFFSET: u32 = 2;
+pub const IPOPT_MINOFF: u32 = 4;
+pub const MAX_IPOPTLEN: u32 = 40;
+pub const IPOPT_NOP: u32 = 1;
+pub const IPOPT_EOL: u32 = 0;
+pub const IPOPT_TS: u32 = 68;
+pub const IPOPT_TS_TSONLY: u32 = 0;
+pub const IPOPT_TS_TSANDADDR: u32 = 1;
+pub const IPOPT_TS_PRESPEC: u32 = 3;
+pub const IPV4_BEET_PHMAXLEN: u32 = 8;
+pub const IPV6_FL_A_GET: u32 = 0;
+pub const IPV6_FL_A_PUT: u32 = 1;
+pub const IPV6_FL_A_RENEW: u32 = 2;
+pub const IPV6_FL_F_CREATE: u32 = 1;
+pub const IPV6_FL_F_EXCL: u32 = 2;
+pub const IPV6_FL_F_REFLECT: u32 = 4;
+pub const IPV6_FL_F_REMOTE: u32 = 8;
+pub const IPV6_FL_S_NONE: u32 = 0;
+pub const IPV6_FL_S_EXCL: u32 = 1;
+pub const IPV6_FL_S_PROCESS: u32 = 2;
+pub const IPV6_FL_S_USER: u32 = 3;
+pub const IPV6_FL_S_ANY: u32 = 255;
+pub const IPV6_FLOWINFO_FLOWLABEL: u32 = 1048575;
+pub const IPV6_FLOWINFO_PRIORITY: u32 = 267386880;
+pub const IPV6_PRIORITY_UNCHARACTERIZED: u32 = 0;
+pub const IPV6_PRIORITY_FILLER: u32 = 256;
+pub const IPV6_PRIORITY_UNATTENDED: u32 = 512;
+pub const IPV6_PRIORITY_RESERVED1: u32 = 768;
+pub const IPV6_PRIORITY_BULK: u32 = 1024;
+pub const IPV6_PRIORITY_RESERVED2: u32 = 1280;
+pub const IPV6_PRIORITY_INTERACTIVE: u32 = 1536;
+pub const IPV6_PRIORITY_CONTROL: u32 = 1792;
+pub const IPV6_PRIORITY_8: u32 = 2048;
+pub const IPV6_PRIORITY_9: u32 = 2304;
+pub const IPV6_PRIORITY_10: u32 = 2560;
+pub const IPV6_PRIORITY_11: u32 = 2816;
+pub const IPV6_PRIORITY_12: u32 = 3072;
+pub const IPV6_PRIORITY_13: u32 = 3328;
+pub const IPV6_PRIORITY_14: u32 = 3584;
+pub const IPV6_PRIORITY_15: u32 = 3840;
+pub const IPPROTO_HOPOPTS: u32 = 0;
+pub const IPPROTO_ROUTING: u32 = 43;
+pub const IPPROTO_FRAGMENT: u32 = 44;
+pub const IPPROTO_ICMPV6: u32 = 58;
+pub const IPPROTO_NONE: u32 = 59;
+pub const IPPROTO_DSTOPTS: u32 = 60;
+pub const IPPROTO_MH: u32 = 135;
+pub const IPV6_TLV_PAD1: u32 = 0;
+pub const IPV6_TLV_PADN: u32 = 1;
+pub const IPV6_TLV_ROUTERALERT: u32 = 5;
+pub const IPV6_TLV_CALIPSO: u32 = 7;
+pub const IPV6_TLV_IOAM: u32 = 49;
+pub const IPV6_TLV_JUMBO: u32 = 194;
+pub const IPV6_TLV_HAO: u32 = 201;
+pub const IPV6_ADDRFORM: u32 = 1;
+pub const IPV6_2292PKTINFO: u32 = 2;
+pub const IPV6_2292HOPOPTS: u32 = 3;
+pub const IPV6_2292DSTOPTS: u32 = 4;
+pub const IPV6_2292RTHDR: u32 = 5;
+pub const IPV6_2292PKTOPTIONS: u32 = 6;
+pub const IPV6_CHECKSUM: u32 = 7;
+pub const IPV6_2292HOPLIMIT: u32 = 8;
+pub const IPV6_NEXTHOP: u32 = 9;
+pub const IPV6_AUTHHDR: u32 = 10;
+pub const IPV6_FLOWINFO: u32 = 11;
+pub const IPV6_UNICAST_HOPS: u32 = 16;
+pub const IPV6_MULTICAST_IF: u32 = 17;
+pub const IPV6_MULTICAST_HOPS: u32 = 18;
+pub const IPV6_MULTICAST_LOOP: u32 = 19;
+pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
+pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
+pub const IPV6_ROUTER_ALERT: u32 = 22;
+pub const IPV6_MTU_DISCOVER: u32 = 23;
+pub const IPV6_MTU: u32 = 24;
+pub const IPV6_RECVERR: u32 = 25;
+pub const IPV6_V6ONLY: u32 = 26;
+pub const IPV6_JOIN_ANYCAST: u32 = 27;
+pub const IPV6_LEAVE_ANYCAST: u32 = 28;
+pub const IPV6_MULTICAST_ALL: u32 = 29;
+pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
+pub const IPV6_RECVERR_RFC4884: u32 = 31;
+pub const IPV6_PMTUDISC_DONT: u32 = 0;
+pub const IPV6_PMTUDISC_WANT: u32 = 1;
+pub const IPV6_PMTUDISC_DO: u32 = 2;
+pub const IPV6_PMTUDISC_PROBE: u32 = 3;
+pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
+pub const IPV6_PMTUDISC_OMIT: u32 = 5;
+pub const IPV6_FLOWLABEL_MGR: u32 = 32;
+pub const IPV6_FLOWINFO_SEND: u32 = 33;
+pub const IPV6_IPSEC_POLICY: u32 = 34;
+pub const IPV6_XFRM_POLICY: u32 = 35;
+pub const IPV6_HDRINCL: u32 = 36;
+pub const IPV6_RECVPKTINFO: u32 = 49;
+pub const IPV6_PKTINFO: u32 = 50;
+pub const IPV6_RECVHOPLIMIT: u32 = 51;
+pub const IPV6_HOPLIMIT: u32 = 52;
+pub const IPV6_RECVHOPOPTS: u32 = 53;
+pub const IPV6_HOPOPTS: u32 = 54;
+pub const IPV6_RTHDRDSTOPTS: u32 = 55;
+pub const IPV6_RECVRTHDR: u32 = 56;
+pub const IPV6_RTHDR: u32 = 57;
+pub const IPV6_RECVDSTOPTS: u32 = 58;
+pub const IPV6_DSTOPTS: u32 = 59;
+pub const IPV6_RECVPATHMTU: u32 = 60;
+pub const IPV6_PATHMTU: u32 = 61;
+pub const IPV6_DONTFRAG: u32 = 62;
+pub const IPV6_RECVTCLASS: u32 = 66;
+pub const IPV6_TCLASS: u32 = 67;
+pub const IPV6_AUTOFLOWLABEL: u32 = 70;
+pub const IPV6_ADDR_PREFERENCES: u32 = 72;
+pub const IPV6_PREFER_SRC_TMP: u32 = 1;
+pub const IPV6_PREFER_SRC_PUBLIC: u32 = 2;
+pub const IPV6_PREFER_SRC_PUBTMP_DEFAULT: u32 = 256;
+pub const IPV6_PREFER_SRC_COA: u32 = 4;
+pub const IPV6_PREFER_SRC_HOME: u32 = 1024;
+pub const IPV6_PREFER_SRC_CGA: u32 = 8;
+pub const IPV6_PREFER_SRC_NONCGA: u32 = 2048;
+pub const IPV6_MINHOPCOUNT: u32 = 73;
+pub const IPV6_ORIGDSTADDR: u32 = 74;
+pub const IPV6_RECVORIGDSTADDR: u32 = 74;
+pub const IPV6_TRANSPARENT: u32 = 75;
+pub const IPV6_UNICAST_IF: u32 = 76;
+pub const IPV6_RECVFRAGSIZE: u32 = 77;
+pub const IPV6_FREEBIND: u32 = 78;
+pub const IPV6_MIN_MTU: u32 = 1280;
+pub const IPV6_SRCRT_STRICT: u32 = 1;
+pub const IPV6_SRCRT_TYPE_0: u32 = 0;
+pub const IPV6_SRCRT_TYPE_2: u32 = 2;
+pub const IPV6_SRCRT_TYPE_3: u32 = 3;
+pub const IPV6_SRCRT_TYPE_4: u32 = 4;
+pub const IPV6_OPT_ROUTERALERT_MLD: u32 = 0;
+pub const ADFS_SUPER_MAGIC: u32 = 44533;
+pub const AFFS_SUPER_MAGIC: u32 = 44543;
+pub const AFS_SUPER_MAGIC: u32 = 1397113167;
+pub const AUTOFS_SUPER_MAGIC: u32 = 391;
+pub const CEPH_SUPER_MAGIC: u32 = 12805120;
+pub const CODA_SUPER_MAGIC: u32 = 1937076805;
+pub const CRAMFS_MAGIC: u32 = 684539205;
+pub const CRAMFS_MAGIC_WEND: u32 = 1161678120;
+pub const DEBUGFS_MAGIC: u32 = 1684170528;
+pub const SECURITYFS_MAGIC: u32 = 1935894131;
+pub const SELINUX_MAGIC: u32 = 4185718668;
+pub const SMACK_MAGIC: u32 = 1128357203;
+pub const RAMFS_MAGIC: u32 = 2240043254;
+pub const TMPFS_MAGIC: u32 = 16914836;
+pub const HUGETLBFS_MAGIC: u32 = 2508478710;
+pub const SQUASHFS_MAGIC: u32 = 1936814952;
+pub const ECRYPTFS_SUPER_MAGIC: u32 = 61791;
+pub const EFS_SUPER_MAGIC: u32 = 4278867;
+pub const EROFS_SUPER_MAGIC_V1: u32 = 3774210530;
+pub const EXT2_SUPER_MAGIC: u32 = 61267;
+pub const EXT3_SUPER_MAGIC: u32 = 61267;
+pub const XENFS_SUPER_MAGIC: u32 = 2881100148;
+pub const EXT4_SUPER_MAGIC: u32 = 61267;
+pub const BTRFS_SUPER_MAGIC: u32 = 2435016766;
+pub const NILFS_SUPER_MAGIC: u32 = 13364;
+pub const F2FS_SUPER_MAGIC: u32 = 4076150800;
+pub const HPFS_SUPER_MAGIC: u32 = 4187351113;
+pub const ISOFS_SUPER_MAGIC: u32 = 38496;
+pub const JFFS2_SUPER_MAGIC: u32 = 29366;
+pub const XFS_SUPER_MAGIC: u32 = 1481003842;
+pub const PSTOREFS_MAGIC: u32 = 1634035564;
+pub const EFIVARFS_MAGIC: u32 = 3730735588;
+pub const HOSTFS_SUPER_MAGIC: u32 = 12648430;
+pub const OVERLAYFS_SUPER_MAGIC: u32 = 2035054128;
+pub const FUSE_SUPER_MAGIC: u32 = 1702057286;
+pub const MINIX_SUPER_MAGIC: u32 = 4991;
+pub const MINIX_SUPER_MAGIC2: u32 = 5007;
+pub const MINIX2_SUPER_MAGIC: u32 = 9320;
+pub const MINIX2_SUPER_MAGIC2: u32 = 9336;
+pub const MINIX3_SUPER_MAGIC: u32 = 19802;
+pub const MSDOS_SUPER_MAGIC: u32 = 19780;
+pub const EXFAT_SUPER_MAGIC: u32 = 538032816;
+pub const NCP_SUPER_MAGIC: u32 = 22092;
+pub const NFS_SUPER_MAGIC: u32 = 26985;
+pub const OCFS2_SUPER_MAGIC: u32 = 1952539503;
+pub const OPENPROM_SUPER_MAGIC: u32 = 40865;
+pub const QNX4_SUPER_MAGIC: u32 = 47;
+pub const QNX6_SUPER_MAGIC: u32 = 1746473250;
+pub const AFS_FS_MAGIC: u32 = 1799439955;
+pub const REISERFS_SUPER_MAGIC: u32 = 1382369651;
+pub const REISERFS_SUPER_MAGIC_STRING: &[u8; 9usize] = b"ReIsErFs\0";
+pub const REISER2FS_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr2Fs\0";
+pub const REISER2FS_JR_SUPER_MAGIC_STRING: &[u8; 10usize] = b"ReIsEr3Fs\0";
+pub const SMB_SUPER_MAGIC: u32 = 20859;
+pub const CIFS_SUPER_MAGIC: u32 = 4283649346;
+pub const SMB2_SUPER_MAGIC: u32 = 4266872130;
+pub const CGROUP_SUPER_MAGIC: u32 = 2613483;
+pub const CGROUP2_SUPER_MAGIC: u32 = 1667723888;
+pub const RDTGROUP_SUPER_MAGIC: u32 = 124082209;
+pub const STACK_END_MAGIC: u32 = 1470918301;
+pub const TRACEFS_MAGIC: u32 = 1953653091;
+pub const V9FS_MAGIC: u32 = 16914839;
+pub const BDEVFS_MAGIC: u32 = 1650746742;
+pub const DAXFS_MAGIC: u32 = 1684300152;
+pub const BINFMTFS_MAGIC: u32 = 1112100429;
+pub const DEVPTS_SUPER_MAGIC: u32 = 7377;
+pub const BINDERFS_SUPER_MAGIC: u32 = 1819242352;
+pub const FUTEXFS_SUPER_MAGIC: u32 = 195894762;
+pub const PIPEFS_MAGIC: u32 = 1346981957;
+pub const PROC_SUPER_MAGIC: u32 = 40864;
+pub const SOCKFS_MAGIC: u32 = 1397703499;
+pub const SYSFS_MAGIC: u32 = 1650812274;
+pub const USBDEVICE_SUPER_MAGIC: u32 = 40866;
+pub const MTD_INODE_FS_MAGIC: u32 = 288389204;
+pub const ANON_INODE_FS_MAGIC: u32 = 151263540;
+pub const BTRFS_TEST_MAGIC: u32 = 1936880249;
+pub const NSFS_MAGIC: u32 = 1853056627;
+pub const BPF_FS_MAGIC: u32 = 3405662737;
+pub const AAFS_MAGIC: u32 = 1513908720;
+pub const ZONEFS_MAGIC: u32 = 1515144787;
+pub const UDF_SUPER_MAGIC: u32 = 352400198;
+pub const DMA_BUF_MAGIC: u32 = 1145913666;
+pub const DEVMEM_MAGIC: u32 = 1162691661;
+pub const SECRETMEM_MAGIC: u32 = 1397048141;
+pub const PROT_READ: u32 = 1;
+pub const PROT_WRITE: u32 = 2;
+pub const PROT_EXEC: u32 = 4;
+pub const PROT_SEM: u32 = 8;
+pub const PROT_NONE: u32 = 0;
+pub const PROT_GROWSDOWN: u32 = 16777216;
+pub const PROT_GROWSUP: u32 = 33554432;
+pub const MAP_TYPE: u32 = 15;
+pub const MAP_FIXED: u32 = 16;
+pub const MAP_ANONYMOUS: u32 = 32;
+pub const MAP_POPULATE: u32 = 32768;
+pub const MAP_NONBLOCK: u32 = 65536;
+pub const MAP_STACK: u32 = 131072;
+pub const MAP_HUGETLB: u32 = 262144;
+pub const MAP_SYNC: u32 = 524288;
+pub const MAP_FIXED_NOREPLACE: u32 = 1048576;
+pub const MAP_UNINITIALIZED: u32 = 67108864;
+pub const MLOCK_ONFAULT: u32 = 1;
+pub const MS_ASYNC: u32 = 1;
+pub const MS_INVALIDATE: u32 = 2;
+pub const MS_SYNC: u32 = 4;
+pub const MADV_NORMAL: u32 = 0;
+pub const MADV_RANDOM: u32 = 1;
+pub const MADV_SEQUENTIAL: u32 = 2;
+pub const MADV_WILLNEED: u32 = 3;
+pub const MADV_DONTNEED: u32 = 4;
+pub const MADV_FREE: u32 = 8;
+pub const MADV_REMOVE: u32 = 9;
+pub const MADV_DONTFORK: u32 = 10;
+pub const MADV_DOFORK: u32 = 11;
+pub const MADV_HWPOISON: u32 = 100;
+pub const MADV_SOFT_OFFLINE: u32 = 101;
+pub const MADV_MERGEABLE: u32 = 12;
+pub const MADV_UNMERGEABLE: u32 = 13;
+pub const MADV_HUGEPAGE: u32 = 14;
+pub const MADV_NOHUGEPAGE: u32 = 15;
+pub const MADV_DONTDUMP: u32 = 16;
+pub const MADV_DODUMP: u32 = 17;
+pub const MADV_WIPEONFORK: u32 = 18;
+pub const MADV_KEEPONFORK: u32 = 19;
+pub const MADV_COLD: u32 = 20;
+pub const MADV_PAGEOUT: u32 = 21;
+pub const MADV_POPULATE_READ: u32 = 22;
+pub const MADV_POPULATE_WRITE: u32 = 23;
+pub const MADV_DONTNEED_LOCKED: u32 = 24;
+pub const MADV_COLLAPSE: u32 = 25;
+pub const MAP_FILE: u32 = 0;
+pub const PKEY_DISABLE_ACCESS: u32 = 1;
+pub const PKEY_DISABLE_WRITE: u32 = 2;
+pub const PKEY_ACCESS_MASK: u32 = 3;
+pub const MAP_GROWSDOWN: u32 = 256;
+pub const MAP_DENYWRITE: u32 = 2048;
+pub const MAP_EXECUTABLE: u32 = 4096;
+pub const MAP_LOCKED: u32 = 8192;
+pub const MAP_NORESERVE: u32 = 16384;
+pub const MCL_CURRENT: u32 = 1;
+pub const MCL_FUTURE: u32 = 2;
+pub const MCL_ONFAULT: u32 = 4;
+pub const HUGETLB_FLAG_ENCODE_SHIFT: u32 = 26;
+pub const HUGETLB_FLAG_ENCODE_MASK: u32 = 63;
+pub const HUGETLB_FLAG_ENCODE_16KB: u32 = 939524096;
+pub const HUGETLB_FLAG_ENCODE_64KB: u32 = 1073741824;
+pub const HUGETLB_FLAG_ENCODE_512KB: u32 = 1275068416;
+pub const HUGETLB_FLAG_ENCODE_1MB: u32 = 1342177280;
+pub const HUGETLB_FLAG_ENCODE_2MB: u32 = 1409286144;
+pub const HUGETLB_FLAG_ENCODE_8MB: u32 = 1543503872;
+pub const HUGETLB_FLAG_ENCODE_16MB: u32 = 1610612736;
+pub const HUGETLB_FLAG_ENCODE_32MB: u32 = 1677721600;
+pub const HUGETLB_FLAG_ENCODE_256MB: u32 = 1879048192;
+pub const HUGETLB_FLAG_ENCODE_512MB: u32 = 1946157056;
+pub const HUGETLB_FLAG_ENCODE_1GB: u32 = 2013265920;
+pub const HUGETLB_FLAG_ENCODE_2GB: u32 = 2080374784;
+pub const HUGETLB_FLAG_ENCODE_16GB: u32 = 2281701376;
+pub const MREMAP_MAYMOVE: u32 = 1;
+pub const MREMAP_FIXED: u32 = 2;
+pub const MREMAP_DONTUNMAP: u32 = 4;
+pub const OVERCOMMIT_GUESS: u32 = 0;
+pub const OVERCOMMIT_ALWAYS: u32 = 1;
+pub const OVERCOMMIT_NEVER: u32 = 2;
+pub const MAP_SHARED: u32 = 1;
+pub const MAP_PRIVATE: u32 = 2;
+pub const MAP_SHARED_VALIDATE: u32 = 3;
+pub const MAP_HUGE_SHIFT: u32 = 26;
+pub const MAP_HUGE_MASK: u32 = 63;
+pub const MAP_HUGE_16KB: u32 = 939524096;
+pub const MAP_HUGE_64KB: u32 = 1073741824;
+pub const MAP_HUGE_512KB: u32 = 1275068416;
+pub const MAP_HUGE_1MB: u32 = 1342177280;
+pub const MAP_HUGE_2MB: u32 = 1409286144;
+pub const MAP_HUGE_8MB: u32 = 1543503872;
+pub const MAP_HUGE_16MB: u32 = 1610612736;
+pub const MAP_HUGE_32MB: u32 = 1677721600;
+pub const MAP_HUGE_256MB: u32 = 1879048192;
+pub const MAP_HUGE_512MB: u32 = 1946157056;
+pub const MAP_HUGE_1GB: u32 = 2013265920;
+pub const MAP_HUGE_2GB: u32 = 2080374784;
+pub const MAP_HUGE_16GB: u32 = 2281701376;
+pub const SIOCGSTAMP_OLD: u32 = 35078;
+pub const SIOCGSTAMPNS_OLD: u32 = 35079;
+pub const SOL_SOCKET: u32 = 1;
+pub const SO_DEBUG: u32 = 1;
+pub const SO_REUSEADDR: u32 = 2;
+pub const SO_TYPE: u32 = 3;
+pub const SO_ERROR: u32 = 4;
+pub const SO_DONTROUTE: u32 = 5;
+pub const SO_BROADCAST: u32 = 6;
+pub const SO_SNDBUF: u32 = 7;
+pub const SO_RCVBUF: u32 = 8;
+pub const SO_SNDBUFFORCE: u32 = 32;
+pub const SO_RCVBUFFORCE: u32 = 33;
+pub const SO_KEEPALIVE: u32 = 9;
+pub const SO_OOBINLINE: u32 = 10;
+pub const SO_NO_CHECK: u32 = 11;
+pub const SO_PRIORITY: u32 = 12;
+pub const SO_LINGER: u32 = 13;
+pub const SO_BSDCOMPAT: u32 = 14;
+pub const SO_REUSEPORT: u32 = 15;
+pub const SO_PASSCRED: u32 = 16;
+pub const SO_PEERCRED: u32 = 17;
+pub const SO_RCVLOWAT: u32 = 18;
+pub const SO_SNDLOWAT: u32 = 19;
+pub const SO_RCVTIMEO_OLD: u32 = 20;
+pub const SO_SNDTIMEO_OLD: u32 = 21;
+pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
+pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
+pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
+pub const SO_BINDTODEVICE: u32 = 25;
+pub const SO_ATTACH_FILTER: u32 = 26;
+pub const SO_DETACH_FILTER: u32 = 27;
+pub const SO_GET_FILTER: u32 = 26;
+pub const SO_PEERNAME: u32 = 28;
+pub const SO_ACCEPTCONN: u32 = 30;
+pub const SO_PEERSEC: u32 = 31;
+pub const SO_PASSSEC: u32 = 34;
+pub const SO_MARK: u32 = 36;
+pub const SO_PROTOCOL: u32 = 38;
+pub const SO_DOMAIN: u32 = 39;
+pub const SO_RXQ_OVFL: u32 = 40;
+pub const SO_WIFI_STATUS: u32 = 41;
+pub const SCM_WIFI_STATUS: u32 = 41;
+pub const SO_PEEK_OFF: u32 = 42;
+pub const SO_NOFCS: u32 = 43;
+pub const SO_LOCK_FILTER: u32 = 44;
+pub const SO_SELECT_ERR_QUEUE: u32 = 45;
+pub const SO_BUSY_POLL: u32 = 46;
+pub const SO_MAX_PACING_RATE: u32 = 47;
+pub const SO_BPF_EXTENSIONS: u32 = 48;
+pub const SO_INCOMING_CPU: u32 = 49;
+pub const SO_ATTACH_BPF: u32 = 50;
+pub const SO_DETACH_BPF: u32 = 27;
+pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
+pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
+pub const SO_CNX_ADVICE: u32 = 53;
+pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
+pub const SO_MEMINFO: u32 = 55;
+pub const SO_INCOMING_NAPI_ID: u32 = 56;
+pub const SO_COOKIE: u32 = 57;
+pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
+pub const SO_PEERGROUPS: u32 = 59;
+pub const SO_ZEROCOPY: u32 = 60;
+pub const SO_TXTIME: u32 = 61;
+pub const SCM_TXTIME: u32 = 61;
+pub const SO_BINDTOIFINDEX: u32 = 62;
+pub const SO_TIMESTAMP_OLD: u32 = 29;
+pub const SO_TIMESTAMPNS_OLD: u32 = 35;
+pub const SO_TIMESTAMPING_OLD: u32 = 37;
+pub const SO_TIMESTAMP_NEW: u32 = 63;
+pub const SO_TIMESTAMPNS_NEW: u32 = 64;
+pub const SO_TIMESTAMPING_NEW: u32 = 65;
+pub const SO_RCVTIMEO_NEW: u32 = 66;
+pub const SO_SNDTIMEO_NEW: u32 = 67;
+pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
+pub const SO_PREFER_BUSY_POLL: u32 = 69;
+pub const SO_BUSY_POLL_BUDGET: u32 = 70;
+pub const SO_NETNS_COOKIE: u32 = 71;
+pub const SO_BUF_LOCK: u32 = 72;
+pub const SO_RESERVE_MEM: u32 = 73;
+pub const SO_TXREHASH: u32 = 74;
+pub const SO_RCVMARK: u32 = 75;
+pub const SO_TIMESTAMP: u32 = 29;
+pub const SO_TIMESTAMPNS: u32 = 35;
+pub const SO_TIMESTAMPING: u32 = 37;
+pub const SO_RCVTIMEO: u32 = 20;
+pub const SO_SNDTIMEO: u32 = 21;
+pub const SCM_TIMESTAMP: u32 = 29;
+pub const SCM_TIMESTAMPNS: u32 = 35;
+pub const SCM_TIMESTAMPING: u32 = 37;
+pub const SYS_SOCKET: u32 = 1;
+pub const SYS_BIND: u32 = 2;
+pub const SYS_CONNECT: u32 = 3;
+pub const SYS_LISTEN: u32 = 4;
+pub const SYS_ACCEPT: u32 = 5;
+pub const SYS_GETSOCKNAME: u32 = 6;
+pub const SYS_GETPEERNAME: u32 = 7;
+pub const SYS_SOCKETPAIR: u32 = 8;
+pub const SYS_SEND: u32 = 9;
+pub const SYS_RECV: u32 = 10;
+pub const SYS_SENDTO: u32 = 11;
+pub const SYS_RECVFROM: u32 = 12;
+pub const SYS_SHUTDOWN: u32 = 13;
+pub const SYS_SETSOCKOPT: u32 = 14;
+pub const SYS_GETSOCKOPT: u32 = 15;
+pub const SYS_SENDMSG: u32 = 16;
+pub const SYS_RECVMSG: u32 = 17;
+pub const SYS_ACCEPT4: u32 = 18;
+pub const SYS_RECVMMSG: u32 = 19;
+pub const SYS_SENDMMSG: u32 = 20;
+pub const __SO_ACCEPTCON: u32 = 65536;
+pub const POLLIN: u32 = 1;
+pub const POLLPRI: u32 = 2;
+pub const POLLOUT: u32 = 4;
+pub const POLLERR: u32 = 8;
+pub const POLLHUP: u32 = 16;
+pub const POLLNVAL: u32 = 32;
+pub const POLLRDNORM: u32 = 64;
+pub const POLLRDBAND: u32 = 128;
+pub const POLLWRNORM: u32 = 256;
+pub const POLLWRBAND: u32 = 512;
+pub const POLLMSG: u32 = 1024;
+pub const POLLREMOVE: u32 = 4096;
+pub const POLLRDHUP: u32 = 8192;
+pub const PR_SET_PDEATHSIG: u32 = 1;
+pub const PR_GET_PDEATHSIG: u32 = 2;
+pub const PR_GET_DUMPABLE: u32 = 3;
+pub const PR_SET_DUMPABLE: u32 = 4;
+pub const PR_GET_UNALIGN: u32 = 5;
+pub const PR_SET_UNALIGN: u32 = 6;
+pub const PR_UNALIGN_NOPRINT: u32 = 1;
+pub const PR_UNALIGN_SIGBUS: u32 = 2;
+pub const PR_GET_KEEPCAPS: u32 = 7;
+pub const PR_SET_KEEPCAPS: u32 = 8;
+pub const PR_GET_FPEMU: u32 = 9;
+pub const PR_SET_FPEMU: u32 = 10;
+pub const PR_FPEMU_NOPRINT: u32 = 1;
+pub const PR_FPEMU_SIGFPE: u32 = 2;
+pub const PR_GET_FPEXC: u32 = 11;
+pub const PR_SET_FPEXC: u32 = 12;
+pub const PR_FP_EXC_SW_ENABLE: u32 = 128;
+pub const PR_FP_EXC_DIV: u32 = 65536;
+pub const PR_FP_EXC_OVF: u32 = 131072;
+pub const PR_FP_EXC_UND: u32 = 262144;
+pub const PR_FP_EXC_RES: u32 = 524288;
+pub const PR_FP_EXC_INV: u32 = 1048576;
+pub const PR_FP_EXC_DISABLED: u32 = 0;
+pub const PR_FP_EXC_NONRECOV: u32 = 1;
+pub const PR_FP_EXC_ASYNC: u32 = 2;
+pub const PR_FP_EXC_PRECISE: u32 = 3;
+pub const PR_GET_TIMING: u32 = 13;
+pub const PR_SET_TIMING: u32 = 14;
+pub const PR_TIMING_STATISTICAL: u32 = 0;
+pub const PR_TIMING_TIMESTAMP: u32 = 1;
+pub const PR_SET_NAME: u32 = 15;
+pub const PR_GET_NAME: u32 = 16;
+pub const PR_GET_ENDIAN: u32 = 19;
+pub const PR_SET_ENDIAN: u32 = 20;
+pub const PR_ENDIAN_BIG: u32 = 0;
+pub const PR_ENDIAN_LITTLE: u32 = 1;
+pub const PR_ENDIAN_PPC_LITTLE: u32 = 2;
+pub const PR_GET_SECCOMP: u32 = 21;
+pub const PR_SET_SECCOMP: u32 = 22;
+pub const PR_CAPBSET_READ: u32 = 23;
+pub const PR_CAPBSET_DROP: u32 = 24;
+pub const PR_GET_TSC: u32 = 25;
+pub const PR_SET_TSC: u32 = 26;
+pub const PR_TSC_ENABLE: u32 = 1;
+pub const PR_TSC_SIGSEGV: u32 = 2;
+pub const PR_GET_SECUREBITS: u32 = 27;
+pub const PR_SET_SECUREBITS: u32 = 28;
+pub const PR_SET_TIMERSLACK: u32 = 29;
+pub const PR_GET_TIMERSLACK: u32 = 30;
+pub const PR_TASK_PERF_EVENTS_DISABLE: u32 = 31;
+pub const PR_TASK_PERF_EVENTS_ENABLE: u32 = 32;
+pub const PR_MCE_KILL: u32 = 33;
+pub const PR_MCE_KILL_CLEAR: u32 = 0;
+pub const PR_MCE_KILL_SET: u32 = 1;
+pub const PR_MCE_KILL_LATE: u32 = 0;
+pub const PR_MCE_KILL_EARLY: u32 = 1;
+pub const PR_MCE_KILL_DEFAULT: u32 = 2;
+pub const PR_MCE_KILL_GET: u32 = 34;
+pub const PR_SET_MM: u32 = 35;
+pub const PR_SET_MM_START_CODE: u32 = 1;
+pub const PR_SET_MM_END_CODE: u32 = 2;
+pub const PR_SET_MM_START_DATA: u32 = 3;
+pub const PR_SET_MM_END_DATA: u32 = 4;
+pub const PR_SET_MM_START_STACK: u32 = 5;
+pub const PR_SET_MM_START_BRK: u32 = 6;
+pub const PR_SET_MM_BRK: u32 = 7;
+pub const PR_SET_MM_ARG_START: u32 = 8;
+pub const PR_SET_MM_ARG_END: u32 = 9;
+pub const PR_SET_MM_ENV_START: u32 = 10;
+pub const PR_SET_MM_ENV_END: u32 = 11;
+pub const PR_SET_MM_AUXV: u32 = 12;
+pub const PR_SET_MM_EXE_FILE: u32 = 13;
+pub const PR_SET_MM_MAP: u32 = 14;
+pub const PR_SET_MM_MAP_SIZE: u32 = 15;
+pub const PR_SET_PTRACER: u32 = 1499557217;
+pub const PR_SET_CHILD_SUBREAPER: u32 = 36;
+pub const PR_GET_CHILD_SUBREAPER: u32 = 37;
+pub const PR_SET_NO_NEW_PRIVS: u32 = 38;
+pub const PR_GET_NO_NEW_PRIVS: u32 = 39;
+pub const PR_GET_TID_ADDRESS: u32 = 40;
+pub const PR_SET_THP_DISABLE: u32 = 41;
+pub const PR_GET_THP_DISABLE: u32 = 42;
+pub const PR_MPX_ENABLE_MANAGEMENT: u32 = 43;
+pub const PR_MPX_DISABLE_MANAGEMENT: u32 = 44;
+pub const PR_SET_FP_MODE: u32 = 45;
+pub const PR_GET_FP_MODE: u32 = 46;
+pub const PR_FP_MODE_FR: u32 = 1;
+pub const PR_FP_MODE_FRE: u32 = 2;
+pub const PR_CAP_AMBIENT: u32 = 47;
+pub const PR_CAP_AMBIENT_IS_SET: u32 = 1;
+pub const PR_CAP_AMBIENT_RAISE: u32 = 2;
+pub const PR_CAP_AMBIENT_LOWER: u32 = 3;
+pub const PR_CAP_AMBIENT_CLEAR_ALL: u32 = 4;
+pub const PR_SVE_SET_VL: u32 = 50;
+pub const PR_SVE_SET_VL_ONEXEC: u32 = 262144;
+pub const PR_SVE_GET_VL: u32 = 51;
+pub const PR_SVE_VL_LEN_MASK: u32 = 65535;
+pub const PR_SVE_VL_INHERIT: u32 = 131072;
+pub const PR_GET_SPECULATION_CTRL: u32 = 52;
+pub const PR_SET_SPECULATION_CTRL: u32 = 53;
+pub const PR_SPEC_STORE_BYPASS: u32 = 0;
+pub const PR_SPEC_INDIRECT_BRANCH: u32 = 1;
+pub const PR_SPEC_L1D_FLUSH: u32 = 2;
+pub const PR_SPEC_NOT_AFFECTED: u32 = 0;
+pub const PR_SPEC_PRCTL: u32 = 1;
+pub const PR_SPEC_ENABLE: u32 = 2;
+pub const PR_SPEC_DISABLE: u32 = 4;
+pub const PR_SPEC_FORCE_DISABLE: u32 = 8;
+pub const PR_SPEC_DISABLE_NOEXEC: u32 = 16;
+pub const PR_PAC_RESET_KEYS: u32 = 54;
+pub const PR_PAC_APIAKEY: u32 = 1;
+pub const PR_PAC_APIBKEY: u32 = 2;
+pub const PR_PAC_APDAKEY: u32 = 4;
+pub const PR_PAC_APDBKEY: u32 = 8;
+pub const PR_PAC_APGAKEY: u32 = 16;
+pub const PR_SET_TAGGED_ADDR_CTRL: u32 = 55;
+pub const PR_GET_TAGGED_ADDR_CTRL: u32 = 56;
+pub const PR_TAGGED_ADDR_ENABLE: u32 = 1;
+pub const PR_MTE_TCF_NONE: u32 = 0;
+pub const PR_MTE_TCF_SYNC: u32 = 2;
+pub const PR_MTE_TCF_ASYNC: u32 = 4;
+pub const PR_MTE_TCF_MASK: u32 = 6;
+pub const PR_MTE_TAG_SHIFT: u32 = 3;
+pub const PR_MTE_TAG_MASK: u32 = 524280;
+pub const PR_MTE_TCF_SHIFT: u32 = 1;
+pub const PR_SET_IO_FLUSHER: u32 = 57;
+pub const PR_GET_IO_FLUSHER: u32 = 58;
+pub const PR_SET_SYSCALL_USER_DISPATCH: u32 = 59;
+pub const PR_SYS_DISPATCH_OFF: u32 = 0;
+pub const PR_SYS_DISPATCH_ON: u32 = 1;
+pub const SYSCALL_DISPATCH_FILTER_ALLOW: u32 = 0;
+pub const SYSCALL_DISPATCH_FILTER_BLOCK: u32 = 1;
+pub const PR_PAC_SET_ENABLED_KEYS: u32 = 60;
+pub const PR_PAC_GET_ENABLED_KEYS: u32 = 61;
+pub const PR_SCHED_CORE: u32 = 62;
+pub const PR_SCHED_CORE_GET: u32 = 0;
+pub const PR_SCHED_CORE_CREATE: u32 = 1;
+pub const PR_SCHED_CORE_SHARE_TO: u32 = 2;
+pub const PR_SCHED_CORE_SHARE_FROM: u32 = 3;
+pub const PR_SCHED_CORE_MAX: u32 = 4;
+pub const PR_SCHED_CORE_SCOPE_THREAD: u32 = 0;
+pub const PR_SCHED_CORE_SCOPE_THREAD_GROUP: u32 = 1;
+pub const PR_SCHED_CORE_SCOPE_PROCESS_GROUP: u32 = 2;
+pub const PR_SME_SET_VL: u32 = 63;
+pub const PR_SME_SET_VL_ONEXEC: u32 = 262144;
+pub const PR_SME_GET_VL: u32 = 64;
+pub const PR_SME_VL_LEN_MASK: u32 = 65535;
+pub const PR_SME_VL_INHERIT: u32 = 131072;
+pub const PR_SET_VMA: u32 = 1398164801;
+pub const PR_SET_VMA_ANON_NAME: u32 = 0;
+pub const GRND_NONBLOCK: u32 = 1;
+pub const GRND_RANDOM: u32 = 2;
+pub const GRND_INSECURE: u32 = 4;
+pub const ITIMER_REAL: u32 = 0;
+pub const ITIMER_VIRTUAL: u32 = 1;
+pub const ITIMER_PROF: u32 = 2;
+pub const CLOCK_REALTIME: u32 = 0;
+pub const CLOCK_MONOTONIC: u32 = 1;
+pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
+pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
+pub const CLOCK_MONOTONIC_RAW: u32 = 4;
+pub const CLOCK_REALTIME_COARSE: u32 = 5;
+pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
+pub const CLOCK_BOOTTIME: u32 = 7;
+pub const CLOCK_REALTIME_ALARM: u32 = 8;
+pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
+pub const CLOCK_SGI_CYCLE: u32 = 10;
+pub const CLOCK_TAI: u32 = 11;
+pub const MAX_CLOCKS: u32 = 16;
+pub const CLOCKS_MASK: u32 = 1;
+pub const CLOCKS_MONO: u32 = 1;
+pub const TIMER_ABSTIME: u32 = 1;
+pub const RUSAGE_SELF: u32 = 0;
+pub const RUSAGE_CHILDREN: i32 = -1;
+pub const RUSAGE_BOTH: i32 = -2;
+pub const RUSAGE_THREAD: u32 = 1;
+pub const RLIM64_INFINITY: i32 = -1;
+pub const PRIO_MIN: i32 = -20;
+pub const PRIO_MAX: u32 = 20;
+pub const PRIO_PROCESS: u32 = 0;
+pub const PRIO_PGRP: u32 = 1;
+pub const PRIO_USER: u32 = 2;
+pub const _STK_LIM: u32 = 8388608;
+pub const MLOCK_LIMIT: u32 = 8388608;
+pub const RLIMIT_CPU: u32 = 0;
+pub const RLIMIT_FSIZE: u32 = 1;
+pub const RLIMIT_DATA: u32 = 2;
+pub const RLIMIT_STACK: u32 = 3;
+pub const RLIMIT_CORE: u32 = 4;
+pub const RLIMIT_RSS: u32 = 5;
+pub const RLIMIT_NPROC: u32 = 6;
+pub const RLIMIT_NOFILE: u32 = 7;
+pub const RLIMIT_MEMLOCK: u32 = 8;
+pub const RLIMIT_AS: u32 = 9;
+pub const RLIMIT_LOCKS: u32 = 10;
+pub const RLIMIT_SIGPENDING: u32 = 11;
+pub const RLIMIT_MSGQUEUE: u32 = 12;
+pub const RLIMIT_NICE: u32 = 13;
+pub const RLIMIT_RTPRIO: u32 = 14;
+pub const RLIMIT_RTTIME: u32 = 15;
+pub const RLIM_NLIMITS: u32 = 16;
+pub const RLIM_INFINITY: i32 = -1;
+pub const CSIGNAL: u32 = 255;
+pub const CLONE_VM: u32 = 256;
+pub const CLONE_FS: u32 = 512;
+pub const CLONE_FILES: u32 = 1024;
+pub const CLONE_SIGHAND: u32 = 2048;
+pub const CLONE_PIDFD: u32 = 4096;
+pub const CLONE_PTRACE: u32 = 8192;
+pub const CLONE_VFORK: u32 = 16384;
+pub const CLONE_PARENT: u32 = 32768;
+pub const CLONE_THREAD: u32 = 65536;
+pub const CLONE_NEWNS: u32 = 131072;
+pub const CLONE_SYSVSEM: u32 = 262144;
+pub const CLONE_SETTLS: u32 = 524288;
+pub const CLONE_PARENT_SETTID: u32 = 1048576;
+pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
+pub const CLONE_DETACHED: u32 = 4194304;
+pub const CLONE_UNTRACED: u32 = 8388608;
+pub const CLONE_CHILD_SETTID: u32 = 16777216;
+pub const CLONE_NEWCGROUP: u32 = 33554432;
+pub const CLONE_NEWUTS: u32 = 67108864;
+pub const CLONE_NEWIPC: u32 = 134217728;
+pub const CLONE_NEWUSER: u32 = 268435456;
+pub const CLONE_NEWPID: u32 = 536870912;
+pub const CLONE_NEWNET: u32 = 1073741824;
+pub const CLONE_IO: u32 = 2147483648;
+pub const CLONE_CLEAR_SIGHAND: u64 = 4294967296;
+pub const CLONE_INTO_CGROUP: u64 = 8589934592;
+pub const CLONE_NEWTIME: u32 = 128;
+pub const CLONE_ARGS_SIZE_VER0: u32 = 64;
+pub const CLONE_ARGS_SIZE_VER1: u32 = 80;
+pub const CLONE_ARGS_SIZE_VER2: u32 = 88;
+pub const SCHED_NORMAL: u32 = 0;
+pub const SCHED_FIFO: u32 = 1;
+pub const SCHED_RR: u32 = 2;
+pub const SCHED_BATCH: u32 = 3;
+pub const SCHED_IDLE: u32 = 5;
+pub const SCHED_DEADLINE: u32 = 6;
+pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
+pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
+pub const SCHED_FLAG_RECLAIM: u32 = 2;
+pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
+pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
+pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
+pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
+pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
+pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
+pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
+pub const SCHED_FLAG_ALL: u32 = 127;
+pub const MINSIGSTKSZ: u32 = 4096;
+pub const SIGSTKSZ: u32 = 16384;
+pub const _NSIG: u32 = 64;
+pub const SIGHUP: u32 = 1;
+pub const SIGINT: u32 = 2;
+pub const SIGQUIT: u32 = 3;
+pub const SIGILL: u32 = 4;
+pub const SIGTRAP: u32 = 5;
+pub const SIGABRT: u32 = 6;
+pub const SIGIOT: u32 = 6;
+pub const SIGBUS: u32 = 7;
+pub const SIGFPE: u32 = 8;
+pub const SIGKILL: u32 = 9;
+pub const SIGUSR1: u32 = 10;
+pub const SIGSEGV: u32 = 11;
+pub const SIGUSR2: u32 = 12;
+pub const SIGPIPE: u32 = 13;
+pub const SIGALRM: u32 = 14;
+pub const SIGTERM: u32 = 15;
+pub const SIGSTKFLT: u32 = 16;
+pub const SIGCHLD: u32 = 17;
+pub const SIGCONT: u32 = 18;
+pub const SIGSTOP: u32 = 19;
+pub const SIGTSTP: u32 = 20;
+pub const SIGTTIN: u32 = 21;
+pub const SIGTTOU: u32 = 22;
+pub const SIGURG: u32 = 23;
+pub const SIGXCPU: u32 = 24;
+pub const SIGXFSZ: u32 = 25;
+pub const SIGVTALRM: u32 = 26;
+pub const SIGPROF: u32 = 27;
+pub const SIGWINCH: u32 = 28;
+pub const SIGIO: u32 = 29;
+pub const SIGPOLL: u32 = 29;
+pub const SIGPWR: u32 = 30;
+pub const SIGSYS: u32 = 31;
+pub const SIGUNUSED: u32 = 31;
+pub const SIGRTMIN: u32 = 32;
+pub const SIGRTMAX: u32 = 64;
+pub const SA_NOCLDSTOP: u32 = 1;
+pub const SA_NOCLDWAIT: u32 = 2;
+pub const SA_SIGINFO: u32 = 4;
+pub const SA_UNSUPPORTED: u32 = 1024;
+pub const SA_EXPOSE_TAGBITS: u32 = 2048;
+pub const SA_ONSTACK: u32 = 134217728;
+pub const SA_RESTART: u32 = 268435456;
+pub const SA_NODEFER: u32 = 1073741824;
+pub const SA_RESETHAND: u32 = 2147483648;
+pub const SA_NOMASK: u32 = 1073741824;
+pub const SA_ONESHOT: u32 = 2147483648;
+pub const SIG_BLOCK: u32 = 0;
+pub const SIG_UNBLOCK: u32 = 1;
+pub const SIG_SETMASK: u32 = 2;
+pub const SI_MAX_SIZE: u32 = 128;
+pub const SI_USER: u32 = 0;
+pub const SI_KERNEL: u32 = 128;
+pub const SI_QUEUE: i32 = -1;
+pub const SI_TIMER: i32 = -2;
+pub const SI_MESGQ: i32 = -3;
+pub const SI_ASYNCIO: i32 = -4;
+pub const SI_SIGIO: i32 = -5;
+pub const SI_TKILL: i32 = -6;
+pub const SI_DETHREAD: i32 = -7;
+pub const SI_ASYNCNL: i32 = -60;
+pub const ILL_ILLOPC: u32 = 1;
+pub const ILL_ILLOPN: u32 = 2;
+pub const ILL_ILLADR: u32 = 3;
+pub const ILL_ILLTRP: u32 = 4;
+pub const ILL_PRVOPC: u32 = 5;
+pub const ILL_PRVREG: u32 = 6;
+pub const ILL_COPROC: u32 = 7;
+pub const ILL_BADSTK: u32 = 8;
+pub const ILL_BADIADDR: u32 = 9;
+pub const __ILL_BREAK: u32 = 10;
+pub const __ILL_BNDMOD: u32 = 11;
+pub const NSIGILL: u32 = 11;
+pub const FPE_INTDIV: u32 = 1;
+pub const FPE_INTOVF: u32 = 2;
+pub const FPE_FLTDIV: u32 = 3;
+pub const FPE_FLTOVF: u32 = 4;
+pub const FPE_FLTUND: u32 = 5;
+pub const FPE_FLTRES: u32 = 6;
+pub const FPE_FLTINV: u32 = 7;
+pub const FPE_FLTSUB: u32 = 8;
+pub const __FPE_DECOVF: u32 = 9;
+pub const __FPE_DECDIV: u32 = 10;
+pub const __FPE_DECERR: u32 = 11;
+pub const __FPE_INVASC: u32 = 12;
+pub const __FPE_INVDEC: u32 = 13;
+pub const FPE_FLTUNK: u32 = 14;
+pub const FPE_CONDTRAP: u32 = 15;
+pub const NSIGFPE: u32 = 15;
+pub const SEGV_MAPERR: u32 = 1;
+pub const SEGV_ACCERR: u32 = 2;
+pub const SEGV_BNDERR: u32 = 3;
+pub const SEGV_PKUERR: u32 = 4;
+pub const SEGV_ACCADI: u32 = 5;
+pub const SEGV_ADIDERR: u32 = 6;
+pub const SEGV_ADIPERR: u32 = 7;
+pub const SEGV_MTEAERR: u32 = 8;
+pub const SEGV_MTESERR: u32 = 9;
+pub const NSIGSEGV: u32 = 9;
+pub const BUS_ADRALN: u32 = 1;
+pub const BUS_ADRERR: u32 = 2;
+pub const BUS_OBJERR: u32 = 3;
+pub const BUS_MCEERR_AR: u32 = 4;
+pub const BUS_MCEERR_AO: u32 = 5;
+pub const NSIGBUS: u32 = 5;
+pub const TRAP_BRKPT: u32 = 1;
+pub const TRAP_TRACE: u32 = 2;
+pub const TRAP_BRANCH: u32 = 3;
+pub const TRAP_HWBKPT: u32 = 4;
+pub const TRAP_UNK: u32 = 5;
+pub const TRAP_PERF: u32 = 6;
+pub const NSIGTRAP: u32 = 6;
+pub const TRAP_PERF_FLAG_ASYNC: u32 = 1;
+pub const CLD_EXITED: u32 = 1;
+pub const CLD_KILLED: u32 = 2;
+pub const CLD_DUMPED: u32 = 3;
+pub const CLD_TRAPPED: u32 = 4;
+pub const CLD_STOPPED: u32 = 5;
+pub const CLD_CONTINUED: u32 = 6;
+pub const NSIGCHLD: u32 = 6;
+pub const POLL_IN: u32 = 1;
+pub const POLL_OUT: u32 = 2;
+pub const POLL_MSG: u32 = 3;
+pub const POLL_ERR: u32 = 4;
+pub const POLL_PRI: u32 = 5;
+pub const POLL_HUP: u32 = 6;
+pub const NSIGPOLL: u32 = 6;
+pub const SYS_SECCOMP: u32 = 1;
+pub const SYS_USER_DISPATCH: u32 = 2;
+pub const NSIGSYS: u32 = 2;
+pub const EMT_TAGOVF: u32 = 1;
+pub const NSIGEMT: u32 = 1;
+pub const SIGEV_SIGNAL: u32 = 0;
+pub const SIGEV_NONE: u32 = 1;
+pub const SIGEV_THREAD: u32 = 2;
+pub const SIGEV_THREAD_ID: u32 = 4;
+pub const SIGEV_MAX_SIZE: u32 = 64;
+pub const SS_ONSTACK: u32 = 1;
+pub const SS_DISABLE: u32 = 2;
+pub const SS_AUTODISARM: u32 = 2147483648;
+pub const SS_FLAG_BITS: u32 = 2147483648;
+pub const S_IFMT: u32 = 61440;
+pub const S_IFSOCK: u32 = 49152;
+pub const S_IFLNK: u32 = 40960;
+pub const S_IFREG: u32 = 32768;
+pub const S_IFBLK: u32 = 24576;
+pub const S_IFDIR: u32 = 16384;
+pub const S_IFCHR: u32 = 8192;
+pub const S_IFIFO: u32 = 4096;
+pub const S_ISUID: u32 = 2048;
+pub const S_ISGID: u32 = 1024;
+pub const S_ISVTX: u32 = 512;
+pub const S_IRWXU: u32 = 448;
+pub const S_IRUSR: u32 = 256;
+pub const S_IWUSR: u32 = 128;
+pub const S_IXUSR: u32 = 64;
+pub const S_IRWXG: u32 = 56;
+pub const S_IRGRP: u32 = 32;
+pub const S_IWGRP: u32 = 16;
+pub const S_IXGRP: u32 = 8;
+pub const S_IRWXO: u32 = 7;
+pub const S_IROTH: u32 = 4;
+pub const S_IWOTH: u32 = 2;
+pub const S_IXOTH: u32 = 1;
+pub const STATX_TYPE: u32 = 1;
+pub const STATX_MODE: u32 = 2;
+pub const STATX_NLINK: u32 = 4;
+pub const STATX_UID: u32 = 8;
+pub const STATX_GID: u32 = 16;
+pub const STATX_ATIME: u32 = 32;
+pub const STATX_MTIME: u32 = 64;
+pub const STATX_CTIME: u32 = 128;
+pub const STATX_INO: u32 = 256;
+pub const STATX_SIZE: u32 = 512;
+pub const STATX_BLOCKS: u32 = 1024;
+pub const STATX_BASIC_STATS: u32 = 2047;
+pub const STATX_BTIME: u32 = 2048;
+pub const STATX_MNT_ID: u32 = 4096;
+pub const STATX_DIOALIGN: u32 = 8192;
+pub const STATX__RESERVED: u32 = 2147483648;
+pub const STATX_ALL: u32 = 4095;
+pub const STATX_ATTR_COMPRESSED: u32 = 4;
+pub const STATX_ATTR_IMMUTABLE: u32 = 16;
+pub const STATX_ATTR_APPEND: u32 = 32;
+pub const STATX_ATTR_NODUMP: u32 = 64;
+pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
+pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
+pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
+pub const STATX_ATTR_VERITY: u32 = 1048576;
+pub const STATX_ATTR_DAX: u32 = 2097152;
+pub const SI_LOAD_SHIFT: u32 = 16;
+pub const TCP_MSS_DEFAULT: u32 = 536;
+pub const TCP_MSS_DESIRED: u32 = 1220;
+pub const TCP_NODELAY: u32 = 1;
+pub const TCP_MAXSEG: u32 = 2;
+pub const TCP_CORK: u32 = 3;
+pub const TCP_KEEPIDLE: u32 = 4;
+pub const TCP_KEEPINTVL: u32 = 5;
+pub const TCP_KEEPCNT: u32 = 6;
+pub const TCP_SYNCNT: u32 = 7;
+pub const TCP_LINGER2: u32 = 8;
+pub const TCP_DEFER_ACCEPT: u32 = 9;
+pub const TCP_WINDOW_CLAMP: u32 = 10;
+pub const TCP_INFO: u32 = 11;
+pub const TCP_QUICKACK: u32 = 12;
+pub const TCP_CONGESTION: u32 = 13;
+pub const TCP_MD5SIG: u32 = 14;
+pub const TCP_THIN_LINEAR_TIMEOUTS: u32 = 16;
+pub const TCP_THIN_DUPACK: u32 = 17;
+pub const TCP_USER_TIMEOUT: u32 = 18;
+pub const TCP_REPAIR: u32 = 19;
+pub const TCP_REPAIR_QUEUE: u32 = 20;
+pub const TCP_QUEUE_SEQ: u32 = 21;
+pub const TCP_REPAIR_OPTIONS: u32 = 22;
+pub const TCP_FASTOPEN: u32 = 23;
+pub const TCP_TIMESTAMP: u32 = 24;
+pub const TCP_NOTSENT_LOWAT: u32 = 25;
+pub const TCP_CC_INFO: u32 = 26;
+pub const TCP_SAVE_SYN: u32 = 27;
+pub const TCP_SAVED_SYN: u32 = 28;
+pub const TCP_REPAIR_WINDOW: u32 = 29;
+pub const TCP_FASTOPEN_CONNECT: u32 = 30;
+pub const TCP_ULP: u32 = 31;
+pub const TCP_MD5SIG_EXT: u32 = 32;
+pub const TCP_FASTOPEN_KEY: u32 = 33;
+pub const TCP_FASTOPEN_NO_COOKIE: u32 = 34;
+pub const TCP_ZEROCOPY_RECEIVE: u32 = 35;
+pub const TCP_INQ: u32 = 36;
+pub const TCP_CM_INQ: u32 = 36;
+pub const TCP_TX_DELAY: u32 = 37;
+pub const TCP_REPAIR_ON: u32 = 1;
+pub const TCP_REPAIR_OFF: u32 = 0;
+pub const TCP_REPAIR_OFF_NO_WP: i32 = -1;
+pub const TCPI_OPT_TIMESTAMPS: u32 = 1;
+pub const TCPI_OPT_SACK: u32 = 2;
+pub const TCPI_OPT_WSCALE: u32 = 4;
+pub const TCPI_OPT_ECN: u32 = 8;
+pub const TCPI_OPT_ECN_SEEN: u32 = 16;
+pub const TCPI_OPT_SYN_DATA: u32 = 32;
+pub const TCP_MD5SIG_MAXKEYLEN: u32 = 80;
+pub const TCP_MD5SIG_FLAG_PREFIX: u32 = 1;
+pub const TCP_MD5SIG_FLAG_IFINDEX: u32 = 2;
+pub const TCP_RECEIVE_ZEROCOPY_FLAG_TLB_CLEAN_HINT: u32 = 1;
+pub const IGNBRK: u32 = 1;
+pub const BRKINT: u32 = 2;
+pub const IGNPAR: u32 = 4;
+pub const PARMRK: u32 = 8;
+pub const INPCK: u32 = 16;
+pub const ISTRIP: u32 = 32;
+pub const INLCR: u32 = 64;
+pub const IGNCR: u32 = 128;
+pub const ICRNL: u32 = 256;
+pub const IXANY: u32 = 2048;
+pub const OPOST: u32 = 1;
+pub const OCRNL: u32 = 8;
+pub const ONOCR: u32 = 16;
+pub const ONLRET: u32 = 32;
+pub const OFILL: u32 = 64;
+pub const OFDEL: u32 = 128;
+pub const B0: u32 = 0;
+pub const B50: u32 = 1;
+pub const B75: u32 = 2;
+pub const B110: u32 = 3;
+pub const B134: u32 = 4;
+pub const B150: u32 = 5;
+pub const B200: u32 = 6;
+pub const B300: u32 = 7;
+pub const B600: u32 = 8;
+pub const B1200: u32 = 9;
+pub const B1800: u32 = 10;
+pub const B2400: u32 = 11;
+pub const B4800: u32 = 12;
+pub const B9600: u32 = 13;
+pub const B19200: u32 = 14;
+pub const B38400: u32 = 15;
+pub const EXTA: u32 = 14;
+pub const EXTB: u32 = 15;
+pub const ADDRB: u32 = 536870912;
+pub const CMSPAR: u32 = 1073741824;
+pub const CRTSCTS: u32 = 2147483648;
+pub const IBSHIFT: u32 = 16;
+pub const TCOOFF: u32 = 0;
+pub const TCOON: u32 = 1;
+pub const TCIOFF: u32 = 2;
+pub const TCION: u32 = 3;
+pub const TCIFLUSH: u32 = 0;
+pub const TCOFLUSH: u32 = 1;
+pub const TCIOFLUSH: u32 = 2;
+pub const NCCS: u32 = 19;
+pub const VINTR: u32 = 0;
+pub const VQUIT: u32 = 1;
+pub const VERASE: u32 = 2;
+pub const VKILL: u32 = 3;
+pub const VEOF: u32 = 4;
+pub const VTIME: u32 = 5;
+pub const VMIN: u32 = 6;
+pub const VSWTC: u32 = 7;
+pub const VSTART: u32 = 8;
+pub const VSTOP: u32 = 9;
+pub const VSUSP: u32 = 10;
+pub const VEOL: u32 = 11;
+pub const VREPRINT: u32 = 12;
+pub const VDISCARD: u32 = 13;
+pub const VWERASE: u32 = 14;
+pub const VLNEXT: u32 = 15;
+pub const VEOL2: u32 = 16;
+pub const IUCLC: u32 = 512;
+pub const IXON: u32 = 1024;
+pub const IXOFF: u32 = 4096;
+pub const IMAXBEL: u32 = 8192;
+pub const IUTF8: u32 = 16384;
+pub const OLCUC: u32 = 2;
+pub const ONLCR: u32 = 4;
+pub const NLDLY: u32 = 256;
+pub const NL0: u32 = 0;
+pub const NL1: u32 = 256;
+pub const CRDLY: u32 = 1536;
+pub const CR0: u32 = 0;
+pub const CR1: u32 = 512;
+pub const CR2: u32 = 1024;
+pub const CR3: u32 = 1536;
+pub const TABDLY: u32 = 6144;
+pub const TAB0: u32 = 0;
+pub const TAB1: u32 = 2048;
+pub const TAB2: u32 = 4096;
+pub const TAB3: u32 = 6144;
+pub const XTABS: u32 = 6144;
+pub const BSDLY: u32 = 8192;
+pub const BS0: u32 = 0;
+pub const BS1: u32 = 8192;
+pub const VTDLY: u32 = 16384;
+pub const VT0: u32 = 0;
+pub const VT1: u32 = 16384;
+pub const FFDLY: u32 = 32768;
+pub const FF0: u32 = 0;
+pub const FF1: u32 = 32768;
+pub const CBAUD: u32 = 4111;
+pub const CSIZE: u32 = 48;
+pub const CS5: u32 = 0;
+pub const CS6: u32 = 16;
+pub const CS7: u32 = 32;
+pub const CS8: u32 = 48;
+pub const CSTOPB: u32 = 64;
+pub const CREAD: u32 = 128;
+pub const PARENB: u32 = 256;
+pub const PARODD: u32 = 512;
+pub const HUPCL: u32 = 1024;
+pub const CLOCAL: u32 = 2048;
+pub const CBAUDEX: u32 = 4096;
+pub const BOTHER: u32 = 4096;
+pub const B57600: u32 = 4097;
+pub const B115200: u32 = 4098;
+pub const B230400: u32 = 4099;
+pub const B460800: u32 = 4100;
+pub const B500000: u32 = 4101;
+pub const B576000: u32 = 4102;
+pub const B921600: u32 = 4103;
+pub const B1000000: u32 = 4104;
+pub const B1152000: u32 = 4105;
+pub const B1500000: u32 = 4106;
+pub const B2000000: u32 = 4107;
+pub const B2500000: u32 = 4108;
+pub const B3000000: u32 = 4109;
+pub const B3500000: u32 = 4110;
+pub const B4000000: u32 = 4111;
+pub const CIBAUD: u32 = 269418496;
+pub const ISIG: u32 = 1;
+pub const ICANON: u32 = 2;
+pub const XCASE: u32 = 4;
+pub const ECHO: u32 = 8;
+pub const ECHOE: u32 = 16;
+pub const ECHOK: u32 = 32;
+pub const ECHONL: u32 = 64;
+pub const NOFLSH: u32 = 128;
+pub const TOSTOP: u32 = 256;
+pub const ECHOCTL: u32 = 512;
+pub const ECHOPRT: u32 = 1024;
+pub const ECHOKE: u32 = 2048;
+pub const FLUSHO: u32 = 4096;
+pub const PENDIN: u32 = 16384;
+pub const IEXTEN: u32 = 32768;
+pub const EXTPROC: u32 = 65536;
+pub const TCSANOW: u32 = 0;
+pub const TCSADRAIN: u32 = 1;
+pub const TCSAFLUSH: u32 = 2;
+pub const TIOCPKT_DATA: u32 = 0;
+pub const TIOCPKT_FLUSHREAD: u32 = 1;
+pub const TIOCPKT_FLUSHWRITE: u32 = 2;
+pub const TIOCPKT_STOP: u32 = 4;
+pub const TIOCPKT_START: u32 = 8;
+pub const TIOCPKT_NOSTOP: u32 = 16;
+pub const TIOCPKT_DOSTOP: u32 = 32;
+pub const TIOCPKT_IOCTL: u32 = 64;
+pub const TIOCSER_TEMT: u32 = 1;
+pub const NCC: u32 = 8;
+pub const TIOCM_LE: u32 = 1;
+pub const TIOCM_DTR: u32 = 2;
+pub const TIOCM_RTS: u32 = 4;
+pub const TIOCM_ST: u32 = 8;
+pub const TIOCM_SR: u32 = 16;
+pub const TIOCM_CTS: u32 = 32;
+pub const TIOCM_CAR: u32 = 64;
+pub const TIOCM_RNG: u32 = 128;
+pub const TIOCM_DSR: u32 = 256;
+pub const TIOCM_CD: u32 = 64;
+pub const TIOCM_RI: u32 = 128;
+pub const TIOCM_OUT1: u32 = 8192;
+pub const TIOCM_OUT2: u32 = 16384;
+pub const TIOCM_LOOP: u32 = 32768;
+pub const UIO_FASTIOV: u32 = 8;
+pub const UIO_MAXIOV: u32 = 1024;
+pub const UNIX_PATH_MAX: u32 = 108;
+pub const __NR_io_setup: u32 = 0;
+pub const __NR_io_destroy: u32 = 1;
+pub const __NR_io_submit: u32 = 2;
+pub const __NR_io_cancel: u32 = 3;
+pub const __NR_io_getevents: u32 = 4;
+pub const __NR_setxattr: u32 = 5;
+pub const __NR_lsetxattr: u32 = 6;
+pub const __NR_fsetxattr: u32 = 7;
+pub const __NR_getxattr: u32 = 8;
+pub const __NR_lgetxattr: u32 = 9;
+pub const __NR_fgetxattr: u32 = 10;
+pub const __NR_listxattr: u32 = 11;
+pub const __NR_llistxattr: u32 = 12;
+pub const __NR_flistxattr: u32 = 13;
+pub const __NR_removexattr: u32 = 14;
+pub const __NR_lremovexattr: u32 = 15;
+pub const __NR_fremovexattr: u32 = 16;
+pub const __NR_getcwd: u32 = 17;
+pub const __NR_lookup_dcookie: u32 = 18;
+pub const __NR_eventfd2: u32 = 19;
+pub const __NR_epoll_create1: u32 = 20;
+pub const __NR_epoll_ctl: u32 = 21;
+pub const __NR_epoll_pwait: u32 = 22;
+pub const __NR_dup: u32 = 23;
+pub const __NR_dup3: u32 = 24;
+pub const __NR3264_fcntl: u32 = 25;
+pub const __NR_inotify_init1: u32 = 26;
+pub const __NR_inotify_add_watch: u32 = 27;
+pub const __NR_inotify_rm_watch: u32 = 28;
+pub const __NR_ioctl: u32 = 29;
+pub const __NR_ioprio_set: u32 = 30;
+pub const __NR_ioprio_get: u32 = 31;
+pub const __NR_flock: u32 = 32;
+pub const __NR_mknodat: u32 = 33;
+pub const __NR_mkdirat: u32 = 34;
+pub const __NR_unlinkat: u32 = 35;
+pub const __NR_symlinkat: u32 = 36;
+pub const __NR_linkat: u32 = 37;
+pub const __NR_umount2: u32 = 39;
+pub const __NR_mount: u32 = 40;
+pub const __NR_pivot_root: u32 = 41;
+pub const __NR_nfsservctl: u32 = 42;
+pub const __NR3264_statfs: u32 = 43;
+pub const __NR3264_fstatfs: u32 = 44;
+pub const __NR3264_truncate: u32 = 45;
+pub const __NR3264_ftruncate: u32 = 46;
+pub const __NR_fallocate: u32 = 47;
+pub const __NR_faccessat: u32 = 48;
+pub const __NR_chdir: u32 = 49;
+pub const __NR_fchdir: u32 = 50;
+pub const __NR_chroot: u32 = 51;
+pub const __NR_fchmod: u32 = 52;
+pub const __NR_fchmodat: u32 = 53;
+pub const __NR_fchownat: u32 = 54;
+pub const __NR_fchown: u32 = 55;
+pub const __NR_openat: u32 = 56;
+pub const __NR_close: u32 = 57;
+pub const __NR_vhangup: u32 = 58;
+pub const __NR_pipe2: u32 = 59;
+pub const __NR_quotactl: u32 = 60;
+pub const __NR_getdents64: u32 = 61;
+pub const __NR3264_lseek: u32 = 62;
+pub const __NR_read: u32 = 63;
+pub const __NR_write: u32 = 64;
+pub const __NR_readv: u32 = 65;
+pub const __NR_writev: u32 = 66;
+pub const __NR_pread64: u32 = 67;
+pub const __NR_pwrite64: u32 = 68;
+pub const __NR_preadv: u32 = 69;
+pub const __NR_pwritev: u32 = 70;
+pub const __NR3264_sendfile: u32 = 71;
+pub const __NR_pselect6: u32 = 72;
+pub const __NR_ppoll: u32 = 73;
+pub const __NR_signalfd4: u32 = 74;
+pub const __NR_vmsplice: u32 = 75;
+pub const __NR_splice: u32 = 76;
+pub const __NR_tee: u32 = 77;
+pub const __NR_readlinkat: u32 = 78;
+pub const __NR_sync: u32 = 81;
+pub const __NR_fsync: u32 = 82;
+pub const __NR_fdatasync: u32 = 83;
+pub const __NR_sync_file_range: u32 = 84;
+pub const __NR_timerfd_create: u32 = 85;
+pub const __NR_timerfd_settime: u32 = 86;
+pub const __NR_timerfd_gettime: u32 = 87;
+pub const __NR_utimensat: u32 = 88;
+pub const __NR_acct: u32 = 89;
+pub const __NR_capget: u32 = 90;
+pub const __NR_capset: u32 = 91;
+pub const __NR_personality: u32 = 92;
+pub const __NR_exit: u32 = 93;
+pub const __NR_exit_group: u32 = 94;
+pub const __NR_waitid: u32 = 95;
+pub const __NR_set_tid_address: u32 = 96;
+pub const __NR_unshare: u32 = 97;
+pub const __NR_futex: u32 = 98;
+pub const __NR_set_robust_list: u32 = 99;
+pub const __NR_get_robust_list: u32 = 100;
+pub const __NR_nanosleep: u32 = 101;
+pub const __NR_getitimer: u32 = 102;
+pub const __NR_setitimer: u32 = 103;
+pub const __NR_kexec_load: u32 = 104;
+pub const __NR_init_module: u32 = 105;
+pub const __NR_delete_module: u32 = 106;
+pub const __NR_timer_create: u32 = 107;
+pub const __NR_timer_gettime: u32 = 108;
+pub const __NR_timer_getoverrun: u32 = 109;
+pub const __NR_timer_settime: u32 = 110;
+pub const __NR_timer_delete: u32 = 111;
+pub const __NR_clock_settime: u32 = 112;
+pub const __NR_clock_gettime: u32 = 113;
+pub const __NR_clock_getres: u32 = 114;
+pub const __NR_clock_nanosleep: u32 = 115;
+pub const __NR_syslog: u32 = 116;
+pub const __NR_ptrace: u32 = 117;
+pub const __NR_sched_setparam: u32 = 118;
+pub const __NR_sched_setscheduler: u32 = 119;
+pub const __NR_sched_getscheduler: u32 = 120;
+pub const __NR_sched_getparam: u32 = 121;
+pub const __NR_sched_setaffinity: u32 = 122;
+pub const __NR_sched_getaffinity: u32 = 123;
+pub const __NR_sched_yield: u32 = 124;
+pub const __NR_sched_get_priority_max: u32 = 125;
+pub const __NR_sched_get_priority_min: u32 = 126;
+pub const __NR_sched_rr_get_interval: u32 = 127;
+pub const __NR_restart_syscall: u32 = 128;
+pub const __NR_kill: u32 = 129;
+pub const __NR_tkill: u32 = 130;
+pub const __NR_tgkill: u32 = 131;
+pub const __NR_sigaltstack: u32 = 132;
+pub const __NR_rt_sigsuspend: u32 = 133;
+pub const __NR_rt_sigaction: u32 = 134;
+pub const __NR_rt_sigprocmask: u32 = 135;
+pub const __NR_rt_sigpending: u32 = 136;
+pub const __NR_rt_sigtimedwait: u32 = 137;
+pub const __NR_rt_sigqueueinfo: u32 = 138;
+pub const __NR_rt_sigreturn: u32 = 139;
+pub const __NR_setpriority: u32 = 140;
+pub const __NR_getpriority: u32 = 141;
+pub const __NR_reboot: u32 = 142;
+pub const __NR_setregid: u32 = 143;
+pub const __NR_setgid: u32 = 144;
+pub const __NR_setreuid: u32 = 145;
+pub const __NR_setuid: u32 = 146;
+pub const __NR_setresuid: u32 = 147;
+pub const __NR_getresuid: u32 = 148;
+pub const __NR_setresgid: u32 = 149;
+pub const __NR_getresgid: u32 = 150;
+pub const __NR_setfsuid: u32 = 151;
+pub const __NR_setfsgid: u32 = 152;
+pub const __NR_times: u32 = 153;
+pub const __NR_setpgid: u32 = 154;
+pub const __NR_getpgid: u32 = 155;
+pub const __NR_getsid: u32 = 156;
+pub const __NR_setsid: u32 = 157;
+pub const __NR_getgroups: u32 = 158;
+pub const __NR_setgroups: u32 = 159;
+pub const __NR_uname: u32 = 160;
+pub const __NR_sethostname: u32 = 161;
+pub const __NR_setdomainname: u32 = 162;
+pub const __NR_getrusage: u32 = 165;
+pub const __NR_umask: u32 = 166;
+pub const __NR_prctl: u32 = 167;
+pub const __NR_getcpu: u32 = 168;
+pub const __NR_gettimeofday: u32 = 169;
+pub const __NR_settimeofday: u32 = 170;
+pub const __NR_adjtimex: u32 = 171;
+pub const __NR_getpid: u32 = 172;
+pub const __NR_getppid: u32 = 173;
+pub const __NR_getuid: u32 = 174;
+pub const __NR_geteuid: u32 = 175;
+pub const __NR_getgid: u32 = 176;
+pub const __NR_getegid: u32 = 177;
+pub const __NR_gettid: u32 = 178;
+pub const __NR_sysinfo: u32 = 179;
+pub const __NR_mq_open: u32 = 180;
+pub const __NR_mq_unlink: u32 = 181;
+pub const __NR_mq_timedsend: u32 = 182;
+pub const __NR_mq_timedreceive: u32 = 183;
+pub const __NR_mq_notify: u32 = 184;
+pub const __NR_mq_getsetattr: u32 = 185;
+pub const __NR_msgget: u32 = 186;
+pub const __NR_msgctl: u32 = 187;
+pub const __NR_msgrcv: u32 = 188;
+pub const __NR_msgsnd: u32 = 189;
+pub const __NR_semget: u32 = 190;
+pub const __NR_semctl: u32 = 191;
+pub const __NR_semtimedop: u32 = 192;
+pub const __NR_semop: u32 = 193;
+pub const __NR_shmget: u32 = 194;
+pub const __NR_shmctl: u32 = 195;
+pub const __NR_shmat: u32 = 196;
+pub const __NR_shmdt: u32 = 197;
+pub const __NR_socket: u32 = 198;
+pub const __NR_socketpair: u32 = 199;
+pub const __NR_bind: u32 = 200;
+pub const __NR_listen: u32 = 201;
+pub const __NR_accept: u32 = 202;
+pub const __NR_connect: u32 = 203;
+pub const __NR_getsockname: u32 = 204;
+pub const __NR_getpeername: u32 = 205;
+pub const __NR_sendto: u32 = 206;
+pub const __NR_recvfrom: u32 = 207;
+pub const __NR_setsockopt: u32 = 208;
+pub const __NR_getsockopt: u32 = 209;
+pub const __NR_shutdown: u32 = 210;
+pub const __NR_sendmsg: u32 = 211;
+pub const __NR_recvmsg: u32 = 212;
+pub const __NR_readahead: u32 = 213;
+pub const __NR_brk: u32 = 214;
+pub const __NR_munmap: u32 = 215;
+pub const __NR_mremap: u32 = 216;
+pub const __NR_add_key: u32 = 217;
+pub const __NR_request_key: u32 = 218;
+pub const __NR_keyctl: u32 = 219;
+pub const __NR_clone: u32 = 220;
+pub const __NR_execve: u32 = 221;
+pub const __NR3264_mmap: u32 = 222;
+pub const __NR3264_fadvise64: u32 = 223;
+pub const __NR_swapon: u32 = 224;
+pub const __NR_swapoff: u32 = 225;
+pub const __NR_mprotect: u32 = 226;
+pub const __NR_msync: u32 = 227;
+pub const __NR_mlock: u32 = 228;
+pub const __NR_munlock: u32 = 229;
+pub const __NR_mlockall: u32 = 230;
+pub const __NR_munlockall: u32 = 231;
+pub const __NR_mincore: u32 = 232;
+pub const __NR_madvise: u32 = 233;
+pub const __NR_remap_file_pages: u32 = 234;
+pub const __NR_mbind: u32 = 235;
+pub const __NR_get_mempolicy: u32 = 236;
+pub const __NR_set_mempolicy: u32 = 237;
+pub const __NR_migrate_pages: u32 = 238;
+pub const __NR_move_pages: u32 = 239;
+pub const __NR_rt_tgsigqueueinfo: u32 = 240;
+pub const __NR_perf_event_open: u32 = 241;
+pub const __NR_accept4: u32 = 242;
+pub const __NR_recvmmsg: u32 = 243;
+pub const __NR_arch_specific_syscall: u32 = 244;
+pub const __NR_wait4: u32 = 260;
+pub const __NR_prlimit64: u32 = 261;
+pub const __NR_fanotify_init: u32 = 262;
+pub const __NR_fanotify_mark: u32 = 263;
+pub const __NR_name_to_handle_at: u32 = 264;
+pub const __NR_open_by_handle_at: u32 = 265;
+pub const __NR_clock_adjtime: u32 = 266;
+pub const __NR_syncfs: u32 = 267;
+pub const __NR_setns: u32 = 268;
+pub const __NR_sendmmsg: u32 = 269;
+pub const __NR_process_vm_readv: u32 = 270;
+pub const __NR_process_vm_writev: u32 = 271;
+pub const __NR_kcmp: u32 = 272;
+pub const __NR_finit_module: u32 = 273;
+pub const __NR_sched_setattr: u32 = 274;
+pub const __NR_sched_getattr: u32 = 275;
+pub const __NR_renameat2: u32 = 276;
+pub const __NR_seccomp: u32 = 277;
+pub const __NR_getrandom: u32 = 278;
+pub const __NR_memfd_create: u32 = 279;
+pub const __NR_bpf: u32 = 280;
+pub const __NR_execveat: u32 = 281;
+pub const __NR_userfaultfd: u32 = 282;
+pub const __NR_membarrier: u32 = 283;
+pub const __NR_mlock2: u32 = 284;
+pub const __NR_copy_file_range: u32 = 285;
+pub const __NR_preadv2: u32 = 286;
+pub const __NR_pwritev2: u32 = 287;
+pub const __NR_pkey_mprotect: u32 = 288;
+pub const __NR_pkey_alloc: u32 = 289;
+pub const __NR_pkey_free: u32 = 290;
+pub const __NR_statx: u32 = 291;
+pub const __NR_io_pgetevents: u32 = 292;
+pub const __NR_rseq: u32 = 293;
+pub const __NR_kexec_file_load: u32 = 294;
+pub const __NR_pidfd_send_signal: u32 = 424;
+pub const __NR_io_uring_setup: u32 = 425;
+pub const __NR_io_uring_enter: u32 = 426;
+pub const __NR_io_uring_register: u32 = 427;
+pub const __NR_open_tree: u32 = 428;
+pub const __NR_move_mount: u32 = 429;
+pub const __NR_fsopen: u32 = 430;
+pub const __NR_fsconfig: u32 = 431;
+pub const __NR_fsmount: u32 = 432;
+pub const __NR_fspick: u32 = 433;
+pub const __NR_pidfd_open: u32 = 434;
+pub const __NR_clone3: u32 = 435;
+pub const __NR_close_range: u32 = 436;
+pub const __NR_openat2: u32 = 437;
+pub const __NR_pidfd_getfd: u32 = 438;
+pub const __NR_faccessat2: u32 = 439;
+pub const __NR_process_madvise: u32 = 440;
+pub const __NR_epoll_pwait2: u32 = 441;
+pub const __NR_mount_setattr: u32 = 442;
+pub const __NR_quotactl_fd: u32 = 443;
+pub const __NR_landlock_create_ruleset: u32 = 444;
+pub const __NR_landlock_add_rule: u32 = 445;
+pub const __NR_landlock_restrict_self: u32 = 446;
+pub const __NR_process_mrelease: u32 = 448;
+pub const __NR_futex_waitv: u32 = 449;
+pub const __NR_set_mempolicy_home_node: u32 = 450;
+pub const __NR_syscalls: u32 = 451;
+pub const __NR_fcntl: u32 = 25;
+pub const __NR_statfs: u32 = 43;
+pub const __NR_fstatfs: u32 = 44;
+pub const __NR_truncate: u32 = 45;
+pub const __NR_ftruncate: u32 = 46;
+pub const __NR_lseek: u32 = 62;
+pub const __NR_sendfile: u32 = 71;
+pub const __NR_mmap: u32 = 222;
+pub const __NR_fadvise64: u32 = 223;
+pub const __OLD_UTS_LEN: u32 = 8;
+pub const __NEW_UTS_LEN: u32 = 64;
+pub const WNOHANG: u32 = 1;
+pub const WUNTRACED: u32 = 2;
+pub const WSTOPPED: u32 = 2;
+pub const WEXITED: u32 = 4;
+pub const WCONTINUED: u32 = 8;
+pub const WNOWAIT: u32 = 16777216;
+pub const __WNOTHREAD: u32 = 536870912;
+pub const __WALL: u32 = 1073741824;
+pub const __WCLONE: u32 = 2147483648;
+pub const P_ALL: u32 = 0;
+pub const P_PID: u32 = 1;
+pub const P_PGID: u32 = 2;
+pub const P_PIDFD: u32 = 3;
+pub const MFD_CLOEXEC: u32 = 1;
+pub const MFD_ALLOW_SEALING: u32 = 2;
+pub const MFD_HUGETLB: u32 = 4;
+pub const MFD_HUGE_SHIFT: u32 = 26;
+pub const MFD_HUGE_MASK: u32 = 63;
+pub const MFD_HUGE_64KB: u32 = 1073741824;
+pub const MFD_HUGE_512KB: u32 = 1275068416;
+pub const MFD_HUGE_1MB: u32 = 1342177280;
+pub const MFD_HUGE_2MB: u32 = 1409286144;
+pub const MFD_HUGE_8MB: u32 = 1543503872;
+pub const MFD_HUGE_16MB: u32 = 1610612736;
+pub const MFD_HUGE_32MB: u32 = 1677721600;
+pub const MFD_HUGE_256MB: u32 = 1879048192;
+pub const MFD_HUGE_512MB: u32 = 1946157056;
+pub const MFD_HUGE_1GB: u32 = 2013265920;
+pub const MFD_HUGE_2GB: u32 = 2080374784;
+pub const MFD_HUGE_16GB: u32 = 2281701376;
+pub const TFD_TIMER_ABSTIME: u32 = 1;
+pub const TFD_TIMER_CANCEL_ON_SET: u32 = 2;
+pub const TFD_CLOEXEC: u32 = 524288;
+pub const TFD_NONBLOCK: u32 = 2048;
+pub const USERFAULTFD_IOC: u32 = 170;
+pub const _UFFDIO_REGISTER: u32 = 0;
+pub const _UFFDIO_UNREGISTER: u32 = 1;
+pub const _UFFDIO_WAKE: u32 = 2;
+pub const _UFFDIO_COPY: u32 = 3;
+pub const _UFFDIO_ZEROPAGE: u32 = 4;
+pub const _UFFDIO_WRITEPROTECT: u32 = 6;
+pub const _UFFDIO_CONTINUE: u32 = 7;
+pub const _UFFDIO_API: u32 = 63;
+pub const UFFDIO: u32 = 170;
+pub const UFFD_EVENT_PAGEFAULT: u32 = 18;
+pub const UFFD_EVENT_FORK: u32 = 19;
+pub const UFFD_EVENT_REMAP: u32 = 20;
+pub const UFFD_EVENT_REMOVE: u32 = 21;
+pub const UFFD_EVENT_UNMAP: u32 = 22;
+pub const UFFD_PAGEFAULT_FLAG_WRITE: u32 = 1;
+pub const UFFD_PAGEFAULT_FLAG_WP: u32 = 2;
+pub const UFFD_PAGEFAULT_FLAG_MINOR: u32 = 4;
+pub const UFFD_FEATURE_PAGEFAULT_FLAG_WP: u32 = 1;
+pub const UFFD_FEATURE_EVENT_FORK: u32 = 2;
+pub const UFFD_FEATURE_EVENT_REMAP: u32 = 4;
+pub const UFFD_FEATURE_EVENT_REMOVE: u32 = 8;
+pub const UFFD_FEATURE_MISSING_HUGETLBFS: u32 = 16;
+pub const UFFD_FEATURE_MISSING_SHMEM: u32 = 32;
+pub const UFFD_FEATURE_EVENT_UNMAP: u32 = 64;
+pub const UFFD_FEATURE_SIGBUS: u32 = 128;
+pub const UFFD_FEATURE_THREAD_ID: u32 = 256;
+pub const UFFD_FEATURE_MINOR_HUGETLBFS: u32 = 512;
+pub const UFFD_FEATURE_MINOR_SHMEM: u32 = 1024;
+pub const UFFD_FEATURE_EXACT_ADDRESS: u32 = 2048;
+pub const UFFD_FEATURE_WP_HUGETLBFS_SHMEM: u32 = 4096;
+pub const UFFD_USER_MODE_ONLY: u32 = 1;
+pub const IORING_FILE_INDEX_ALLOC: i32 = -1;
+pub const IORING_SETUP_IOPOLL: u32 = 1;
+pub const IORING_SETUP_SQPOLL: u32 = 2;
+pub const IORING_SETUP_SQ_AFF: u32 = 4;
+pub const IORING_SETUP_CQSIZE: u32 = 8;
+pub const IORING_SETUP_CLAMP: u32 = 16;
+pub const IORING_SETUP_ATTACH_WQ: u32 = 32;
+pub const IORING_SETUP_R_DISABLED: u32 = 64;
+pub const IORING_SETUP_SUBMIT_ALL: u32 = 128;
+pub const IORING_SETUP_COOP_TASKRUN: u32 = 256;
+pub const IORING_SETUP_TASKRUN_FLAG: u32 = 512;
+pub const IORING_SETUP_SQE128: u32 = 1024;
+pub const IORING_SETUP_CQE32: u32 = 2048;
+pub const IORING_SETUP_SINGLE_ISSUER: u32 = 4096;
+pub const IORING_SETUP_DEFER_TASKRUN: u32 = 8192;
+pub const IORING_URING_CMD_FIXED: u32 = 1;
+pub const IORING_FSYNC_DATASYNC: u32 = 1;
+pub const IORING_TIMEOUT_ABS: u32 = 1;
+pub const IORING_TIMEOUT_UPDATE: u32 = 2;
+pub const IORING_TIMEOUT_BOOTTIME: u32 = 4;
+pub const IORING_TIMEOUT_REALTIME: u32 = 8;
+pub const IORING_LINK_TIMEOUT_UPDATE: u32 = 16;
+pub const IORING_TIMEOUT_ETIME_SUCCESS: u32 = 32;
+pub const IORING_TIMEOUT_CLOCK_MASK: u32 = 12;
+pub const IORING_TIMEOUT_UPDATE_MASK: u32 = 18;
+pub const SPLICE_F_FD_IN_FIXED: u32 = 2147483648;
+pub const IORING_POLL_ADD_MULTI: u32 = 1;
+pub const IORING_POLL_UPDATE_EVENTS: u32 = 2;
+pub const IORING_POLL_UPDATE_USER_DATA: u32 = 4;
+pub const IORING_POLL_ADD_LEVEL: u32 = 8;
+pub const IORING_ASYNC_CANCEL_ALL: u32 = 1;
+pub const IORING_ASYNC_CANCEL_FD: u32 = 2;
+pub const IORING_ASYNC_CANCEL_ANY: u32 = 4;
+pub const IORING_ASYNC_CANCEL_FD_FIXED: u32 = 8;
+pub const IORING_RECVSEND_POLL_FIRST: u32 = 1;
+pub const IORING_RECV_MULTISHOT: u32 = 2;
+pub const IORING_RECVSEND_FIXED_BUF: u32 = 4;
+pub const IORING_SEND_ZC_REPORT_USAGE: u32 = 8;
+pub const IORING_NOTIF_USAGE_ZC_COPIED: u32 = 2147483648;
+pub const IORING_ACCEPT_MULTISHOT: u32 = 1;
+pub const IORING_MSG_RING_CQE_SKIP: u32 = 1;
+pub const IORING_CQE_F_BUFFER: u32 = 1;
+pub const IORING_CQE_F_MORE: u32 = 2;
+pub const IORING_CQE_F_SOCK_NONEMPTY: u32 = 4;
+pub const IORING_CQE_F_NOTIF: u32 = 8;
+pub const IORING_OFF_SQ_RING: u32 = 0;
+pub const IORING_OFF_CQ_RING: u32 = 134217728;
+pub const IORING_OFF_SQES: u32 = 268435456;
+pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
+pub const IORING_SQ_CQ_OVERFLOW: u32 = 2;
+pub const IORING_SQ_TASKRUN: u32 = 4;
+pub const IORING_CQ_EVENTFD_DISABLED: u32 = 1;
+pub const IORING_ENTER_GETEVENTS: u32 = 1;
+pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
+pub const IORING_ENTER_SQ_WAIT: u32 = 4;
+pub const IORING_ENTER_EXT_ARG: u32 = 8;
+pub const IORING_ENTER_REGISTERED_RING: u32 = 16;
+pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
+pub const IORING_FEAT_NODROP: u32 = 2;
+pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
+pub const IORING_FEAT_RW_CUR_POS: u32 = 8;
+pub const IORING_FEAT_CUR_PERSONALITY: u32 = 16;
+pub const IORING_FEAT_FAST_POLL: u32 = 32;
+pub const IORING_FEAT_POLL_32BITS: u32 = 64;
+pub const IORING_FEAT_SQPOLL_NONFIXED: u32 = 128;
+pub const IORING_FEAT_EXT_ARG: u32 = 256;
+pub const IORING_FEAT_NATIVE_WORKERS: u32 = 512;
+pub const IORING_FEAT_RSRC_TAGS: u32 = 1024;
+pub const IORING_FEAT_CQE_SKIP: u32 = 2048;
+pub const IORING_FEAT_LINKED_FILE: u32 = 4096;
+pub const IORING_RSRC_REGISTER_SPARSE: u32 = 1;
+pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
+pub const IO_URING_OP_SUPPORTED: u32 = 1;
+pub const DT_UNKNOWN: u32 = 0;
+pub const DT_FIFO: u32 = 1;
+pub const DT_CHR: u32 = 2;
+pub const DT_DIR: u32 = 4;
+pub const DT_BLK: u32 = 6;
+pub const DT_REG: u32 = 8;
+pub const DT_LNK: u32 = 10;
+pub const DT_SOCK: u32 = 12;
+pub const SHUT_RD: u32 = 0;
+pub const SHUT_WR: u32 = 1;
+pub const SHUT_RDWR: u32 = 2;
+pub const STAT_HAVE_NSEC: u32 = 1;
+pub const SOCK_STREAM: u32 = 1;
+pub const SOCK_DGRAM: u32 = 2;
+pub const SOCK_RAW: u32 = 3;
+pub const SOCK_RDM: u32 = 4;
+pub const SOCK_SEQPACKET: u32 = 5;
+pub const F_OK: u32 = 0;
+pub const R_OK: u32 = 4;
+pub const W_OK: u32 = 2;
+pub const X_OK: u32 = 1;
+pub const UTIME_NOW: u32 = 1073741823;
+pub const UTIME_OMIT: u32 = 1073741822;
+pub const MSG_DONTWAIT: u32 = 64;
+pub const AF_UNSPEC: u32 = 0;
+pub const AF_UNIX: u32 = 1;
+pub const AF_INET: u32 = 2;
+pub const AF_AX25: u32 = 3;
+pub const AF_IPX: u32 = 4;
+pub const AF_APPLETALK: u32 = 5;
+pub const AF_NETROM: u32 = 6;
+pub const AF_BRIDGE: u32 = 7;
+pub const AF_ATMPVC: u32 = 8;
+pub const AF_X25: u32 = 9;
+pub const AF_INET6: u32 = 10;
+pub const AF_ROSE: u32 = 11;
+pub const AF_DECnet: u32 = 12;
+pub const AF_NETBEUI: u32 = 13;
+pub const AF_SECURITY: u32 = 14;
+pub const AF_KEY: u32 = 15;
+pub const AF_NETLINK: u32 = 16;
+pub const AF_PACKET: u32 = 17;
+pub const AF_ASH: u32 = 18;
+pub const AF_ECONET: u32 = 19;
+pub const AF_ATMSVC: u32 = 20;
+pub const AF_RDS: u32 = 21;
+pub const AF_SNA: u32 = 22;
+pub const AF_IRDA: u32 = 23;
+pub const AF_PPPOX: u32 = 24;
+pub const AF_WANPIPE: u32 = 25;
+pub const AF_LLC: u32 = 26;
+pub const AF_CAN: u32 = 29;
+pub const AF_TIPC: u32 = 30;
+pub const AF_BLUETOOTH: u32 = 31;
+pub const AF_IUCV: u32 = 32;
+pub const AF_RXRPC: u32 = 33;
+pub const AF_ISDN: u32 = 34;
+pub const AF_PHONET: u32 = 35;
+pub const AF_IEEE802154: u32 = 36;
+pub const AF_MAX: u32 = 37;
+pub const MSG_OOB: u32 = 1;
+pub const MSG_PEEK: u32 = 2;
+pub const MSG_DONTROUTE: u32 = 4;
+pub const MSG_CTRUNC: u32 = 8;
+pub const MSG_PROBE: u32 = 16;
+pub const MSG_TRUNC: u32 = 32;
+pub const MSG_EOR: u32 = 128;
+pub const MSG_WAITALL: u32 = 256;
+pub const MSG_FIN: u32 = 512;
+pub const MSG_SYN: u32 = 1024;
+pub const MSG_CONFIRM: u32 = 2048;
+pub const MSG_RST: u32 = 4096;
+pub const MSG_ERRQUEUE: u32 = 8192;
+pub const MSG_NOSIGNAL: u32 = 16384;
+pub const MSG_MORE: u32 = 32768;
+pub const MSG_CMSG_CLOEXEC: u32 = 1073741824;
+pub const STDIN_FILENO: u32 = 0;
+pub const STDOUT_FILENO: u32 = 1;
+pub const STDERR_FILENO: u32 = 2;
+pub const RWF_HIPRI: u32 = 1;
+pub const RWF_DSYNC: u32 = 2;
+pub const RWF_SYNC: u32 = 4;
+pub const RWF_NOWAIT: u32 = 8;
+pub const RWF_APPEND: u32 = 16;
+pub const EFD_SEMAPHORE: u32 = 1;
+pub const EFD_CLOEXEC: u32 = 524288;
+pub const EFD_NONBLOCK: u32 = 2048;
+pub const EPOLLIN: u32 = 1;
+pub const EPOLLPRI: u32 = 2;
+pub const EPOLLOUT: u32 = 4;
+pub const EPOLLERR: u32 = 8;
+pub const EPOLLHUP: u32 = 16;
+pub const EPOLLNVAL: u32 = 32;
+pub const EPOLLRDNORM: u32 = 64;
+pub const EPOLLRDBAND: u32 = 128;
+pub const EPOLLWRNORM: u32 = 256;
+pub const EPOLLWRBAND: u32 = 512;
+pub const EPOLLMSG: u32 = 1024;
+pub const EPOLLRDHUP: u32 = 8192;
+pub const EPOLLEXCLUSIVE: u32 = 268435456;
+pub const EPOLLWAKEUP: u32 = 536870912;
+pub const EPOLLONESHOT: u32 = 1073741824;
+pub const EPOLLET: u32 = 2147483648;
+pub const TFD_SHARED_FCNTL_FLAGS: u32 = 526336;
+pub const TFD_CREATE_FLAGS: u32 = 526336;
+pub const TFD_SETTIME_FLAGS: u32 = 1;
+pub const SCM_RIGHTS: u32 = 1;
+pub const SCM_CREDENTIALS: u32 = 2;
+pub const SCM_SECURITY: u32 = 3;
+pub const UFFD_API: u32 = 170;
+pub const UFFDIO_REGISTER_MODE_MISSING: u32 = 1;
+pub const UFFDIO_REGISTER_MODE_WP: u32 = 2;
+pub const UFFDIO_REGISTER_MODE_MINOR: u32 = 4;
+pub const UFFDIO_COPY_MODE_DONTWAKE: u32 = 1;
+pub const UFFDIO_COPY_MODE_WP: u32 = 2;
+pub const UFFDIO_ZEROPAGE_MODE_DONTWAKE: u32 = 1;
+pub const SPLICE_F_MOVE: u32 = 1;
+pub const SPLICE_F_NONBLOCK: u32 = 2;
+pub const SPLICE_F_MORE: u32 = 4;
+pub const SPLICE_F_GIFT: u32 = 8;
+pub const MNT_FORCE: u32 = 1;
+pub const MNT_DETACH: u32 = 2;
+pub const MNT_EXPIRE: u32 = 4;
+pub const UMOUNT_NOFOLLOW: u32 = 8;
+pub const UMOUNT_UNUSED: u32 = 2147483648;
+pub type size_t = crate::ctypes::c_ulong;
+pub type ssize_t = crate::ctypes::c_long;
+pub type __s8 = crate::ctypes::c_schar;
+pub type __u8 = crate::ctypes::c_uchar;
+pub type __s16 = crate::ctypes::c_short;
+pub type __u16 = crate::ctypes::c_ushort;
+pub type __s32 = crate::ctypes::c_int;
+pub type __u32 = crate::ctypes::c_uint;
+pub type __s64 = crate::ctypes::c_longlong;
+pub type __u64 = crate::ctypes::c_ulonglong;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_fd_set {
+pub fds_bits: [crate::ctypes::c_ulong; 16usize],
+}
+pub type __kernel_sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: crate::ctypes::c_int)>;
+pub type __kernel_key_t = crate::ctypes::c_int;
+pub type __kernel_mqd_t = crate::ctypes::c_int;
+pub type __kernel_long_t = crate::ctypes::c_long;
+pub type __kernel_ulong_t = crate::ctypes::c_ulong;
+pub type __kernel_ino_t = __kernel_ulong_t;
+pub type __kernel_mode_t = crate::ctypes::c_uint;
+pub type __kernel_pid_t = crate::ctypes::c_int;
+pub type __kernel_ipc_pid_t = crate::ctypes::c_int;
+pub type __kernel_uid_t = crate::ctypes::c_uint;
+pub type __kernel_gid_t = crate::ctypes::c_uint;
+pub type __kernel_suseconds_t = __kernel_long_t;
+pub type __kernel_daddr_t = crate::ctypes::c_int;
+pub type __kernel_uid32_t = crate::ctypes::c_uint;
+pub type __kernel_gid32_t = crate::ctypes::c_uint;
+pub type __kernel_old_uid_t = __kernel_uid_t;
+pub type __kernel_old_gid_t = __kernel_gid_t;
+pub type __kernel_old_dev_t = crate::ctypes::c_uint;
+pub type __kernel_size_t = __kernel_ulong_t;
+pub type __kernel_ssize_t = __kernel_long_t;
+pub type __kernel_ptrdiff_t = __kernel_long_t;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_fsid_t {
+pub val: [crate::ctypes::c_int; 2usize],
+}
+pub type __kernel_off_t = __kernel_long_t;
+pub type __kernel_loff_t = crate::ctypes::c_longlong;
+pub type __kernel_old_time_t = __kernel_long_t;
+pub type __kernel_time_t = __kernel_long_t;
+pub type __kernel_time64_t = crate::ctypes::c_longlong;
+pub type __kernel_clock_t = __kernel_long_t;
+pub type __kernel_timer_t = crate::ctypes::c_int;
+pub type __kernel_clockid_t = crate::ctypes::c_int;
+pub type __kernel_caddr_t = *mut crate::ctypes::c_char;
+pub type __kernel_uid16_t = crate::ctypes::c_ushort;
+pub type __kernel_gid16_t = crate::ctypes::c_ushort;
+pub type __le16 = __u16;
+pub type __be16 = __u16;
+pub type __le32 = __u32;
+pub type __be32 = __u32;
+pub type __le64 = __u64;
+pub type __be64 = __u64;
+pub type __sum16 = __u16;
+pub type __wsum = __u32;
+pub type __poll_t = crate::ctypes::c_uint;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __user_cap_header_struct {
+pub version: __u32,
+pub pid: crate::ctypes::c_int,
+}
+pub type cap_user_header_t = *mut __user_cap_header_struct;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __user_cap_data_struct {
+pub effective: __u32,
+pub permitted: __u32,
+pub inheritable: __u32,
+}
+pub type cap_user_data_t = *mut __user_cap_data_struct;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct vfs_cap_data {
+pub magic_etc: __le32,
+pub data: [vfs_cap_data__bindgen_ty_1; 2usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct vfs_cap_data__bindgen_ty_1 {
+pub permitted: __le32,
+pub inheritable: __le32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct vfs_ns_cap_data {
+pub magic_etc: __le32,
+pub data: [vfs_ns_cap_data__bindgen_ty_1; 2usize],
+pub rootid: __le32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct vfs_ns_cap_data__bindgen_ty_1 {
+pub permitted: __le32,
+pub inheritable: __le32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct f_owner_ex {
+pub type_: crate::ctypes::c_int,
+pub pid: __kernel_pid_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct flock {
+pub l_type: crate::ctypes::c_short,
+pub l_whence: crate::ctypes::c_short,
+pub l_start: __kernel_off_t,
+pub l_len: __kernel_off_t,
+pub l_pid: __kernel_pid_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct flock64 {
+pub l_type: crate::ctypes::c_short,
+pub l_whence: crate::ctypes::c_short,
+pub l_start: __kernel_loff_t,
+pub l_len: __kernel_loff_t,
+pub l_pid: __kernel_pid_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct open_how {
+pub flags: __u64,
+pub mode: __u64,
+pub resolve: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct epoll_event {
+pub events: __poll_t,
+pub data: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct fscrypt_policy_v1 {
+pub version: __u8,
+pub contents_encryption_mode: __u8,
+pub filenames_encryption_mode: __u8,
+pub flags: __u8,
+pub master_key_descriptor: [__u8; 8usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct fscrypt_key {
+pub mode: __u32,
+pub raw: [__u8; 64usize],
+pub size: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct fscrypt_policy_v2 {
+pub version: __u8,
+pub contents_encryption_mode: __u8,
+pub filenames_encryption_mode: __u8,
+pub flags: __u8,
+pub __reserved: [__u8; 4usize],
+pub master_key_identifier: [__u8; 16usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct fscrypt_get_policy_ex_arg {
+pub policy_size: __u64,
+pub policy: fscrypt_get_policy_ex_arg__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union fscrypt_get_policy_ex_arg__bindgen_ty_1 {
+pub version: __u8,
+pub v1: fscrypt_policy_v1,
+pub v2: fscrypt_policy_v2,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct fscrypt_key_specifier {
+pub type_: __u32,
+pub __reserved: __u32,
+pub u: fscrypt_key_specifier__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union fscrypt_key_specifier__bindgen_ty_1 {
+pub __reserved: [__u8; 32usize],
+pub descriptor: [__u8; 8usize],
+pub identifier: [__u8; 16usize],
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct fscrypt_provisioning_key_payload {
+pub type_: __u32,
+pub __reserved: __u32,
+pub raw: __IncompleteArrayField<__u8>,
+}
+#[repr(C)]
+pub struct fscrypt_add_key_arg {
+pub key_spec: fscrypt_key_specifier,
+pub raw_size: __u32,
+pub key_id: __u32,
+pub __reserved: [__u32; 8usize],
+pub raw: __IncompleteArrayField<__u8>,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct fscrypt_remove_key_arg {
+pub key_spec: fscrypt_key_specifier,
+pub removal_status_flags: __u32,
+pub __reserved: [__u32; 5usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct fscrypt_get_key_status_arg {
+pub key_spec: fscrypt_key_specifier,
+pub __reserved: [__u32; 6usize],
+pub status: __u32,
+pub status_flags: __u32,
+pub user_count: __u32,
+pub __out_reserved: [__u32; 13usize],
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum fsconfig_command {
+FSCONFIG_SET_FLAG = 0,
+FSCONFIG_SET_STRING = 1,
+FSCONFIG_SET_BINARY = 2,
+FSCONFIG_SET_PATH = 3,
+FSCONFIG_SET_PATH_EMPTY = 4,
+FSCONFIG_SET_FD = 5,
+FSCONFIG_CMD_CREATE = 6,
+FSCONFIG_CMD_RECONFIGURE = 7,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct mount_attr {
+pub attr_set: __u64,
+pub attr_clr: __u64,
+pub propagation: __u64,
+pub userns_fd: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct file_clone_range {
+pub src_fd: __s64,
+pub src_offset: __u64,
+pub src_length: __u64,
+pub dest_offset: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct fstrim_range {
+pub start: __u64,
+pub len: __u64,
+pub minlen: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct file_dedupe_range_info {
+pub dest_fd: __s64,
+pub dest_offset: __u64,
+pub bytes_deduped: __u64,
+pub status: __s32,
+pub reserved: __u32,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct file_dedupe_range {
+pub src_offset: __u64,
+pub src_length: __u64,
+pub dest_count: __u16,
+pub reserved1: __u16,
+pub reserved2: __u32,
+pub info: __IncompleteArrayField<file_dedupe_range_info>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct files_stat_struct {
+pub nr_files: crate::ctypes::c_ulong,
+pub nr_free_files: crate::ctypes::c_ulong,
+pub max_files: crate::ctypes::c_ulong,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct inodes_stat_t {
+pub nr_inodes: crate::ctypes::c_long,
+pub nr_unused: crate::ctypes::c_long,
+pub dummy: [crate::ctypes::c_long; 5usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct fsxattr {
+pub fsx_xflags: __u32,
+pub fsx_extsize: __u32,
+pub fsx_nextents: __u32,
+pub fsx_projid: __u32,
+pub fsx_cowextsize: __u32,
+pub fsx_pad: [crate::ctypes::c_uchar; 8usize],
+}
+pub type __kernel_rwf_t = crate::ctypes::c_int;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct futex_waitv {
+pub val: __u64,
+pub uaddr: __u64,
+pub flags: __u32,
+pub __reserved: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct robust_list {
+pub next: *mut robust_list,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct robust_list_head {
+pub list: robust_list,
+pub futex_offset: crate::ctypes::c_long,
+pub list_op_pending: *mut robust_list,
+}
+pub type __kernel_sa_family_t = crate::ctypes::c_ushort;
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct __kernel_sockaddr_storage {
+pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union __kernel_sockaddr_storage__bindgen_ty_1 {
+pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
+pub __align: *mut crate::ctypes::c_void,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
+pub ss_family: __kernel_sa_family_t,
+pub __data: [crate::ctypes::c_char; 126usize],
+}
+pub const IPPROTO_IP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_IP;
+pub const IPPROTO_ICMP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_ICMP;
+pub const IPPROTO_IGMP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_IGMP;
+pub const IPPROTO_IPIP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_IPIP;
+pub const IPPROTO_TCP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_TCP;
+pub const IPPROTO_EGP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_EGP;
+pub const IPPROTO_PUP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_PUP;
+pub const IPPROTO_UDP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_UDP;
+pub const IPPROTO_IDP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_IDP;
+pub const IPPROTO_TP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_TP;
+pub const IPPROTO_DCCP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_DCCP;
+pub const IPPROTO_IPV6: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_IPV6;
+pub const IPPROTO_RSVP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_RSVP;
+pub const IPPROTO_GRE: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_GRE;
+pub const IPPROTO_ESP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_ESP;
+pub const IPPROTO_AH: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_AH;
+pub const IPPROTO_MTP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_MTP;
+pub const IPPROTO_BEETPH: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_BEETPH;
+pub const IPPROTO_ENCAP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_ENCAP;
+pub const IPPROTO_PIM: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_PIM;
+pub const IPPROTO_COMP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_COMP;
+pub const IPPROTO_L2TP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_L2TP;
+pub const IPPROTO_SCTP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_SCTP;
+pub const IPPROTO_UDPLITE: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_UDPLITE;
+pub const IPPROTO_MPLS: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_MPLS;
+pub const IPPROTO_ETHERNET: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_ETHERNET;
+pub const IPPROTO_RAW: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_RAW;
+pub const IPPROTO_MPTCP: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_MPTCP;
+pub const IPPROTO_MAX: _bindgen_ty_1 = _bindgen_ty_1::IPPROTO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_1 {
+IPPROTO_IP = 0,
+IPPROTO_ICMP = 1,
+IPPROTO_IGMP = 2,
+IPPROTO_IPIP = 4,
+IPPROTO_TCP = 6,
+IPPROTO_EGP = 8,
+IPPROTO_PUP = 12,
+IPPROTO_UDP = 17,
+IPPROTO_IDP = 22,
+IPPROTO_TP = 29,
+IPPROTO_DCCP = 33,
+IPPROTO_IPV6 = 41,
+IPPROTO_RSVP = 46,
+IPPROTO_GRE = 47,
+IPPROTO_ESP = 50,
+IPPROTO_AH = 51,
+IPPROTO_MTP = 92,
+IPPROTO_BEETPH = 94,
+IPPROTO_ENCAP = 98,
+IPPROTO_PIM = 103,
+IPPROTO_COMP = 108,
+IPPROTO_L2TP = 115,
+IPPROTO_SCTP = 132,
+IPPROTO_UDPLITE = 136,
+IPPROTO_MPLS = 137,
+IPPROTO_ETHERNET = 143,
+IPPROTO_RAW = 255,
+IPPROTO_MPTCP = 262,
+IPPROTO_MAX = 263,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct in_addr {
+pub s_addr: __be32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_mreq {
+pub imr_multiaddr: in_addr,
+pub imr_interface: in_addr,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_mreqn {
+pub imr_multiaddr: in_addr,
+pub imr_address: in_addr,
+pub imr_ifindex: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_mreq_source {
+pub imr_multiaddr: __be32,
+pub imr_interface: __be32,
+pub imr_sourceaddr: __be32,
+}
+#[repr(C)]
+pub struct ip_msfilter {
+pub imsf_multiaddr: __be32,
+pub imsf_interface: __be32,
+pub imsf_fmode: __u32,
+pub imsf_numsrc: __u32,
+pub __bindgen_anon_1: ip_msfilter__bindgen_ty_1,
+}
+#[repr(C)]
+pub struct ip_msfilter__bindgen_ty_1 {
+pub imsf_slist: __BindgenUnionField<[__be32; 1usize]>,
+pub __bindgen_anon_1: __BindgenUnionField<ip_msfilter__bindgen_ty_1__bindgen_ty_1>,
+pub bindgen_union_field: u32,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct ip_msfilter__bindgen_ty_1__bindgen_ty_1 {
+pub __empty_imsf_slist_flex: ip_msfilter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
+pub imsf_slist_flex: __IncompleteArrayField<__be32>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_msfilter__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct group_req {
+pub gr_interface: __u32,
+pub gr_group: __kernel_sockaddr_storage,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct group_source_req {
+pub gsr_interface: __u32,
+pub gsr_group: __kernel_sockaddr_storage,
+pub gsr_source: __kernel_sockaddr_storage,
+}
+#[repr(C)]
+pub struct group_filter {
+pub __bindgen_anon_1: group_filter__bindgen_ty_1,
+}
+#[repr(C)]
+pub struct group_filter__bindgen_ty_1 {
+pub __bindgen_anon_1: __BindgenUnionField<group_filter__bindgen_ty_1__bindgen_ty_1>,
+pub __bindgen_anon_2: __BindgenUnionField<group_filter__bindgen_ty_1__bindgen_ty_2>,
+pub bindgen_union_field: [u64; 34usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct group_filter__bindgen_ty_1__bindgen_ty_1 {
+pub gf_interface_aux: __u32,
+pub gf_group_aux: __kernel_sockaddr_storage,
+pub gf_fmode_aux: __u32,
+pub gf_numsrc_aux: __u32,
+pub gf_slist: [__kernel_sockaddr_storage; 1usize],
+}
+#[repr(C)]
+pub struct group_filter__bindgen_ty_1__bindgen_ty_2 {
+pub gf_interface: __u32,
+pub gf_group: __kernel_sockaddr_storage,
+pub gf_fmode: __u32,
+pub gf_numsrc: __u32,
+pub gf_slist_flex: __IncompleteArrayField<__kernel_sockaddr_storage>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct in_pktinfo {
+pub ipi_ifindex: crate::ctypes::c_int,
+pub ipi_spec_dst: in_addr,
+pub ipi_addr: in_addr,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sockaddr_in {
+pub sin_family: __kernel_sa_family_t,
+pub sin_port: __be16,
+pub sin_addr: in_addr,
+pub __pad: [crate::ctypes::c_uchar; 8usize],
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct inotify_event {
+pub wd: __s32,
+pub mask: __u32,
+pub cookie: __u32,
+pub len: __u32,
+pub name: __IncompleteArrayField<crate::ctypes::c_char>,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct iphdr {
+pub _bitfield_align_1: [u8; 0],
+pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
+pub tos: __u8,
+pub tot_len: __be16,
+pub id: __be16,
+pub frag_off: __be16,
+pub ttl: __u8,
+pub protocol: __u8,
+pub check: __sum16,
+pub __bindgen_anon_1: iphdr__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union iphdr__bindgen_ty_1 {
+pub __bindgen_anon_1: iphdr__bindgen_ty_1__bindgen_ty_1,
+pub addrs: iphdr__bindgen_ty_1__bindgen_ty_2,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct iphdr__bindgen_ty_1__bindgen_ty_1 {
+pub saddr: __be32,
+pub daddr: __be32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct iphdr__bindgen_ty_1__bindgen_ty_2 {
+pub saddr: __be32,
+pub daddr: __be32,
+}
+impl iphdr {
+#[inline]
+pub fn ihl(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_ihl(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(0usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn version(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_version(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(4usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn new_bitfield_1(ihl: __u8, version: __u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
+let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
+__bindgen_bitfield_unit.set(0usize, 4u8, {
+let ihl: u8 = unsafe { ::core::mem::transmute(ihl) };
+ihl as u64
+});
+__bindgen_bitfield_unit.set(4usize, 4u8, {
+let version: u8 = unsafe { ::core::mem::transmute(version) };
+version as u64
+});
+__bindgen_bitfield_unit
+}
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct ip_auth_hdr {
+pub nexthdr: __u8,
+pub hdrlen: __u8,
+pub reserved: __be16,
+pub spi: __be32,
+pub seq_no: __be32,
+pub auth_data: __IncompleteArrayField<__u8>,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct ip_esp_hdr {
+pub spi: __be32,
+pub seq_no: __be32,
+pub enc_data: __IncompleteArrayField<__u8>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_comp_hdr {
+pub nexthdr: __u8,
+pub flags: __u8,
+pub cpi: __be16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ip_beet_phdr {
+pub nexthdr: __u8,
+pub hdrlen: __u8,
+pub padlen: __u8,
+pub reserved: __u8,
+}
+pub const IPV4_DEVCONF_FORWARDING: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_FORWARDING;
+pub const IPV4_DEVCONF_MC_FORWARDING: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_MC_FORWARDING;
+pub const IPV4_DEVCONF_PROXY_ARP: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_PROXY_ARP;
+pub const IPV4_DEVCONF_ACCEPT_REDIRECTS: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ACCEPT_REDIRECTS;
+pub const IPV4_DEVCONF_SECURE_REDIRECTS: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_SECURE_REDIRECTS;
+pub const IPV4_DEVCONF_SEND_REDIRECTS: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_SEND_REDIRECTS;
+pub const IPV4_DEVCONF_SHARED_MEDIA: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_SHARED_MEDIA;
+pub const IPV4_DEVCONF_RP_FILTER: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_RP_FILTER;
+pub const IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE;
+pub const IPV4_DEVCONF_BOOTP_RELAY: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_BOOTP_RELAY;
+pub const IPV4_DEVCONF_LOG_MARTIANS: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_LOG_MARTIANS;
+pub const IPV4_DEVCONF_TAG: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_TAG;
+pub const IPV4_DEVCONF_ARPFILTER: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARPFILTER;
+pub const IPV4_DEVCONF_MEDIUM_ID: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_MEDIUM_ID;
+pub const IPV4_DEVCONF_NOXFRM: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_NOXFRM;
+pub const IPV4_DEVCONF_NOPOLICY: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_NOPOLICY;
+pub const IPV4_DEVCONF_FORCE_IGMP_VERSION: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_FORCE_IGMP_VERSION;
+pub const IPV4_DEVCONF_ARP_ANNOUNCE: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARP_ANNOUNCE;
+pub const IPV4_DEVCONF_ARP_IGNORE: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARP_IGNORE;
+pub const IPV4_DEVCONF_PROMOTE_SECONDARIES: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_PROMOTE_SECONDARIES;
+pub const IPV4_DEVCONF_ARP_ACCEPT: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARP_ACCEPT;
+pub const IPV4_DEVCONF_ARP_NOTIFY: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARP_NOTIFY;
+pub const IPV4_DEVCONF_ACCEPT_LOCAL: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ACCEPT_LOCAL;
+pub const IPV4_DEVCONF_SRC_VMARK: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_SRC_VMARK;
+pub const IPV4_DEVCONF_PROXY_ARP_PVLAN: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_PROXY_ARP_PVLAN;
+pub const IPV4_DEVCONF_ROUTE_LOCALNET: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ROUTE_LOCALNET;
+pub const IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL;
+pub const IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL;
+pub const IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN;
+pub const IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST;
+pub const IPV4_DEVCONF_DROP_GRATUITOUS_ARP: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_DROP_GRATUITOUS_ARP;
+pub const IPV4_DEVCONF_BC_FORWARDING: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_BC_FORWARDING;
+pub const IPV4_DEVCONF_ARP_EVICT_NOCARRIER: _bindgen_ty_2 = _bindgen_ty_2::IPV4_DEVCONF_ARP_EVICT_NOCARRIER;
+pub const __IPV4_DEVCONF_MAX: _bindgen_ty_2 = _bindgen_ty_2::__IPV4_DEVCONF_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_2 {
+IPV4_DEVCONF_FORWARDING = 1,
+IPV4_DEVCONF_MC_FORWARDING = 2,
+IPV4_DEVCONF_PROXY_ARP = 3,
+IPV4_DEVCONF_ACCEPT_REDIRECTS = 4,
+IPV4_DEVCONF_SECURE_REDIRECTS = 5,
+IPV4_DEVCONF_SEND_REDIRECTS = 6,
+IPV4_DEVCONF_SHARED_MEDIA = 7,
+IPV4_DEVCONF_RP_FILTER = 8,
+IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE = 9,
+IPV4_DEVCONF_BOOTP_RELAY = 10,
+IPV4_DEVCONF_LOG_MARTIANS = 11,
+IPV4_DEVCONF_TAG = 12,
+IPV4_DEVCONF_ARPFILTER = 13,
+IPV4_DEVCONF_MEDIUM_ID = 14,
+IPV4_DEVCONF_NOXFRM = 15,
+IPV4_DEVCONF_NOPOLICY = 16,
+IPV4_DEVCONF_FORCE_IGMP_VERSION = 17,
+IPV4_DEVCONF_ARP_ANNOUNCE = 18,
+IPV4_DEVCONF_ARP_IGNORE = 19,
+IPV4_DEVCONF_PROMOTE_SECONDARIES = 20,
+IPV4_DEVCONF_ARP_ACCEPT = 21,
+IPV4_DEVCONF_ARP_NOTIFY = 22,
+IPV4_DEVCONF_ACCEPT_LOCAL = 23,
+IPV4_DEVCONF_SRC_VMARK = 24,
+IPV4_DEVCONF_PROXY_ARP_PVLAN = 25,
+IPV4_DEVCONF_ROUTE_LOCALNET = 26,
+IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL = 27,
+IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL = 28,
+IPV4_DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN = 29,
+IPV4_DEVCONF_DROP_UNICAST_IN_L2_MULTICAST = 30,
+IPV4_DEVCONF_DROP_GRATUITOUS_ARP = 31,
+IPV4_DEVCONF_BC_FORWARDING = 32,
+IPV4_DEVCONF_ARP_EVICT_NOCARRIER = 33,
+__IPV4_DEVCONF_MAX = 34,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct in6_addr {
+pub in6_u: in6_addr__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union in6_addr__bindgen_ty_1 {
+pub u6_addr8: [__u8; 16usize],
+pub u6_addr16: [__be16; 8usize],
+pub u6_addr32: [__be32; 4usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct sockaddr_in6 {
+pub sin6_family: crate::ctypes::c_ushort,
+pub sin6_port: __be16,
+pub sin6_flowinfo: __be32,
+pub sin6_addr: in6_addr,
+pub sin6_scope_id: __u32,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct ipv6_mreq {
+pub ipv6mr_multiaddr: in6_addr,
+pub ipv6mr_ifindex: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct in6_flowlabel_req {
+pub flr_dst: in6_addr,
+pub flr_label: __be32,
+pub flr_action: __u8,
+pub flr_share: __u8,
+pub flr_flags: __u16,
+pub flr_expires: __u16,
+pub flr_linger: __u16,
+pub __flr_pad: __u32,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct in6_pktinfo {
+pub ipi6_addr: in6_addr,
+pub ipi6_ifindex: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct ip6_mtuinfo {
+pub ip6m_addr: sockaddr_in6,
+pub ip6m_mtu: __u32,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct in6_ifreq {
+pub ifr6_addr: in6_addr,
+pub ifr6_prefixlen: __u32,
+pub ifr6_ifindex: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ipv6_rt_hdr {
+pub nexthdr: __u8,
+pub hdrlen: __u8,
+pub type_: __u8,
+pub segments_left: __u8,
+}
+#[repr(C, packed)]
+#[derive(Debug, Copy, Clone)]
+pub struct ipv6_opt_hdr {
+pub nexthdr: __u8,
+pub hdrlen: __u8,
+}
+#[repr(C)]
+pub struct rt0_hdr {
+pub rt_hdr: ipv6_rt_hdr,
+pub reserved: __u32,
+pub addr: __IncompleteArrayField<in6_addr>,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct rt2_hdr {
+pub rt_hdr: ipv6_rt_hdr,
+pub reserved: __u32,
+pub addr: in6_addr,
+}
+#[repr(C, packed)]
+#[derive(Copy, Clone)]
+pub struct ipv6_destopt_hao {
+pub type_: __u8,
+pub length: __u8,
+pub addr: in6_addr,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct ipv6hdr {
+pub _bitfield_align_1: [u8; 0],
+pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
+pub flow_lbl: [__u8; 3usize],
+pub payload_len: __be16,
+pub nexthdr: __u8,
+pub hop_limit: __u8,
+pub __bindgen_anon_1: ipv6hdr__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union ipv6hdr__bindgen_ty_1 {
+pub __bindgen_anon_1: ipv6hdr__bindgen_ty_1__bindgen_ty_1,
+pub addrs: ipv6hdr__bindgen_ty_1__bindgen_ty_2,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct ipv6hdr__bindgen_ty_1__bindgen_ty_1 {
+pub saddr: in6_addr,
+pub daddr: in6_addr,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct ipv6hdr__bindgen_ty_1__bindgen_ty_2 {
+pub saddr: in6_addr,
+pub daddr: in6_addr,
+}
+impl ipv6hdr {
+#[inline]
+pub fn priority(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_priority(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(0usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn version(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_version(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(4usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn new_bitfield_1(priority: __u8, version: __u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
+let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
+__bindgen_bitfield_unit.set(0usize, 4u8, {
+let priority: u8 = unsafe { ::core::mem::transmute(priority) };
+priority as u64
+});
+__bindgen_bitfield_unit.set(4usize, 4u8, {
+let version: u8 = unsafe { ::core::mem::transmute(version) };
+version as u64
+});
+__bindgen_bitfield_unit
+}
+}
+pub const DEVCONF_FORWARDING: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_FORWARDING;
+pub const DEVCONF_HOPLIMIT: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_HOPLIMIT;
+pub const DEVCONF_MTU6: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MTU6;
+pub const DEVCONF_ACCEPT_RA: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA;
+pub const DEVCONF_ACCEPT_REDIRECTS: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_REDIRECTS;
+pub const DEVCONF_AUTOCONF: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_AUTOCONF;
+pub const DEVCONF_DAD_TRANSMITS: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_DAD_TRANSMITS;
+pub const DEVCONF_RTR_SOLICITS: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RTR_SOLICITS;
+pub const DEVCONF_RTR_SOLICIT_INTERVAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RTR_SOLICIT_INTERVAL;
+pub const DEVCONF_RTR_SOLICIT_DELAY: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RTR_SOLICIT_DELAY;
+pub const DEVCONF_USE_TEMPADDR: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_USE_TEMPADDR;
+pub const DEVCONF_TEMP_VALID_LFT: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_TEMP_VALID_LFT;
+pub const DEVCONF_TEMP_PREFERED_LFT: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_TEMP_PREFERED_LFT;
+pub const DEVCONF_REGEN_MAX_RETRY: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_REGEN_MAX_RETRY;
+pub const DEVCONF_MAX_DESYNC_FACTOR: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MAX_DESYNC_FACTOR;
+pub const DEVCONF_MAX_ADDRESSES: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MAX_ADDRESSES;
+pub const DEVCONF_FORCE_MLD_VERSION: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_FORCE_MLD_VERSION;
+pub const DEVCONF_ACCEPT_RA_DEFRTR: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_DEFRTR;
+pub const DEVCONF_ACCEPT_RA_PINFO: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_PINFO;
+pub const DEVCONF_ACCEPT_RA_RTR_PREF: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_RTR_PREF;
+pub const DEVCONF_RTR_PROBE_INTERVAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RTR_PROBE_INTERVAL;
+pub const DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN;
+pub const DEVCONF_PROXY_NDP: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_PROXY_NDP;
+pub const DEVCONF_OPTIMISTIC_DAD: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_OPTIMISTIC_DAD;
+pub const DEVCONF_ACCEPT_SOURCE_ROUTE: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_SOURCE_ROUTE;
+pub const DEVCONF_MC_FORWARDING: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MC_FORWARDING;
+pub const DEVCONF_DISABLE_IPV6: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_DISABLE_IPV6;
+pub const DEVCONF_ACCEPT_DAD: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_DAD;
+pub const DEVCONF_FORCE_TLLAO: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_FORCE_TLLAO;
+pub const DEVCONF_NDISC_NOTIFY: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_NDISC_NOTIFY;
+pub const DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL;
+pub const DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL;
+pub const DEVCONF_SUPPRESS_FRAG_NDISC: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_SUPPRESS_FRAG_NDISC;
+pub const DEVCONF_ACCEPT_RA_FROM_LOCAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_FROM_LOCAL;
+pub const DEVCONF_USE_OPTIMISTIC: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_USE_OPTIMISTIC;
+pub const DEVCONF_ACCEPT_RA_MTU: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_MTU;
+pub const DEVCONF_STABLE_SECRET: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_STABLE_SECRET;
+pub const DEVCONF_USE_OIF_ADDRS_ONLY: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_USE_OIF_ADDRS_ONLY;
+pub const DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT;
+pub const DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN;
+pub const DEVCONF_DROP_UNICAST_IN_L2_MULTICAST: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_DROP_UNICAST_IN_L2_MULTICAST;
+pub const DEVCONF_DROP_UNSOLICITED_NA: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_DROP_UNSOLICITED_NA;
+pub const DEVCONF_KEEP_ADDR_ON_DOWN: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_KEEP_ADDR_ON_DOWN;
+pub const DEVCONF_RTR_SOLICIT_MAX_INTERVAL: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RTR_SOLICIT_MAX_INTERVAL;
+pub const DEVCONF_SEG6_ENABLED: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_SEG6_ENABLED;
+pub const DEVCONF_SEG6_REQUIRE_HMAC: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_SEG6_REQUIRE_HMAC;
+pub const DEVCONF_ENHANCED_DAD: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ENHANCED_DAD;
+pub const DEVCONF_ADDR_GEN_MODE: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ADDR_GEN_MODE;
+pub const DEVCONF_DISABLE_POLICY: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_DISABLE_POLICY;
+pub const DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN;
+pub const DEVCONF_NDISC_TCLASS: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_NDISC_TCLASS;
+pub const DEVCONF_RPL_SEG_ENABLED: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RPL_SEG_ENABLED;
+pub const DEVCONF_RA_DEFRTR_METRIC: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_RA_DEFRTR_METRIC;
+pub const DEVCONF_IOAM6_ENABLED: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_IOAM6_ENABLED;
+pub const DEVCONF_IOAM6_ID: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_IOAM6_ID;
+pub const DEVCONF_IOAM6_ID_WIDE: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_IOAM6_ID_WIDE;
+pub const DEVCONF_NDISC_EVICT_NOCARRIER: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_NDISC_EVICT_NOCARRIER;
+pub const DEVCONF_ACCEPT_UNTRACKED_NA: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_ACCEPT_UNTRACKED_NA;
+pub const DEVCONF_MAX: _bindgen_ty_3 = _bindgen_ty_3::DEVCONF_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_3 {
+DEVCONF_FORWARDING = 0,
+DEVCONF_HOPLIMIT = 1,
+DEVCONF_MTU6 = 2,
+DEVCONF_ACCEPT_RA = 3,
+DEVCONF_ACCEPT_REDIRECTS = 4,
+DEVCONF_AUTOCONF = 5,
+DEVCONF_DAD_TRANSMITS = 6,
+DEVCONF_RTR_SOLICITS = 7,
+DEVCONF_RTR_SOLICIT_INTERVAL = 8,
+DEVCONF_RTR_SOLICIT_DELAY = 9,
+DEVCONF_USE_TEMPADDR = 10,
+DEVCONF_TEMP_VALID_LFT = 11,
+DEVCONF_TEMP_PREFERED_LFT = 12,
+DEVCONF_REGEN_MAX_RETRY = 13,
+DEVCONF_MAX_DESYNC_FACTOR = 14,
+DEVCONF_MAX_ADDRESSES = 15,
+DEVCONF_FORCE_MLD_VERSION = 16,
+DEVCONF_ACCEPT_RA_DEFRTR = 17,
+DEVCONF_ACCEPT_RA_PINFO = 18,
+DEVCONF_ACCEPT_RA_RTR_PREF = 19,
+DEVCONF_RTR_PROBE_INTERVAL = 20,
+DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN = 21,
+DEVCONF_PROXY_NDP = 22,
+DEVCONF_OPTIMISTIC_DAD = 23,
+DEVCONF_ACCEPT_SOURCE_ROUTE = 24,
+DEVCONF_MC_FORWARDING = 25,
+DEVCONF_DISABLE_IPV6 = 26,
+DEVCONF_ACCEPT_DAD = 27,
+DEVCONF_FORCE_TLLAO = 28,
+DEVCONF_NDISC_NOTIFY = 29,
+DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL = 30,
+DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL = 31,
+DEVCONF_SUPPRESS_FRAG_NDISC = 32,
+DEVCONF_ACCEPT_RA_FROM_LOCAL = 33,
+DEVCONF_USE_OPTIMISTIC = 34,
+DEVCONF_ACCEPT_RA_MTU = 35,
+DEVCONF_STABLE_SECRET = 36,
+DEVCONF_USE_OIF_ADDRS_ONLY = 37,
+DEVCONF_ACCEPT_RA_MIN_HOP_LIMIT = 38,
+DEVCONF_IGNORE_ROUTES_WITH_LINKDOWN = 39,
+DEVCONF_DROP_UNICAST_IN_L2_MULTICAST = 40,
+DEVCONF_DROP_UNSOLICITED_NA = 41,
+DEVCONF_KEEP_ADDR_ON_DOWN = 42,
+DEVCONF_RTR_SOLICIT_MAX_INTERVAL = 43,
+DEVCONF_SEG6_ENABLED = 44,
+DEVCONF_SEG6_REQUIRE_HMAC = 45,
+DEVCONF_ENHANCED_DAD = 46,
+DEVCONF_ADDR_GEN_MODE = 47,
+DEVCONF_DISABLE_POLICY = 48,
+DEVCONF_ACCEPT_RA_RT_INFO_MIN_PLEN = 49,
+DEVCONF_NDISC_TCLASS = 50,
+DEVCONF_RPL_SEG_ENABLED = 51,
+DEVCONF_RA_DEFRTR_METRIC = 52,
+DEVCONF_IOAM6_ENABLED = 53,
+DEVCONF_IOAM6_ID = 54,
+DEVCONF_IOAM6_ID_WIDE = 55,
+DEVCONF_NDISC_EVICT_NOCARRIER = 56,
+DEVCONF_ACCEPT_UNTRACKED_NA = 57,
+DEVCONF_MAX = 58,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum socket_state {
+SS_FREE = 0,
+SS_UNCONNECTED = 1,
+SS_CONNECTING = 2,
+SS_CONNECTED = 3,
+SS_DISCONNECTING = 4,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct pollfd {
+pub fd: crate::ctypes::c_int,
+pub events: crate::ctypes::c_short,
+pub revents: crate::ctypes::c_short,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct prctl_mm_map {
+pub start_code: __u64,
+pub end_code: __u64,
+pub start_data: __u64,
+pub end_data: __u64,
+pub start_brk: __u64,
+pub brk: __u64,
+pub start_stack: __u64,
+pub arg_start: __u64,
+pub arg_end: __u64,
+pub env_start: __u64,
+pub env_end: __u64,
+pub auxv: *mut __u64,
+pub auxv_size: __u32,
+pub exe_fd: __u32,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct rand_pool_info {
+pub entropy_count: crate::ctypes::c_int,
+pub buf_size: crate::ctypes::c_int,
+pub buf: __IncompleteArrayField<__u32>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_timespec {
+pub tv_sec: __kernel_time64_t,
+pub tv_nsec: crate::ctypes::c_longlong,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_itimerspec {
+pub it_interval: __kernel_timespec,
+pub it_value: __kernel_timespec,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_old_timeval {
+pub tv_sec: __kernel_long_t,
+pub tv_usec: __kernel_long_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_old_timespec {
+pub tv_sec: __kernel_old_time_t,
+pub tv_nsec: crate::ctypes::c_long,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_old_itimerval {
+pub it_interval: __kernel_old_timeval,
+pub it_value: __kernel_old_timeval,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_sock_timeval {
+pub tv_sec: __s64,
+pub tv_usec: __s64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct timespec {
+pub tv_sec: __kernel_old_time_t,
+pub tv_nsec: crate::ctypes::c_long,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct timeval {
+pub tv_sec: __kernel_old_time_t,
+pub tv_usec: __kernel_suseconds_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct itimerspec {
+pub it_interval: timespec,
+pub it_value: timespec,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct itimerval {
+pub it_interval: timeval,
+pub it_value: timeval,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct timezone {
+pub tz_minuteswest: crate::ctypes::c_int,
+pub tz_dsttime: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rusage {
+pub ru_utime: __kernel_old_timeval,
+pub ru_stime: __kernel_old_timeval,
+pub ru_maxrss: __kernel_long_t,
+pub ru_ixrss: __kernel_long_t,
+pub ru_idrss: __kernel_long_t,
+pub ru_isrss: __kernel_long_t,
+pub ru_minflt: __kernel_long_t,
+pub ru_majflt: __kernel_long_t,
+pub ru_nswap: __kernel_long_t,
+pub ru_inblock: __kernel_long_t,
+pub ru_oublock: __kernel_long_t,
+pub ru_msgsnd: __kernel_long_t,
+pub ru_msgrcv: __kernel_long_t,
+pub ru_nsignals: __kernel_long_t,
+pub ru_nvcsw: __kernel_long_t,
+pub ru_nivcsw: __kernel_long_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rlimit {
+pub rlim_cur: __kernel_ulong_t,
+pub rlim_max: __kernel_ulong_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rlimit64 {
+pub rlim_cur: __u64,
+pub rlim_max: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct clone_args {
+pub flags: __u64,
+pub pidfd: __u64,
+pub child_tid: __u64,
+pub parent_tid: __u64,
+pub exit_signal: __u64,
+pub stack: __u64,
+pub stack_size: __u64,
+pub tls: __u64,
+pub set_tid: __u64,
+pub set_tid_size: __u64,
+pub cgroup: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sigset_t {
+pub sig: [crate::ctypes::c_ulong; 1usize],
+}
+pub type old_sigset_t = crate::ctypes::c_ulong;
+pub type __signalfn_t = ::core::option::Option<unsafe extern "C" fn(arg1: crate::ctypes::c_int)>;
+pub type __sighandler_t = __signalfn_t;
+pub type __restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
+pub type __sigrestore_t = __restorefn_t;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sigaction {
+pub sa_handler: __sighandler_t,
+pub sa_flags: crate::ctypes::c_ulong,
+pub sa_mask: sigset_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sigaltstack {
+pub ss_sp: *mut crate::ctypes::c_void,
+pub ss_flags: crate::ctypes::c_int,
+pub ss_size: __kernel_size_t,
+}
+pub type stack_t = sigaltstack;
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union sigval {
+pub sival_int: crate::ctypes::c_int,
+pub sival_ptr: *mut crate::ctypes::c_void,
+}
+pub type sigval_t = sigval;
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union __sifields {
+pub _kill: __sifields__bindgen_ty_1,
+pub _timer: __sifields__bindgen_ty_2,
+pub _rt: __sifields__bindgen_ty_3,
+pub _sigchld: __sifields__bindgen_ty_4,
+pub _sigfault: __sifields__bindgen_ty_5,
+pub _sigpoll: __sifields__bindgen_ty_6,
+pub _sigsys: __sifields__bindgen_ty_7,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_1 {
+pub _pid: __kernel_pid_t,
+pub _uid: __kernel_uid32_t,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct __sifields__bindgen_ty_2 {
+pub _tid: __kernel_timer_t,
+pub _overrun: crate::ctypes::c_int,
+pub _sigval: sigval_t,
+pub _sys_private: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct __sifields__bindgen_ty_3 {
+pub _pid: __kernel_pid_t,
+pub _uid: __kernel_uid32_t,
+pub _sigval: sigval_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_4 {
+pub _pid: __kernel_pid_t,
+pub _uid: __kernel_uid32_t,
+pub _status: crate::ctypes::c_int,
+pub _utime: __kernel_clock_t,
+pub _stime: __kernel_clock_t,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct __sifields__bindgen_ty_5 {
+pub _addr: *mut crate::ctypes::c_void,
+pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
+pub _trapno: crate::ctypes::c_int,
+pub _addr_lsb: crate::ctypes::c_short,
+pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
+pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
+pub _perf: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
+pub _dummy_bnd: [crate::ctypes::c_char; 8usize],
+pub _lower: *mut crate::ctypes::c_void,
+pub _upper: *mut crate::ctypes::c_void,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
+pub _dummy_pkey: [crate::ctypes::c_char; 8usize],
+pub _pkey: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
+pub _data: crate::ctypes::c_ulong,
+pub _type: __u32,
+pub _flags: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_6 {
+pub _band: crate::ctypes::c_long,
+pub _fd: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __sifields__bindgen_ty_7 {
+pub _call_addr: *mut crate::ctypes::c_void,
+pub _syscall: crate::ctypes::c_int,
+pub _arch: crate::ctypes::c_uint,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct siginfo {
+pub __bindgen_anon_1: siginfo__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union siginfo__bindgen_ty_1 {
+pub __bindgen_anon_1: siginfo__bindgen_ty_1__bindgen_ty_1,
+pub _si_pad: [crate::ctypes::c_int; 32usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct siginfo__bindgen_ty_1__bindgen_ty_1 {
+pub si_signo: crate::ctypes::c_int,
+pub si_errno: crate::ctypes::c_int,
+pub si_code: crate::ctypes::c_int,
+pub _sifields: __sifields,
+}
+pub type siginfo_t = siginfo;
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct sigevent {
+pub sigev_value: sigval_t,
+pub sigev_signo: crate::ctypes::c_int,
+pub sigev_notify: crate::ctypes::c_int,
+pub _sigev_un: sigevent__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union sigevent__bindgen_ty_1 {
+pub _pad: [crate::ctypes::c_int; 12usize],
+pub _tid: crate::ctypes::c_int,
+pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
+pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
+pub _attribute: *mut crate::ctypes::c_void,
+}
+pub type sigevent_t = sigevent;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct statx_timestamp {
+pub tv_sec: __s64,
+pub tv_nsec: __u32,
+pub __reserved: __s32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct statx {
+pub stx_mask: __u32,
+pub stx_blksize: __u32,
+pub stx_attributes: __u64,
+pub stx_nlink: __u32,
+pub stx_uid: __u32,
+pub stx_gid: __u32,
+pub stx_mode: __u16,
+pub __spare0: [__u16; 1usize],
+pub stx_ino: __u64,
+pub stx_size: __u64,
+pub stx_blocks: __u64,
+pub stx_attributes_mask: __u64,
+pub stx_atime: statx_timestamp,
+pub stx_btime: statx_timestamp,
+pub stx_ctime: statx_timestamp,
+pub stx_mtime: statx_timestamp,
+pub stx_rdev_major: __u32,
+pub stx_rdev_minor: __u32,
+pub stx_dev_major: __u32,
+pub stx_dev_minor: __u32,
+pub stx_mnt_id: __u64,
+pub stx_dio_mem_align: __u32,
+pub stx_dio_offset_align: __u32,
+pub __spare3: [__u64; 12usize],
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct sysinfo {
+pub uptime: __kernel_long_t,
+pub loads: [__kernel_ulong_t; 3usize],
+pub totalram: __kernel_ulong_t,
+pub freeram: __kernel_ulong_t,
+pub sharedram: __kernel_ulong_t,
+pub bufferram: __kernel_ulong_t,
+pub totalswap: __kernel_ulong_t,
+pub freeswap: __kernel_ulong_t,
+pub procs: __u16,
+pub pad: __u16,
+pub totalhigh: __kernel_ulong_t,
+pub freehigh: __kernel_ulong_t,
+pub mem_unit: __u32,
+pub _f: __IncompleteArrayField<crate::ctypes::c_char>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcphdr {
+pub source: __be16,
+pub dest: __be16,
+pub seq: __be32,
+pub ack_seq: __be32,
+pub _bitfield_align_1: [u8; 0],
+pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
+pub window: __be16,
+pub check: __sum16,
+pub urg_ptr: __be16,
+}
+impl tcphdr {
+#[inline]
+pub fn res1(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
+}
+#[inline]
+pub fn set_res1(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(0usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn doff(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u16) }
+}
+#[inline]
+pub fn set_doff(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(4usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn fin(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_fin(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(8usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn syn(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_syn(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(9usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn rst(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_rst(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(10usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn psh(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_psh(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(11usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn ack(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_ack(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(12usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn urg(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_urg(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(13usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn ece(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_ece(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(14usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn cwr(&self) -> __u16 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
+}
+#[inline]
+pub fn set_cwr(&mut self, val: __u16) {
+unsafe {
+let val: u16 = ::core::mem::transmute(val);
+self._bitfield_1.set(15usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn new_bitfield_1(res1: __u16, doff: __u16, fin: __u16, syn: __u16, rst: __u16, psh: __u16, ack: __u16, urg: __u16, ece: __u16, cwr: __u16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
+let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
+__bindgen_bitfield_unit.set(0usize, 4u8, {
+let res1: u16 = unsafe { ::core::mem::transmute(res1) };
+res1 as u64
+});
+__bindgen_bitfield_unit.set(4usize, 4u8, {
+let doff: u16 = unsafe { ::core::mem::transmute(doff) };
+doff as u64
+});
+__bindgen_bitfield_unit.set(8usize, 1u8, {
+let fin: u16 = unsafe { ::core::mem::transmute(fin) };
+fin as u64
+});
+__bindgen_bitfield_unit.set(9usize, 1u8, {
+let syn: u16 = unsafe { ::core::mem::transmute(syn) };
+syn as u64
+});
+__bindgen_bitfield_unit.set(10usize, 1u8, {
+let rst: u16 = unsafe { ::core::mem::transmute(rst) };
+rst as u64
+});
+__bindgen_bitfield_unit.set(11usize, 1u8, {
+let psh: u16 = unsafe { ::core::mem::transmute(psh) };
+psh as u64
+});
+__bindgen_bitfield_unit.set(12usize, 1u8, {
+let ack: u16 = unsafe { ::core::mem::transmute(ack) };
+ack as u64
+});
+__bindgen_bitfield_unit.set(13usize, 1u8, {
+let urg: u16 = unsafe { ::core::mem::transmute(urg) };
+urg as u64
+});
+__bindgen_bitfield_unit.set(14usize, 1u8, {
+let ece: u16 = unsafe { ::core::mem::transmute(ece) };
+ece as u64
+});
+__bindgen_bitfield_unit.set(15usize, 1u8, {
+let cwr: u16 = unsafe { ::core::mem::transmute(cwr) };
+cwr as u64
+});
+__bindgen_bitfield_unit
+}
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union tcp_word_hdr {
+pub hdr: tcphdr,
+pub words: [__be32; 5usize],
+}
+pub const TCP_FLAG_CWR: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_CWR;
+pub const TCP_FLAG_ECE: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_ECE;
+pub const TCP_FLAG_URG: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_URG;
+pub const TCP_FLAG_ACK: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_ACK;
+pub const TCP_FLAG_PSH: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_PSH;
+pub const TCP_FLAG_RST: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_RST;
+pub const TCP_FLAG_SYN: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_SYN;
+pub const TCP_FLAG_FIN: _bindgen_ty_4 = _bindgen_ty_4::TCP_FLAG_FIN;
+pub const TCP_RESERVED_BITS: _bindgen_ty_4 = _bindgen_ty_4::TCP_RESERVED_BITS;
+pub const TCP_DATA_OFFSET: _bindgen_ty_4 = _bindgen_ty_4::TCP_DATA_OFFSET;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_4 {
+TCP_FLAG_CWR = 32768,
+TCP_FLAG_ECE = 16384,
+TCP_FLAG_URG = 8192,
+TCP_FLAG_ACK = 4096,
+TCP_FLAG_PSH = 2048,
+TCP_FLAG_RST = 1024,
+TCP_FLAG_SYN = 512,
+TCP_FLAG_FIN = 256,
+TCP_RESERVED_BITS = 15,
+TCP_DATA_OFFSET = 240,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcp_repair_opt {
+pub opt_code: __u32,
+pub opt_val: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcp_repair_window {
+pub snd_wl1: __u32,
+pub snd_wnd: __u32,
+pub max_window: __u32,
+pub rcv_wnd: __u32,
+pub rcv_wup: __u32,
+}
+pub const TCP_NO_QUEUE: _bindgen_ty_5 = _bindgen_ty_5::TCP_NO_QUEUE;
+pub const TCP_RECV_QUEUE: _bindgen_ty_5 = _bindgen_ty_5::TCP_RECV_QUEUE;
+pub const TCP_SEND_QUEUE: _bindgen_ty_5 = _bindgen_ty_5::TCP_SEND_QUEUE;
+pub const TCP_QUEUES_NR: _bindgen_ty_5 = _bindgen_ty_5::TCP_QUEUES_NR;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_5 {
+TCP_NO_QUEUE = 0,
+TCP_RECV_QUEUE = 1,
+TCP_SEND_QUEUE = 2,
+TCP_QUEUES_NR = 3,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum tcp_fastopen_client_fail {
+TFO_STATUS_UNSPEC = 0,
+TFO_COOKIE_UNAVAILABLE = 1,
+TFO_DATA_NOT_ACKED = 2,
+TFO_SYN_RETRANSMITTED = 3,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum tcp_ca_state {
+TCP_CA_Open = 0,
+TCP_CA_Disorder = 1,
+TCP_CA_CWR = 2,
+TCP_CA_Recovery = 3,
+TCP_CA_Loss = 4,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcp_info {
+pub tcpi_state: __u8,
+pub tcpi_ca_state: __u8,
+pub tcpi_retransmits: __u8,
+pub tcpi_probes: __u8,
+pub tcpi_backoff: __u8,
+pub tcpi_options: __u8,
+pub _bitfield_align_1: [u8; 0],
+pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
+pub tcpi_rto: __u32,
+pub tcpi_ato: __u32,
+pub tcpi_snd_mss: __u32,
+pub tcpi_rcv_mss: __u32,
+pub tcpi_unacked: __u32,
+pub tcpi_sacked: __u32,
+pub tcpi_lost: __u32,
+pub tcpi_retrans: __u32,
+pub tcpi_fackets: __u32,
+pub tcpi_last_data_sent: __u32,
+pub tcpi_last_ack_sent: __u32,
+pub tcpi_last_data_recv: __u32,
+pub tcpi_last_ack_recv: __u32,
+pub tcpi_pmtu: __u32,
+pub tcpi_rcv_ssthresh: __u32,
+pub tcpi_rtt: __u32,
+pub tcpi_rttvar: __u32,
+pub tcpi_snd_ssthresh: __u32,
+pub tcpi_snd_cwnd: __u32,
+pub tcpi_advmss: __u32,
+pub tcpi_reordering: __u32,
+pub tcpi_rcv_rtt: __u32,
+pub tcpi_rcv_space: __u32,
+pub tcpi_total_retrans: __u32,
+pub tcpi_pacing_rate: __u64,
+pub tcpi_max_pacing_rate: __u64,
+pub tcpi_bytes_acked: __u64,
+pub tcpi_bytes_received: __u64,
+pub tcpi_segs_out: __u32,
+pub tcpi_segs_in: __u32,
+pub tcpi_notsent_bytes: __u32,
+pub tcpi_min_rtt: __u32,
+pub tcpi_data_segs_in: __u32,
+pub tcpi_data_segs_out: __u32,
+pub tcpi_delivery_rate: __u64,
+pub tcpi_busy_time: __u64,
+pub tcpi_rwnd_limited: __u64,
+pub tcpi_sndbuf_limited: __u64,
+pub tcpi_delivered: __u32,
+pub tcpi_delivered_ce: __u32,
+pub tcpi_bytes_sent: __u64,
+pub tcpi_bytes_retrans: __u64,
+pub tcpi_dsack_dups: __u32,
+pub tcpi_reord_seen: __u32,
+pub tcpi_rcv_ooopack: __u32,
+pub tcpi_snd_wnd: __u32,
+pub tcpi_rcv_wnd: __u32,
+pub tcpi_rehash: __u32,
+}
+impl tcp_info {
+#[inline]
+pub fn tcpi_snd_wscale(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_tcpi_snd_wscale(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(0usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn tcpi_rcv_wscale(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
+}
+#[inline]
+pub fn set_tcpi_rcv_wscale(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(4usize, 4u8, val as u64)
+}
+}
+#[inline]
+pub fn tcpi_delivery_rate_app_limited(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u8) }
+}
+#[inline]
+pub fn set_tcpi_delivery_rate_app_limited(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(8usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn tcpi_fastopen_client_fail(&self) -> __u8 {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 2u8) as u8) }
+}
+#[inline]
+pub fn set_tcpi_fastopen_client_fail(&mut self, val: __u8) {
+unsafe {
+let val: u8 = ::core::mem::transmute(val);
+self._bitfield_1.set(9usize, 2u8, val as u64)
+}
+}
+#[inline]
+pub fn new_bitfield_1(tcpi_snd_wscale: __u8, tcpi_rcv_wscale: __u8, tcpi_delivery_rate_app_limited: __u8, tcpi_fastopen_client_fail: __u8) -> __BindgenBitfieldUnit<[u8; 2usize]> {
+let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
+__bindgen_bitfield_unit.set(0usize, 4u8, {
+let tcpi_snd_wscale: u8 = unsafe { ::core::mem::transmute(tcpi_snd_wscale) };
+tcpi_snd_wscale as u64
+});
+__bindgen_bitfield_unit.set(4usize, 4u8, {
+let tcpi_rcv_wscale: u8 = unsafe { ::core::mem::transmute(tcpi_rcv_wscale) };
+tcpi_rcv_wscale as u64
+});
+__bindgen_bitfield_unit.set(8usize, 1u8, {
+let tcpi_delivery_rate_app_limited: u8 = unsafe { ::core::mem::transmute(tcpi_delivery_rate_app_limited) };
+tcpi_delivery_rate_app_limited as u64
+});
+__bindgen_bitfield_unit.set(9usize, 2u8, {
+let tcpi_fastopen_client_fail: u8 = unsafe { ::core::mem::transmute(tcpi_fastopen_client_fail) };
+tcpi_fastopen_client_fail as u64
+});
+__bindgen_bitfield_unit
+}
+}
+pub const TCP_NLA_PAD: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_PAD;
+pub const TCP_NLA_BUSY: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_BUSY;
+pub const TCP_NLA_RWND_LIMITED: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_RWND_LIMITED;
+pub const TCP_NLA_SNDBUF_LIMITED: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_SNDBUF_LIMITED;
+pub const TCP_NLA_DATA_SEGS_OUT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DATA_SEGS_OUT;
+pub const TCP_NLA_TOTAL_RETRANS: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_TOTAL_RETRANS;
+pub const TCP_NLA_PACING_RATE: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_PACING_RATE;
+pub const TCP_NLA_DELIVERY_RATE: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DELIVERY_RATE;
+pub const TCP_NLA_SND_CWND: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_SND_CWND;
+pub const TCP_NLA_REORDERING: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_REORDERING;
+pub const TCP_NLA_MIN_RTT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_MIN_RTT;
+pub const TCP_NLA_RECUR_RETRANS: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_RECUR_RETRANS;
+pub const TCP_NLA_DELIVERY_RATE_APP_LMT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DELIVERY_RATE_APP_LMT;
+pub const TCP_NLA_SNDQ_SIZE: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_SNDQ_SIZE;
+pub const TCP_NLA_CA_STATE: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_CA_STATE;
+pub const TCP_NLA_SND_SSTHRESH: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_SND_SSTHRESH;
+pub const TCP_NLA_DELIVERED: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DELIVERED;
+pub const TCP_NLA_DELIVERED_CE: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DELIVERED_CE;
+pub const TCP_NLA_BYTES_SENT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_BYTES_SENT;
+pub const TCP_NLA_BYTES_RETRANS: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_BYTES_RETRANS;
+pub const TCP_NLA_DSACK_DUPS: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_DSACK_DUPS;
+pub const TCP_NLA_REORD_SEEN: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_REORD_SEEN;
+pub const TCP_NLA_SRTT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_SRTT;
+pub const TCP_NLA_TIMEOUT_REHASH: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_TIMEOUT_REHASH;
+pub const TCP_NLA_BYTES_NOTSENT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_BYTES_NOTSENT;
+pub const TCP_NLA_EDT: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_EDT;
+pub const TCP_NLA_TTL: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_TTL;
+pub const TCP_NLA_REHASH: _bindgen_ty_6 = _bindgen_ty_6::TCP_NLA_REHASH;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_6 {
+TCP_NLA_PAD = 0,
+TCP_NLA_BUSY = 1,
+TCP_NLA_RWND_LIMITED = 2,
+TCP_NLA_SNDBUF_LIMITED = 3,
+TCP_NLA_DATA_SEGS_OUT = 4,
+TCP_NLA_TOTAL_RETRANS = 5,
+TCP_NLA_PACING_RATE = 6,
+TCP_NLA_DELIVERY_RATE = 7,
+TCP_NLA_SND_CWND = 8,
+TCP_NLA_REORDERING = 9,
+TCP_NLA_MIN_RTT = 10,
+TCP_NLA_RECUR_RETRANS = 11,
+TCP_NLA_DELIVERY_RATE_APP_LMT = 12,
+TCP_NLA_SNDQ_SIZE = 13,
+TCP_NLA_CA_STATE = 14,
+TCP_NLA_SND_SSTHRESH = 15,
+TCP_NLA_DELIVERED = 16,
+TCP_NLA_DELIVERED_CE = 17,
+TCP_NLA_BYTES_SENT = 18,
+TCP_NLA_BYTES_RETRANS = 19,
+TCP_NLA_DSACK_DUPS = 20,
+TCP_NLA_REORD_SEEN = 21,
+TCP_NLA_SRTT = 22,
+TCP_NLA_TIMEOUT_REHASH = 23,
+TCP_NLA_BYTES_NOTSENT = 24,
+TCP_NLA_EDT = 25,
+TCP_NLA_TTL = 26,
+TCP_NLA_REHASH = 27,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct tcp_md5sig {
+pub tcpm_addr: __kernel_sockaddr_storage,
+pub tcpm_flags: __u8,
+pub tcpm_prefixlen: __u8,
+pub tcpm_keylen: __u16,
+pub tcpm_ifindex: crate::ctypes::c_int,
+pub tcpm_key: [__u8; 80usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcp_diag_md5sig {
+pub tcpm_family: __u8,
+pub tcpm_prefixlen: __u8,
+pub tcpm_keylen: __u16,
+pub tcpm_addr: [__be32; 4usize],
+pub tcpm_key: [__u8; 80usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcp_zerocopy_receive {
+pub address: __u64,
+pub length: __u32,
+pub recv_skip_hint: __u32,
+pub inq: __u32,
+pub err: __s32,
+pub copybuf_address: __u64,
+pub copybuf_len: __s32,
+pub flags: __u32,
+pub msg_control: __u64,
+pub msg_controllen: __u64,
+pub msg_flags: __u32,
+pub reserved: __u32,
+}
+pub type cc_t = crate::ctypes::c_uchar;
+pub type speed_t = crate::ctypes::c_uint;
+pub type tcflag_t = crate::ctypes::c_uint;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct termios {
+pub c_iflag: tcflag_t,
+pub c_oflag: tcflag_t,
+pub c_cflag: tcflag_t,
+pub c_lflag: tcflag_t,
+pub c_line: cc_t,
+pub c_cc: [cc_t; 19usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct termios2 {
+pub c_iflag: tcflag_t,
+pub c_oflag: tcflag_t,
+pub c_cflag: tcflag_t,
+pub c_lflag: tcflag_t,
+pub c_line: cc_t,
+pub c_cc: [cc_t; 19usize],
+pub c_ispeed: speed_t,
+pub c_ospeed: speed_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ktermios {
+pub c_iflag: tcflag_t,
+pub c_oflag: tcflag_t,
+pub c_cflag: tcflag_t,
+pub c_lflag: tcflag_t,
+pub c_line: cc_t,
+pub c_cc: [cc_t; 19usize],
+pub c_ispeed: speed_t,
+pub c_ospeed: speed_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct winsize {
+pub ws_row: crate::ctypes::c_ushort,
+pub ws_col: crate::ctypes::c_ushort,
+pub ws_xpixel: crate::ctypes::c_ushort,
+pub ws_ypixel: crate::ctypes::c_ushort,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct termio {
+pub c_iflag: crate::ctypes::c_ushort,
+pub c_oflag: crate::ctypes::c_ushort,
+pub c_cflag: crate::ctypes::c_ushort,
+pub c_lflag: crate::ctypes::c_ushort,
+pub c_line: crate::ctypes::c_uchar,
+pub c_cc: [crate::ctypes::c_uchar; 8usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct iovec {
+pub iov_base: *mut crate::ctypes::c_void,
+pub iov_len: __kernel_size_t,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sockaddr_un {
+pub sun_family: __kernel_sa_family_t,
+pub sun_path: [crate::ctypes::c_char; 108usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct oldold_utsname {
+pub sysname: [crate::ctypes::c_char; 9usize],
+pub nodename: [crate::ctypes::c_char; 9usize],
+pub release: [crate::ctypes::c_char; 9usize],
+pub version: [crate::ctypes::c_char; 9usize],
+pub machine: [crate::ctypes::c_char; 9usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct old_utsname {
+pub sysname: [crate::ctypes::c_char; 65usize],
+pub nodename: [crate::ctypes::c_char; 65usize],
+pub release: [crate::ctypes::c_char; 65usize],
+pub version: [crate::ctypes::c_char; 65usize],
+pub machine: [crate::ctypes::c_char; 65usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct new_utsname {
+pub sysname: [crate::ctypes::c_char; 65usize],
+pub nodename: [crate::ctypes::c_char; 65usize],
+pub release: [crate::ctypes::c_char; 65usize],
+pub version: [crate::ctypes::c_char; 65usize],
+pub machine: [crate::ctypes::c_char; 65usize],
+pub domainname: [crate::ctypes::c_char; 65usize],
+}
+impl membarrier_cmd {
+pub const MEMBARRIER_CMD_SHARED: membarrier_cmd = membarrier_cmd::MEMBARRIER_CMD_GLOBAL;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum membarrier_cmd {
+MEMBARRIER_CMD_QUERY = 0,
+MEMBARRIER_CMD_GLOBAL = 1,
+MEMBARRIER_CMD_GLOBAL_EXPEDITED = 2,
+MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED = 4,
+MEMBARRIER_CMD_PRIVATE_EXPEDITED = 8,
+MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED = 16,
+MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE = 32,
+MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE = 64,
+MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ = 128,
+MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ = 256,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum membarrier_cmd_flag {
+MEMBARRIER_CMD_FLAG_CPU = 1,
+}
+#[repr(C, packed)]
+#[derive(Copy, Clone)]
+pub struct uffd_msg {
+pub event: __u8,
+pub reserved1: __u8,
+pub reserved2: __u16,
+pub reserved3: __u32,
+pub arg: uffd_msg__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union uffd_msg__bindgen_ty_1 {
+pub pagefault: uffd_msg__bindgen_ty_1__bindgen_ty_1,
+pub fork: uffd_msg__bindgen_ty_1__bindgen_ty_2,
+pub remap: uffd_msg__bindgen_ty_1__bindgen_ty_3,
+pub remove: uffd_msg__bindgen_ty_1__bindgen_ty_4,
+pub reserved: uffd_msg__bindgen_ty_1__bindgen_ty_5,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct uffd_msg__bindgen_ty_1__bindgen_ty_1 {
+pub flags: __u64,
+pub address: __u64,
+pub feat: uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union uffd_msg__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
+pub ptid: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffd_msg__bindgen_ty_1__bindgen_ty_2 {
+pub ufd: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffd_msg__bindgen_ty_1__bindgen_ty_3 {
+pub from: __u64,
+pub to: __u64,
+pub len: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffd_msg__bindgen_ty_1__bindgen_ty_4 {
+pub start: __u64,
+pub end: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffd_msg__bindgen_ty_1__bindgen_ty_5 {
+pub reserved1: __u64,
+pub reserved2: __u64,
+pub reserved3: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_api {
+pub api: __u64,
+pub features: __u64,
+pub ioctls: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_range {
+pub start: __u64,
+pub len: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_register {
+pub range: uffdio_range,
+pub mode: __u64,
+pub ioctls: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_copy {
+pub dst: __u64,
+pub src: __u64,
+pub len: __u64,
+pub mode: __u64,
+pub copy: __s64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_zeropage {
+pub range: uffdio_range,
+pub mode: __u64,
+pub zeropage: __s64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_writeprotect {
+pub range: uffdio_range,
+pub mode: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct uffdio_continue {
+pub range: uffdio_range,
+pub mode: __u64,
+pub mapped: __s64,
+}
+#[repr(C)]
+pub struct io_uring_sqe {
+pub opcode: __u8,
+pub flags: __u8,
+pub ioprio: __u16,
+pub fd: __s32,
+pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
+pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
+pub len: __u32,
+pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
+pub user_data: __u64,
+pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
+pub personality: __u16,
+pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
+pub __bindgen_anon_6: io_uring_sqe__bindgen_ty_6,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union io_uring_sqe__bindgen_ty_1 {
+pub off: __u64,
+pub addr2: __u64,
+pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_sqe__bindgen_ty_1__bindgen_ty_1 {
+pub cmd_op: __u32,
+pub __pad1: __u32,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union io_uring_sqe__bindgen_ty_2 {
+pub addr: __u64,
+pub splice_off_in: __u64,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union io_uring_sqe__bindgen_ty_3 {
+pub rw_flags: __kernel_rwf_t,
+pub fsync_flags: __u32,
+pub poll_events: __u16,
+pub poll32_events: __u32,
+pub sync_range_flags: __u32,
+pub msg_flags: __u32,
+pub timeout_flags: __u32,
+pub accept_flags: __u32,
+pub cancel_flags: __u32,
+pub open_flags: __u32,
+pub statx_flags: __u32,
+pub fadvise_advice: __u32,
+pub splice_flags: __u32,
+pub rename_flags: __u32,
+pub unlink_flags: __u32,
+pub hardlink_flags: __u32,
+pub xattr_flags: __u32,
+pub msg_ring_flags: __u32,
+pub uring_cmd_flags: __u32,
+}
+#[repr(C, packed)]
+#[derive(Copy, Clone)]
+pub union io_uring_sqe__bindgen_ty_4 {
+pub buf_index: __u16,
+pub buf_group: __u16,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union io_uring_sqe__bindgen_ty_5 {
+pub splice_fd_in: __s32,
+pub file_index: __u32,
+pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_5__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_sqe__bindgen_ty_5__bindgen_ty_1 {
+pub addr_len: __u16,
+pub __pad3: [__u16; 1usize],
+}
+#[repr(C)]
+pub struct io_uring_sqe__bindgen_ty_6 {
+pub __bindgen_anon_1: __BindgenUnionField<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>,
+pub cmd: __BindgenUnionField<[__u8; 0usize]>,
+pub bindgen_union_field: [u64; 2usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_sqe__bindgen_ty_6__bindgen_ty_1 {
+pub addr3: __u64,
+pub __pad2: [__u64; 1usize],
+}
+pub const IOSQE_FIXED_FILE_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_FIXED_FILE_BIT;
+pub const IOSQE_IO_DRAIN_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_IO_DRAIN_BIT;
+pub const IOSQE_IO_LINK_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_IO_LINK_BIT;
+pub const IOSQE_IO_HARDLINK_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_IO_HARDLINK_BIT;
+pub const IOSQE_ASYNC_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_ASYNC_BIT;
+pub const IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_BUFFER_SELECT_BIT;
+pub const IOSQE_CQE_SKIP_SUCCESS_BIT: _bindgen_ty_7 = _bindgen_ty_7::IOSQE_CQE_SKIP_SUCCESS_BIT;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_7 {
+IOSQE_FIXED_FILE_BIT = 0,
+IOSQE_IO_DRAIN_BIT = 1,
+IOSQE_IO_LINK_BIT = 2,
+IOSQE_IO_HARDLINK_BIT = 3,
+IOSQE_ASYNC_BIT = 4,
+IOSQE_BUFFER_SELECT_BIT = 5,
+IOSQE_CQE_SKIP_SUCCESS_BIT = 6,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum io_uring_op {
+IORING_OP_NOP = 0,
+IORING_OP_READV = 1,
+IORING_OP_WRITEV = 2,
+IORING_OP_FSYNC = 3,
+IORING_OP_READ_FIXED = 4,
+IORING_OP_WRITE_FIXED = 5,
+IORING_OP_POLL_ADD = 6,
+IORING_OP_POLL_REMOVE = 7,
+IORING_OP_SYNC_FILE_RANGE = 8,
+IORING_OP_SENDMSG = 9,
+IORING_OP_RECVMSG = 10,
+IORING_OP_TIMEOUT = 11,
+IORING_OP_TIMEOUT_REMOVE = 12,
+IORING_OP_ACCEPT = 13,
+IORING_OP_ASYNC_CANCEL = 14,
+IORING_OP_LINK_TIMEOUT = 15,
+IORING_OP_CONNECT = 16,
+IORING_OP_FALLOCATE = 17,
+IORING_OP_OPENAT = 18,
+IORING_OP_CLOSE = 19,
+IORING_OP_FILES_UPDATE = 20,
+IORING_OP_STATX = 21,
+IORING_OP_READ = 22,
+IORING_OP_WRITE = 23,
+IORING_OP_FADVISE = 24,
+IORING_OP_MADVISE = 25,
+IORING_OP_SEND = 26,
+IORING_OP_RECV = 27,
+IORING_OP_OPENAT2 = 28,
+IORING_OP_EPOLL_CTL = 29,
+IORING_OP_SPLICE = 30,
+IORING_OP_PROVIDE_BUFFERS = 31,
+IORING_OP_REMOVE_BUFFERS = 32,
+IORING_OP_TEE = 33,
+IORING_OP_SHUTDOWN = 34,
+IORING_OP_RENAMEAT = 35,
+IORING_OP_UNLINKAT = 36,
+IORING_OP_MKDIRAT = 37,
+IORING_OP_SYMLINKAT = 38,
+IORING_OP_LINKAT = 39,
+IORING_OP_MSG_RING = 40,
+IORING_OP_FSETXATTR = 41,
+IORING_OP_SETXATTR = 42,
+IORING_OP_FGETXATTR = 43,
+IORING_OP_GETXATTR = 44,
+IORING_OP_SOCKET = 45,
+IORING_OP_URING_CMD = 46,
+IORING_OP_SEND_ZC = 47,
+IORING_OP_SENDMSG_ZC = 48,
+IORING_OP_LAST = 49,
+}
+pub const IORING_MSG_DATA: _bindgen_ty_8 = _bindgen_ty_8::IORING_MSG_DATA;
+pub const IORING_MSG_SEND_FD: _bindgen_ty_8 = _bindgen_ty_8::IORING_MSG_SEND_FD;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_8 {
+IORING_MSG_DATA = 0,
+IORING_MSG_SEND_FD = 1,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct io_uring_cqe {
+pub user_data: __u64,
+pub res: __s32,
+pub flags: __u32,
+pub big_cqe: __IncompleteArrayField<__u64>,
+}
+pub const IORING_CQE_BUFFER_SHIFT: _bindgen_ty_9 = _bindgen_ty_9::IORING_CQE_BUFFER_SHIFT;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_9 {
+IORING_CQE_BUFFER_SHIFT = 16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_sqring_offsets {
+pub head: __u32,
+pub tail: __u32,
+pub ring_mask: __u32,
+pub ring_entries: __u32,
+pub flags: __u32,
+pub dropped: __u32,
+pub array: __u32,
+pub resv1: __u32,
+pub resv2: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_cqring_offsets {
+pub head: __u32,
+pub tail: __u32,
+pub ring_mask: __u32,
+pub ring_entries: __u32,
+pub overflow: __u32,
+pub cqes: __u32,
+pub flags: __u32,
+pub resv1: __u32,
+pub resv2: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_params {
+pub sq_entries: __u32,
+pub cq_entries: __u32,
+pub flags: __u32,
+pub sq_thread_cpu: __u32,
+pub sq_thread_idle: __u32,
+pub features: __u32,
+pub wq_fd: __u32,
+pub resv: [__u32; 3usize],
+pub sq_off: io_sqring_offsets,
+pub cq_off: io_cqring_offsets,
+}
+pub const IORING_REGISTER_BUFFERS: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_BUFFERS;
+pub const IORING_UNREGISTER_BUFFERS: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_BUFFERS;
+pub const IORING_REGISTER_FILES: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_FILES;
+pub const IORING_UNREGISTER_FILES: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_FILES;
+pub const IORING_REGISTER_EVENTFD: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_EVENTFD;
+pub const IORING_UNREGISTER_EVENTFD: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_EVENTFD;
+pub const IORING_REGISTER_FILES_UPDATE: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_FILES_UPDATE;
+pub const IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_EVENTFD_ASYNC;
+pub const IORING_REGISTER_PROBE: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_PROBE;
+pub const IORING_REGISTER_PERSONALITY: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_PERSONALITY;
+pub const IORING_UNREGISTER_PERSONALITY: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_PERSONALITY;
+pub const IORING_REGISTER_RESTRICTIONS: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_RESTRICTIONS;
+pub const IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_ENABLE_RINGS;
+pub const IORING_REGISTER_FILES2: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_FILES2;
+pub const IORING_REGISTER_FILES_UPDATE2: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_FILES_UPDATE2;
+pub const IORING_REGISTER_BUFFERS2: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_BUFFERS2;
+pub const IORING_REGISTER_BUFFERS_UPDATE: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_BUFFERS_UPDATE;
+pub const IORING_REGISTER_IOWQ_AFF: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_IOWQ_AFF;
+pub const IORING_UNREGISTER_IOWQ_AFF: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_IOWQ_AFF;
+pub const IORING_REGISTER_IOWQ_MAX_WORKERS: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_IOWQ_MAX_WORKERS;
+pub const IORING_REGISTER_RING_FDS: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_RING_FDS;
+pub const IORING_UNREGISTER_RING_FDS: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_RING_FDS;
+pub const IORING_REGISTER_PBUF_RING: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_PBUF_RING;
+pub const IORING_UNREGISTER_PBUF_RING: _bindgen_ty_10 = _bindgen_ty_10::IORING_UNREGISTER_PBUF_RING;
+pub const IORING_REGISTER_SYNC_CANCEL: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_SYNC_CANCEL;
+pub const IORING_REGISTER_FILE_ALLOC_RANGE: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_FILE_ALLOC_RANGE;
+pub const IORING_REGISTER_LAST: _bindgen_ty_10 = _bindgen_ty_10::IORING_REGISTER_LAST;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_10 {
+IORING_REGISTER_BUFFERS = 0,
+IORING_UNREGISTER_BUFFERS = 1,
+IORING_REGISTER_FILES = 2,
+IORING_UNREGISTER_FILES = 3,
+IORING_REGISTER_EVENTFD = 4,
+IORING_UNREGISTER_EVENTFD = 5,
+IORING_REGISTER_FILES_UPDATE = 6,
+IORING_REGISTER_EVENTFD_ASYNC = 7,
+IORING_REGISTER_PROBE = 8,
+IORING_REGISTER_PERSONALITY = 9,
+IORING_UNREGISTER_PERSONALITY = 10,
+IORING_REGISTER_RESTRICTIONS = 11,
+IORING_REGISTER_ENABLE_RINGS = 12,
+IORING_REGISTER_FILES2 = 13,
+IORING_REGISTER_FILES_UPDATE2 = 14,
+IORING_REGISTER_BUFFERS2 = 15,
+IORING_REGISTER_BUFFERS_UPDATE = 16,
+IORING_REGISTER_IOWQ_AFF = 17,
+IORING_UNREGISTER_IOWQ_AFF = 18,
+IORING_REGISTER_IOWQ_MAX_WORKERS = 19,
+IORING_REGISTER_RING_FDS = 20,
+IORING_UNREGISTER_RING_FDS = 21,
+IORING_REGISTER_PBUF_RING = 22,
+IORING_UNREGISTER_PBUF_RING = 23,
+IORING_REGISTER_SYNC_CANCEL = 24,
+IORING_REGISTER_FILE_ALLOC_RANGE = 25,
+IORING_REGISTER_LAST = 26,
+}
+pub const IO_WQ_BOUND: _bindgen_ty_11 = _bindgen_ty_11::IO_WQ_BOUND;
+pub const IO_WQ_UNBOUND: _bindgen_ty_11 = _bindgen_ty_11::IO_WQ_UNBOUND;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_11 {
+IO_WQ_BOUND = 0,
+IO_WQ_UNBOUND = 1,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_files_update {
+pub offset: __u32,
+pub resv: __u32,
+pub fds: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_rsrc_register {
+pub nr: __u32,
+pub flags: __u32,
+pub resv2: __u64,
+pub data: __u64,
+pub tags: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_rsrc_update {
+pub offset: __u32,
+pub resv: __u32,
+pub data: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_rsrc_update2 {
+pub offset: __u32,
+pub resv: __u32,
+pub data: __u64,
+pub tags: __u64,
+pub nr: __u32,
+pub resv2: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_notification_slot {
+pub tag: __u64,
+pub resv: [__u64; 3usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_notification_register {
+pub nr_slots: __u32,
+pub resv: __u32,
+pub resv2: __u64,
+pub data: __u64,
+pub resv3: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_probe_op {
+pub op: __u8,
+pub resv: __u8,
+pub flags: __u16,
+pub resv2: __u32,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct io_uring_probe {
+pub last_op: __u8,
+pub ops_len: __u8,
+pub resv: __u16,
+pub resv2: [__u32; 3usize],
+pub ops: __IncompleteArrayField<io_uring_probe_op>,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct io_uring_restriction {
+pub opcode: __u16,
+pub __bindgen_anon_1: io_uring_restriction__bindgen_ty_1,
+pub resv: __u8,
+pub resv2: [__u32; 3usize],
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union io_uring_restriction__bindgen_ty_1 {
+pub register_op: __u8,
+pub sqe_op: __u8,
+pub sqe_flags: __u8,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_buf {
+pub addr: __u64,
+pub len: __u32,
+pub bid: __u16,
+pub resv: __u16,
+}
+#[repr(C)]
+pub struct io_uring_buf_ring {
+pub __bindgen_anon_1: io_uring_buf_ring__bindgen_ty_1,
+}
+#[repr(C)]
+pub struct io_uring_buf_ring__bindgen_ty_1 {
+pub __bindgen_anon_1: __BindgenUnionField<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>,
+pub bufs: __BindgenUnionField<[io_uring_buf; 0usize]>,
+pub bindgen_union_field: [u64; 2usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1 {
+pub resv1: __u64,
+pub resv2: __u32,
+pub resv3: __u16,
+pub tail: __u16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_buf_reg {
+pub ring_addr: __u64,
+pub ring_entries: __u32,
+pub bgid: __u16,
+pub pad: __u16,
+pub resv: [__u64; 3usize],
+}
+pub const IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_12 = _bindgen_ty_12::IORING_RESTRICTION_REGISTER_OP;
+pub const IORING_RESTRICTION_SQE_OP: _bindgen_ty_12 = _bindgen_ty_12::IORING_RESTRICTION_SQE_OP;
+pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_12 = _bindgen_ty_12::IORING_RESTRICTION_SQE_FLAGS_ALLOWED;
+pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_12 = _bindgen_ty_12::IORING_RESTRICTION_SQE_FLAGS_REQUIRED;
+pub const IORING_RESTRICTION_LAST: _bindgen_ty_12 = _bindgen_ty_12::IORING_RESTRICTION_LAST;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_12 {
+IORING_RESTRICTION_REGISTER_OP = 0,
+IORING_RESTRICTION_SQE_OP = 1,
+IORING_RESTRICTION_SQE_FLAGS_ALLOWED = 2,
+IORING_RESTRICTION_SQE_FLAGS_REQUIRED = 3,
+IORING_RESTRICTION_LAST = 4,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_getevents_arg {
+pub sigmask: __u64,
+pub sigmask_sz: __u32,
+pub pad: __u32,
+pub ts: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_sync_cancel_reg {
+pub addr: __u64,
+pub fd: __s32,
+pub flags: __u32,
+pub timeout: __kernel_timespec,
+pub pad: [__u64; 4usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_file_index_range {
+pub off: __u32,
+pub len: __u32,
+pub resv: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct io_uring_recvmsg_out {
+pub namelen: __u32,
+pub controllen: __u32,
+pub payloadlen: __u32,
+pub flags: __u32,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct sockaddr {
+pub __storage: __kernel_sockaddr_storage,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct linger {
+pub l_onoff: crate::ctypes::c_int,
+pub l_linger: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct linux_dirent64 {
+pub d_ino: crate::ctypes::c_ulong,
+pub d_off: crate::ctypes::c_long,
+pub d_reclen: __u16,
+pub d_type: __u8,
+pub d_name: __IncompleteArrayField<crate::ctypes::c_char>,
+}
+pub type socklen_t = crate::ctypes::c_uint;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct stat {
+pub st_dev: crate::ctypes::c_ulong,
+pub st_ino: crate::ctypes::c_ulong,
+pub st_mode: crate::ctypes::c_uint,
+pub st_nlink: crate::ctypes::c_uint,
+pub st_uid: crate::ctypes::c_uint,
+pub st_gid: crate::ctypes::c_uint,
+pub st_rdev: crate::ctypes::c_ulong,
+pub __pad1: crate::ctypes::c_ulong,
+pub st_size: crate::ctypes::c_long,
+pub st_blksize: crate::ctypes::c_int,
+pub __pad2: crate::ctypes::c_int,
+pub st_blocks: crate::ctypes::c_long,
+pub st_atime: crate::ctypes::c_long,
+pub st_atime_nsec: crate::ctypes::c_ulong,
+pub st_mtime: crate::ctypes::c_long,
+pub st_mtime_nsec: crate::ctypes::c_ulong,
+pub st_ctime: crate::ctypes::c_long,
+pub st_ctime_nsec: crate::ctypes::c_ulong,
+pub __unused4: crate::ctypes::c_uint,
+pub __unused5: crate::ctypes::c_uint,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct statfs {
+pub f_type: __kernel_long_t,
+pub f_bsize: __kernel_long_t,
+pub f_blocks: __kernel_long_t,
+pub f_bfree: __kernel_long_t,
+pub f_bavail: __kernel_long_t,
+pub f_files: __kernel_long_t,
+pub f_ffree: __kernel_long_t,
+pub f_fsid: __kernel_fsid_t,
+pub f_namelen: __kernel_long_t,
+pub f_frsize: __kernel_long_t,
+pub f_flags: __kernel_long_t,
+pub f_spare: [__kernel_long_t; 4usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct statfs64 {
+pub f_type: __kernel_long_t,
+pub f_bsize: __kernel_long_t,
+pub f_blocks: __u64,
+pub f_bfree: __u64,
+pub f_bavail: __u64,
+pub f_files: __u64,
+pub f_ffree: __u64,
+pub f_fsid: __kernel_fsid_t,
+pub f_namelen: __kernel_long_t,
+pub f_frsize: __kernel_long_t,
+pub f_flags: __kernel_long_t,
+pub f_spare: [__kernel_long_t; 4usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct compat_statfs64 {
+pub f_type: __u32,
+pub f_bsize: __u32,
+pub f_blocks: __u64,
+pub f_bfree: __u64,
+pub f_bavail: __u64,
+pub f_files: __u64,
+pub f_ffree: __u64,
+pub f_fsid: __kernel_fsid_t,
+pub f_namelen: __u32,
+pub f_frsize: __u32,
+pub f_flags: __u32,
+pub f_spare: [__u32; 4usize],
+}
+pub type __fsword_t = __kernel_long_t;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct user_desc {
+pub entry_number: crate::ctypes::c_uint,
+pub base_addr: crate::ctypes::c_uint,
+pub limit: crate::ctypes::c_uint,
+pub _bitfield_align_1: [u8; 0],
+pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
+pub __bindgen_padding_0: [u8; 3usize],
+}
+impl user_desc {
+#[inline]
+pub fn seg_32bit(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
+}
+#[inline]
+pub fn set_seg_32bit(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(0usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn contents(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
+}
+#[inline]
+pub fn set_contents(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(1usize, 2u8, val as u64)
+}
+}
+#[inline]
+pub fn read_exec_only(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
+}
+#[inline]
+pub fn set_read_exec_only(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(3usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn limit_in_pages(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
+}
+#[inline]
+pub fn set_limit_in_pages(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(4usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn seg_not_present(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
+}
+#[inline]
+pub fn set_seg_not_present(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(5usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn useable(&self) -> crate::ctypes::c_uint {
+unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
+}
+#[inline]
+pub fn set_useable(&mut self, val: crate::ctypes::c_uint) {
+unsafe {
+let val: u32 = ::core::mem::transmute(val);
+self._bitfield_1.set(6usize, 1u8, val as u64)
+}
+}
+#[inline]
+pub fn new_bitfield_1(seg_32bit: crate::ctypes::c_uint, contents: crate::ctypes::c_uint, read_exec_only: crate::ctypes::c_uint, limit_in_pages: crate::ctypes::c_uint, seg_not_present: crate::ctypes::c_uint, useable: crate::ctypes::c_uint) -> __BindgenBitfieldUnit<[u8; 1usize]> {
+let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
+__bindgen_bitfield_unit.set(0usize, 1u8, {
+let seg_32bit: u32 = unsafe { ::core::mem::transmute(seg_32bit) };
+seg_32bit as u64
+});
+__bindgen_bitfield_unit.set(1usize, 2u8, {
+let contents: u32 = unsafe { ::core::mem::transmute(contents) };
+contents as u64
+});
+__bindgen_bitfield_unit.set(3usize, 1u8, {
+let read_exec_only: u32 = unsafe { ::core::mem::transmute(read_exec_only) };
+read_exec_only as u64
+});
+__bindgen_bitfield_unit.set(4usize, 1u8, {
+let limit_in_pages: u32 = unsafe { ::core::mem::transmute(limit_in_pages) };
+limit_in_pages as u64
+});
+__bindgen_bitfield_unit.set(5usize, 1u8, {
+let seg_not_present: u32 = unsafe { ::core::mem::transmute(seg_not_present) };
+seg_not_present as u64
+});
+__bindgen_bitfield_unit.set(6usize, 1u8, {
+let useable: u32 = unsafe { ::core::mem::transmute(useable) };
+useable as u64
+});
+__bindgen_bitfield_unit
+}
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct msghdr {
+pub msg_name: *mut crate::ctypes::c_void,
+pub msg_namelen: crate::ctypes::c_int,
+pub msg_iov: *mut iovec,
+pub msg_iovlen: size_t,
+pub msg_control: *mut crate::ctypes::c_void,
+pub msg_controllen: size_t,
+pub msg_flags: crate::ctypes::c_uint,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct cmsghdr {
+pub cmsg_len: size_t,
+pub cmsg_level: crate::ctypes::c_int,
+pub cmsg_type: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ucred {
+pub pid: __u32,
+pub uid: __u32,
+pub gid: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct mmsghdr {
+pub msg_hdr: msghdr,
+pub msg_len: crate::ctypes::c_uint,
+}
diff --git a/vendor/linux-raw-sys/src/loongarch64/ioctl.rs b/vendor/linux-raw-sys/src/loongarch64/ioctl.rs
new file mode 100644
index 000000000..1b6c25e1f
--- /dev/null
+++ b/vendor/linux-raw-sys/src/loongarch64/ioctl.rs
@@ -0,0 +1,1465 @@
+/* automatically generated by rust-bindgen 0.59.2 */
+
+pub const FIONREAD: u32 = 21531;
+pub const FIONBIO: u32 = 21537;
+pub const FIOCLEX: u32 = 21585;
+pub const FIONCLEX: u32 = 21584;
+pub const FIOASYNC: u32 = 21586;
+pub const FIOQSIZE: u32 = 21600;
+pub const TCXONC: u32 = 21514;
+pub const TCFLSH: u32 = 21515;
+pub const TIOCSCTTY: u32 = 21518;
+pub const TIOCSPGRP: u32 = 21520;
+pub const TIOCOUTQ: u32 = 21521;
+pub const TIOCSTI: u32 = 21522;
+pub const TIOCSWINSZ: u32 = 21524;
+pub const TIOCMGET: u32 = 21525;
+pub const TIOCMBIS: u32 = 21526;
+pub const TIOCMBIC: u32 = 21527;
+pub const TIOCMSET: u32 = 21528;
+pub const TIOCSSOFTCAR: u32 = 21530;
+pub const TIOCLINUX: u32 = 21532;
+pub const TIOCCONS: u32 = 21533;
+pub const TIOCSSERIAL: u32 = 21535;
+pub const TIOCPKT: u32 = 21536;
+pub const TIOCNOTTY: u32 = 21538;
+pub const TIOCSETD: u32 = 21539;
+pub const TIOCSBRK: u32 = 21543;
+pub const TIOCCBRK: u32 = 21544;
+pub const TIOCSRS485: u32 = 21551;
+pub const TIOCSPTLCK: u32 = 1074025521;
+pub const TIOCSIG: u32 = 1074025526;
+pub const TIOCVHANGUP: u32 = 21559;
+pub const TIOCSERCONFIG: u32 = 21587;
+pub const TIOCSERGWILD: u32 = 21588;
+pub const TIOCSERSWILD: u32 = 21589;
+pub const TIOCSLCKTRMIOS: u32 = 21591;
+pub const TIOCSERGSTRUCT: u32 = 21592;
+pub const TIOCSERGETLSR: u32 = 21593;
+pub const TIOCSERGETMULTI: u32 = 21594;
+pub const TIOCSERSETMULTI: u32 = 21595;
+pub const TIOCMIWAIT: u32 = 21596;
+pub const TCGETS: u32 = 21505;
+pub const TCGETA: u32 = 21509;
+pub const TCSBRK: u32 = 21513;
+pub const TCSBRKP: u32 = 21541;
+pub const TCSETA: u32 = 21510;
+pub const TCSETAF: u32 = 21512;
+pub const TCSETAW: u32 = 21511;
+pub const TIOCEXCL: u32 = 21516;
+pub const TIOCNXCL: u32 = 21517;
+pub const TIOCGDEV: u32 = 2147767346;
+pub const TIOCGEXCL: u32 = 2147767360;
+pub const TIOCGICOUNT: u32 = 21597;
+pub const TIOCGLCKTRMIOS: u32 = 21590;
+pub const TIOCGPGRP: u32 = 21519;
+pub const TIOCGPKT: u32 = 2147767352;
+pub const TIOCGPTLCK: u32 = 2147767353;
+pub const TIOCGPTN: u32 = 2147767344;
+pub const TIOCGPTPEER: u32 = 21569;
+pub const TIOCGRS485: u32 = 21550;
+pub const TIOCGSERIAL: u32 = 21534;
+pub const TIOCGSID: u32 = 21545;
+pub const TIOCGSOFTCAR: u32 = 21529;
+pub const TIOCGWINSZ: u32 = 21523;
+pub const TCGETS2: u32 = 2150388778;
+pub const TCGETX: u32 = 21554;
+pub const TCSETS: u32 = 21506;
+pub const TCSETS2: u32 = 1076646955;
+pub const TCSETSF: u32 = 21508;
+pub const TCSETSF2: u32 = 1076646957;
+pub const TCSETSW: u32 = 21507;
+pub const TCSETSW2: u32 = 1076646956;
+pub const TCSETX: u32 = 21555;
+pub const TCSETXF: u32 = 21556;
+pub const TCSETXW: u32 = 21557;
+pub const TIOCGETD: u32 = 21540;
+pub const MTIOCGET: u32 = 2150657282;
+pub const BLKSSZGET: u32 = 4712;
+pub const BLKPBSZGET: u32 = 4731;
+pub const BLKROSET: u32 = 4701;
+pub const BLKROGET: u32 = 4702;
+pub const BLKRRPART: u32 = 4703;
+pub const BLKGETSIZE: u32 = 4704;
+pub const BLKFLSBUF: u32 = 4705;
+pub const BLKRASET: u32 = 4706;
+pub const BLKRAGET: u32 = 4707;
+pub const BLKFRASET: u32 = 4708;
+pub const BLKFRAGET: u32 = 4709;
+pub const BLKSECTSET: u32 = 4710;
+pub const BLKSECTGET: u32 = 4711;
+pub const BLKPG: u32 = 4713;
+pub const BLKBSZGET: u32 = 2148012656;
+pub const BLKBSZSET: u32 = 1074270833;
+pub const BLKGETSIZE64: u32 = 2148012658;
+pub const BLKTRACESETUP: u32 = 3225948787;
+pub const BLKTRACESTART: u32 = 4724;
+pub const BLKTRACESTOP: u32 = 4725;
+pub const BLKTRACETEARDOWN: u32 = 4726;
+pub const BLKDISCARD: u32 = 4727;
+pub const BLKIOMIN: u32 = 4728;
+pub const BLKIOOPT: u32 = 4729;
+pub const BLKALIGNOFF: u32 = 4730;
+pub const BLKDISCARDZEROES: u32 = 4732;
+pub const BLKSECDISCARD: u32 = 4733;
+pub const BLKROTATIONAL: u32 = 4734;
+pub const BLKZEROOUT: u32 = 4735;
+pub const UFFDIO_REGISTER: u32 = 3223366144;
+pub const UFFDIO_UNREGISTER: u32 = 2148575745;
+pub const UFFDIO_WAKE: u32 = 2148575746;
+pub const UFFDIO_COPY: u32 = 3223890435;
+pub const UFFDIO_ZEROPAGE: u32 = 3223366148;
+pub const UFFDIO_WRITEPROTECT: u32 = 3222841862;
+pub const UFFDIO_API: u32 = 3222841919;
+pub const NS_GET_USERNS: u32 = 46849;
+pub const NS_GET_PARENT: u32 = 46850;
+pub const NS_GET_NSTYPE: u32 = 46851;
+pub const KDGETLED: u32 = 19249;
+pub const KDSETLED: u32 = 19250;
+pub const KDGKBLED: u32 = 19300;
+pub const KDSKBLED: u32 = 19301;
+pub const KDGKBTYPE: u32 = 19251;
+pub const KDADDIO: u32 = 19252;
+pub const KDDELIO: u32 = 19253;
+pub const KDENABIO: u32 = 19254;
+pub const KDDISABIO: u32 = 19255;
+pub const KDSETMODE: u32 = 19258;
+pub const KDGETMODE: u32 = 19259;
+pub const KDMKTONE: u32 = 19248;
+pub const KIOCSOUND: u32 = 19247;
+pub const GIO_CMAP: u32 = 19312;
+pub const PIO_CMAP: u32 = 19313;
+pub const GIO_FONT: u32 = 19296;
+pub const GIO_FONTX: u32 = 19307;
+pub const PIO_FONT: u32 = 19297;
+pub const PIO_FONTX: u32 = 19308;
+pub const PIO_FONTRESET: u32 = 19309;
+pub const GIO_SCRNMAP: u32 = 19264;
+pub const GIO_UNISCRNMAP: u32 = 19305;
+pub const PIO_SCRNMAP: u32 = 19265;
+pub const PIO_UNISCRNMAP: u32 = 19306;
+pub const GIO_UNIMAP: u32 = 19302;
+pub const PIO_UNIMAP: u32 = 19303;
+pub const PIO_UNIMAPCLR: u32 = 19304;
+pub const KDGKBMODE: u32 = 19268;
+pub const KDSKBMODE: u32 = 19269;
+pub const KDGKBMETA: u32 = 19298;
+pub const KDSKBMETA: u32 = 19299;
+pub const KDGKBENT: u32 = 19270;
+pub const KDSKBENT: u32 = 19271;
+pub const KDGKBSENT: u32 = 19272;
+pub const KDSKBSENT: u32 = 19273;
+pub const KDGKBDIACR: u32 = 19274;
+pub const KDGETKEYCODE: u32 = 19276;
+pub const KDSETKEYCODE: u32 = 19277;
+pub const KDSIGACCEPT: u32 = 19278;
+pub const VT_OPENQRY: u32 = 22016;
+pub const VT_GETMODE: u32 = 22017;
+pub const VT_SETMODE: u32 = 22018;
+pub const VT_GETSTATE: u32 = 22019;
+pub const VT_RELDISP: u32 = 22021;
+pub const VT_ACTIVATE: u32 = 22022;
+pub const VT_WAITACTIVE: u32 = 22023;
+pub const VT_DISALLOCATE: u32 = 22024;
+pub const VT_RESIZE: u32 = 22025;
+pub const VT_RESIZEX: u32 = 22026;
+pub const FIOSETOWN: u32 = 35073;
+pub const SIOCSPGRP: u32 = 35074;
+pub const FIOGETOWN: u32 = 35075;
+pub const SIOCGPGRP: u32 = 35076;
+pub const SIOCATMARK: u32 = 35077;
+pub const SIOCGSTAMP: u32 = 35078;
+pub const TIOCINQ: u32 = 21531;
+pub const SIOCADDRT: u32 = 35083;
+pub const SIOCDELRT: u32 = 35084;
+pub const SIOCGIFNAME: u32 = 35088;
+pub const SIOCSIFLINK: u32 = 35089;
+pub const SIOCGIFCONF: u32 = 35090;
+pub const SIOCGIFFLAGS: u32 = 35091;
+pub const SIOCSIFFLAGS: u32 = 35092;
+pub const SIOCGIFADDR: u32 = 35093;
+pub const SIOCSIFADDR: u32 = 35094;
+pub const SIOCGIFDSTADDR: u32 = 35095;
+pub const SIOCSIFDSTADDR: u32 = 35096;
+pub const SIOCGIFBRDADDR: u32 = 35097;
+pub const SIOCSIFBRDADDR: u32 = 35098;
+pub const SIOCGIFNETMASK: u32 = 35099;
+pub const SIOCSIFNETMASK: u32 = 35100;
+pub const SIOCGIFMETRIC: u32 = 35101;
+pub const SIOCSIFMETRIC: u32 = 35102;
+pub const SIOCGIFMEM: u32 = 35103;
+pub const SIOCSIFMEM: u32 = 35104;
+pub const SIOCGIFMTU: u32 = 35105;
+pub const SIOCSIFMTU: u32 = 35106;
+pub const SIOCSIFHWADDR: u32 = 35108;
+pub const SIOCGIFENCAP: u32 = 35109;
+pub const SIOCSIFENCAP: u32 = 35110;
+pub const SIOCGIFHWADDR: u32 = 35111;
+pub const SIOCGIFSLAVE: u32 = 35113;
+pub const SIOCSIFSLAVE: u32 = 35120;
+pub const SIOCADDMULTI: u32 = 35121;
+pub const SIOCDELMULTI: u32 = 35122;
+pub const SIOCDARP: u32 = 35155;
+pub const SIOCGARP: u32 = 35156;
+pub const SIOCSARP: u32 = 35157;
+pub const SIOCDRARP: u32 = 35168;
+pub const SIOCGRARP: u32 = 35169;
+pub const SIOCSRARP: u32 = 35170;
+pub const SIOCGIFMAP: u32 = 35184;
+pub const SIOCSIFMAP: u32 = 35185;
+pub const SIOCRTMSG: u32 = 35085;
+pub const SIOCSIFNAME: u32 = 35107;
+pub const SIOCGIFINDEX: u32 = 35123;
+pub const SIOGIFINDEX: u32 = 35123;
+pub const SIOCSIFPFLAGS: u32 = 35124;
+pub const SIOCGIFPFLAGS: u32 = 35125;
+pub const SIOCDIFADDR: u32 = 35126;
+pub const SIOCSIFHWBROADCAST: u32 = 35127;
+pub const SIOCGIFCOUNT: u32 = 35128;
+pub const SIOCGIFBR: u32 = 35136;
+pub const SIOCSIFBR: u32 = 35137;
+pub const SIOCGIFTXQLEN: u32 = 35138;
+pub const SIOCSIFTXQLEN: u32 = 35139;
+pub const SIOCADDDLCI: u32 = 35200;
+pub const SIOCDELDLCI: u32 = 35201;
+pub const SIOCDEVPRIVATE: u32 = 35312;
+pub const SIOCPROTOPRIVATE: u32 = 35296;
+pub const FIBMAP: u32 = 1;
+pub const FIGETBSZ: u32 = 2;
+pub const FIFREEZE: u32 = 3221510263;
+pub const FITHAW: u32 = 3221510264;
+pub const FITRIM: u32 = 3222820985;
+pub const FICLONE: u32 = 1074041865;
+pub const FICLONERANGE: u32 = 1075876877;
+pub const FIDEDUPERANGE: u32 = 3222836278;
+pub const FS_IOC_GETFLAGS: u32 = 2148034049;
+pub const FS_IOC_SETFLAGS: u32 = 1074292226;
+pub const FS_IOC_GETVERSION: u32 = 2148038145;
+pub const FS_IOC_SETVERSION: u32 = 1074296322;
+pub const FS_IOC_FIEMAP: u32 = 3223348747;
+pub const FS_IOC32_GETFLAGS: u32 = 2147771905;
+pub const FS_IOC32_SETFLAGS: u32 = 1074030082;
+pub const FS_IOC32_GETVERSION: u32 = 2147776001;
+pub const FS_IOC32_SETVERSION: u32 = 1074034178;
+pub const FS_IOC_FSGETXATTR: u32 = 2149341215;
+pub const FS_IOC_FSSETXATTR: u32 = 1075599392;
+pub const FS_IOC_GETFSLABEL: u32 = 2164298801;
+pub const FS_IOC_SETFSLABEL: u32 = 1090556978;
+pub const VIDIOC_SUBDEV_QUERYSTD: u32 = 2148030015;
+pub const AUTOFS_DEV_IOCTL_CLOSEMOUNT: u32 = 3222836085;
+pub const LIRC_SET_SEND_CARRIER: u32 = 1074030867;
+pub const AUTOFS_IOC_PROTOSUBVER: u32 = 2147783527;
+pub const PTP_SYS_OFFSET_PRECISE: u32 = 3225435400;
+pub const FSI_SCOM_WRITE: u32 = 3223352066;
+pub const ATM_GETCIRANGE: u32 = 1074815370;
+pub const DMA_BUF_SET_NAME_B: u32 = 1074291201;
+pub const RIO_CM_EP_GET_LIST_SIZE: u32 = 3221512961;
+pub const TUNSETPERSIST: u32 = 1074025675;
+pub const FS_IOC_GET_ENCRYPTION_POLICY: u32 = 1074554389;
+pub const CEC_RECEIVE: u32 = 3224920326;
+pub const MGSL_IOCGPARAMS: u32 = 2150657281;
+pub const ENI_SETMULT: u32 = 1074815335;
+pub const RIO_GET_EVENT_MASK: u32 = 2147773710;
+pub const LIRC_GET_MAX_TIMEOUT: u32 = 2147772681;
+pub const USBDEVFS_CLAIMINTERFACE: u32 = 2147767567;
+pub const CHIOMOVE: u32 = 1075077889;
+pub const SONYPI_IOCGBATFLAGS: u32 = 2147579399;
+pub const BTRFS_IOC_SYNC: u32 = 37896;
+pub const VIDIOC_TRY_FMT: u32 = 3234879040;
+pub const LIRC_SET_REC_MODE: u32 = 1074030866;
+pub const VIDIOC_DQEVENT: u32 = 2156418649;
+pub const RPMSG_DESTROY_EPT_IOCTL: u32 = 46338;
+pub const UVCIOC_CTRL_MAP: u32 = 3227546912;
+pub const VHOST_SET_BACKEND_FEATURES: u32 = 1074310949;
+pub const VHOST_VSOCK_SET_GUEST_CID: u32 = 1074311008;
+pub const UI_SET_KEYBIT: u32 = 1074025829;
+pub const LIRC_SET_REC_TIMEOUT: u32 = 1074030872;
+pub const FS_IOC_GET_ENCRYPTION_KEY_STATUS: u32 = 3229640218;
+pub const BTRFS_IOC_TREE_SEARCH_V2: u32 = 3228603409;
+pub const VHOST_SET_VRING_BASE: u32 = 1074310930;
+pub const RIO_ENABLE_DOORBELL_RANGE: u32 = 1074294025;
+pub const VIDIOC_TRY_EXT_CTRLS: u32 = 3223344713;
+pub const LIRC_GET_REC_MODE: u32 = 2147772674;
+pub const PPGETTIME: u32 = 2148561045;
+pub const BTRFS_IOC_RM_DEV: u32 = 1342215179;
+pub const ATM_SETBACKEND: u32 = 1073897970;
+pub const FSL_HV_IOCTL_PARTITION_START: u32 = 3222318851;
+pub const FBIO_WAITEVENT: u32 = 18056;
+pub const SWITCHTEC_IOCTL_PORT_TO_PFF: u32 = 3222034245;
+pub const NVME_IOCTL_IO_CMD: u32 = 3225964099;
+pub const IPMICTL_RECEIVE_MSG_TRUNC: u32 = 3224398091;
+pub const FDTWADDLE: u32 = 601;
+pub const NVME_IOCTL_SUBMIT_IO: u32 = 1076907586;
+pub const NILFS_IOCTL_SYNC: u32 = 2148036234;
+pub const VIDIOC_SUBDEV_S_DV_TIMINGS: u32 = 3229898327;
+pub const ASPEED_LPC_CTRL_IOCTL_GET_SIZE: u32 = 3222319616;
+pub const DM_DEV_STATUS: u32 = 3241737479;
+pub const TEE_IOC_CLOSE_SESSION: u32 = 2147787781;
+pub const NS_GETPSTAT: u32 = 3222298977;
+pub const UI_SET_PROPBIT: u32 = 1074025838;
+pub const TUNSETFILTEREBPF: u32 = 2147767521;
+pub const RIO_MPORT_MAINT_COMPTAG_SET: u32 = 1074031874;
+pub const AUTOFS_DEV_IOCTL_VERSION: u32 = 3222836081;
+pub const WDIOC_SETOPTIONS: u32 = 2147768068;
+pub const VHOST_SCSI_SET_ENDPOINT: u32 = 1088991040;
+pub const MGSL_IOCGTXIDLE: u32 = 27907;
+pub const ATM_ADDLECSADDR: u32 = 1074815374;
+pub const FSL_HV_IOCTL_GETPROP: u32 = 3223891719;
+pub const FDGETPRM: u32 = 2149581316;
+pub const HIDIOCAPPLICATION: u32 = 18434;
+pub const ENI_MEMDUMP: u32 = 1074815328;
+pub const PTP_SYS_OFFSET2: u32 = 1128283406;
+pub const VIDIOC_SUBDEV_G_DV_TIMINGS: u32 = 3229898328;
+pub const DMA_BUF_SET_NAME_A: u32 = 1074029057;
+pub const PTP_PIN_GETFUNC: u32 = 3227532550;
+pub const PTP_SYS_OFFSET_EXTENDED: u32 = 3300932873;
+pub const DFL_FPGA_PORT_UINT_SET_IRQ: u32 = 1074312776;
+pub const RTC_EPOCH_READ: u32 = 2148036621;
+pub const VIDIOC_SUBDEV_S_SELECTION: u32 = 3225441854;
+pub const VIDIOC_QUERY_EXT_CTRL: u32 = 3236451943;
+pub const ATM_GETLECSADDR: u32 = 1074815376;
+pub const FSL_HV_IOCTL_PARTITION_STOP: u32 = 3221794564;
+pub const SONET_GETDIAG: u32 = 2147770644;
+pub const ATMMPC_DATA: u32 = 25049;
+pub const IPMICTL_UNREGISTER_FOR_CMD_CHANS: u32 = 2148296989;
+pub const HIDIOCGCOLLECTIONINDEX: u32 = 1075333136;
+pub const RPMSG_CREATE_EPT_IOCTL: u32 = 1076409601;
+pub const GPIOHANDLE_GET_LINE_VALUES_IOCTL: u32 = 3225465864;
+pub const UI_DEV_SETUP: u32 = 1079792899;
+pub const ISST_IF_IO_CMD: u32 = 1074331138;
+pub const RIO_MPORT_MAINT_READ_REMOTE: u32 = 2149084423;
+pub const VIDIOC_OMAP3ISP_HIST_CFG: u32 = 3224393412;
+pub const BLKGETNRZONES: u32 = 2147750533;
+pub const VIDIOC_G_MODULATOR: u32 = 3225703990;
+pub const VBG_IOCTL_WRITE_CORE_DUMP: u32 = 3223082515;
+pub const USBDEVFS_SETINTERFACE: u32 = 2148029700;
+pub const PPPIOCGCHAN: u32 = 2147775543;
+pub const EVIOCGVERSION: u32 = 2147763457;
+pub const VHOST_NET_SET_BACKEND: u32 = 1074310960;
+pub const USBDEVFS_REAPURBNDELAY: u32 = 1074287885;
+pub const RNDZAPENTCNT: u32 = 20996;
+pub const VIDIOC_G_PARM: u32 = 3234616853;
+pub const TUNGETDEVNETNS: u32 = 21731;
+pub const LIRC_SET_MEASURE_CARRIER_MODE: u32 = 1074030877;
+pub const VHOST_SET_VRING_ERR: u32 = 1074310946;
+pub const VDUSE_VQ_SETUP: u32 = 1075872020;
+pub const AUTOFS_IOC_SETTIMEOUT: u32 = 3221787492;
+pub const VIDIOC_S_FREQUENCY: u32 = 1076647481;
+pub const F2FS_IOC_SEC_TRIM_FILE: u32 = 1075377428;
+pub const FS_IOC_REMOVE_ENCRYPTION_KEY: u32 = 3225445912;
+pub const WDIOC_GETPRETIMEOUT: u32 = 2147768073;
+pub const USBDEVFS_DROP_PRIVILEGES: u32 = 1074025758;
+pub const BTRFS_IOC_SNAP_CREATE_V2: u32 = 1342215191;
+pub const VHOST_VSOCK_SET_RUNNING: u32 = 1074048865;
+pub const STP_SET_OPTIONS: u32 = 1074275586;
+pub const FBIO_RADEON_GET_MIRROR: u32 = 2148024323;
+pub const IVTVFB_IOC_DMA_FRAME: u32 = 1075336896;
+pub const IPMICTL_SEND_COMMAND: u32 = 2150131981;
+pub const VIDIOC_G_ENC_INDEX: u32 = 2283296332;
+pub const DFL_FPGA_FME_PORT_PR: u32 = 46720;
+pub const CHIOSVOLTAG: u32 = 1076912914;
+pub const ATM_SETESIF: u32 = 1074815373;
+pub const FW_CDEV_IOC_SEND_RESPONSE: u32 = 1075323652;
+pub const PMU_IOC_GET_MODEL: u32 = 2148024835;
+pub const JSIOCGBTNMAP: u32 = 2214619700;
+pub const USBDEVFS_HUB_PORTINFO: u32 = 2155894035;
+pub const VBG_IOCTL_INTERRUPT_ALL_WAIT_FOR_EVENTS: u32 = 3222820363;
+pub const FDCLRPRM: u32 = 577;
+pub const BTRFS_IOC_SCRUB: u32 = 3288372251;
+pub const USBDEVFS_DISCONNECT: u32 = 21782;
+pub const TUNSETVNETBE: u32 = 1074025694;
+pub const ATMTCP_REMOVE: u32 = 24975;
+pub const VHOST_VDPA_GET_CONFIG: u32 = 2148052851;
+pub const PPPIOCGNPMODE: u32 = 3221779532;
+pub const FDGETDRVPRM: u32 = 2155872785;
+pub const TUNSETVNETLE: u32 = 1074025692;
+pub const PHN_SETREG: u32 = 1074294790;
+pub const PPPIOCDETACH: u32 = 1074033724;
+pub const MMTIMER_GETRES: u32 = 2148035841;
+pub const VIDIOC_SUBDEV_ENUMSTD: u32 = 3225966105;
+pub const PPGETFLAGS: u32 = 2147774618;
+pub const VDUSE_DEV_GET_FEATURES: u32 = 2148040977;
+pub const CAPI_MANUFACTURER_CMD: u32 = 3222291232;
+pub const VIDIOC_G_TUNER: u32 = 3226752541;
+pub const DM_TABLE_STATUS: u32 = 3241737484;
+pub const DM_DEV_ARM_POLL: u32 = 3241737488;
+pub const NE_CREATE_VM: u32 = 2148052512;
+pub const MEDIA_IOC_ENUM_LINKS: u32 = 3223878658;
+pub const F2FS_IOC_PRECACHE_EXTENTS: u32 = 62735;
+pub const DFL_FPGA_PORT_DMA_MAP: u32 = 46659;
+pub const MGSL_IOCGXCTRL: u32 = 27926;
+pub const FW_CDEV_IOC_SEND_REQUEST: u32 = 1076372225;
+pub const SONYPI_IOCGBLUE: u32 = 2147579400;
+pub const F2FS_IOC_DECOMPRESS_FILE: u32 = 62743;
+pub const I2OHTML: u32 = 3224398089;
+pub const VFIO_GET_API_VERSION: u32 = 15204;
+pub const IDT77105_GETSTATZ: u32 = 1074815283;
+pub const I2OPARMSET: u32 = 3223873795;
+pub const TEE_IOC_CANCEL: u32 = 2148049924;
+pub const PTP_SYS_OFFSET_PRECISE2: u32 = 3225435409;
+pub const DFL_FPGA_PORT_RESET: u32 = 46656;
+pub const PPPIOCGASYNCMAP: u32 = 2147775576;
+pub const EVIOCGKEYCODE_V2: u32 = 2150122756;
+pub const DM_DEV_SET_GEOMETRY: u32 = 3241737487;
+pub const HIDIOCSUSAGE: u32 = 1075333132;
+pub const FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE_ONCE: u32 = 1075323664;
+pub const PTP_EXTTS_REQUEST: u32 = 1074806018;
+pub const SWITCHTEC_IOCTL_EVENT_CTL: u32 = 3223869251;
+pub const WDIOC_SETPRETIMEOUT: u32 = 3221509896;
+pub const VHOST_SCSI_CLEAR_ENDPOINT: u32 = 1088991041;
+pub const JSIOCGAXES: u32 = 2147576337;
+pub const HIDIOCSFLAG: u32 = 1074022415;
+pub const PTP_PEROUT_REQUEST2: u32 = 1077427468;
+pub const PPWDATA: u32 = 1073836166;
+pub const PTP_CLOCK_GETCAPS: u32 = 2152742145;
+pub const FDGETMAXERRS: u32 = 2148794894;
+pub const TUNSETQUEUE: u32 = 1074025689;
+pub const PTP_ENABLE_PPS: u32 = 1074019588;
+pub const SIOCSIFATMTCP: u32 = 24960;
+pub const CEC_ADAP_G_LOG_ADDRS: u32 = 2153537795;
+pub const ND_IOCTL_ARS_CAP: u32 = 3223342593;
+pub const NBD_SET_BLKSIZE: u32 = 43777;
+pub const NBD_SET_TIMEOUT: u32 = 43785;
+pub const VHOST_SCSI_GET_ABI_VERSION: u32 = 1074048834;
+pub const RIO_UNMAP_INBOUND: u32 = 1074294034;
+pub const ATM_QUERYLOOP: u32 = 1074815316;
+pub const DFL_FPGA_GET_API_VERSION: u32 = 46592;
+pub const USBDEVFS_WAIT_FOR_RESUME: u32 = 21795;
+pub const FBIO_CURSOR: u32 = 3228059144;
+pub const RNDCLEARPOOL: u32 = 20998;
+pub const VIDIOC_QUERYSTD: u32 = 2148030015;
+pub const DMA_BUF_IOCTL_SYNC: u32 = 1074291200;
+pub const SCIF_RECV: u32 = 3222827783;
+pub const PTP_PIN_GETFUNC2: u32 = 3227532559;
+pub const FW_CDEV_IOC_ALLOCATE: u32 = 3223331586;
+pub const CEC_ADAP_G_CAPS: u32 = 3226231040;
+pub const VIDIOC_G_FBUF: u32 = 2150651402;
+pub const PTP_ENABLE_PPS2: u32 = 1074019597;
+pub const PCITEST_CLEAR_IRQ: u32 = 20496;
+pub const IPMICTL_SET_GETS_EVENTS_CMD: u32 = 2147772688;
+pub const BTRFS_IOC_DEVICES_READY: u32 = 2415957031;
+pub const JSIOCGAXMAP: u32 = 2151705138;
+pub const FW_CDEV_IOC_GET_CYCLE_TIMER: u32 = 2148541196;
+pub const FW_CDEV_IOC_SET_ISO_CHANNELS: u32 = 1074799383;
+pub const RTC_WIE_OFF: u32 = 28688;
+pub const PPGETMODE: u32 = 2147774616;
+pub const VIDIOC_DBG_G_REGISTER: u32 = 3224917584;
+pub const PTP_SYS_OFFSET: u32 = 1128283397;
+pub const BTRFS_IOC_SPACE_INFO: u32 = 3222311956;
+pub const VIDIOC_SUBDEV_ENUM_FRAME_SIZE: u32 = 3225441866;
+pub const ND_IOCTL_VENDOR: u32 = 3221769737;
+pub const SCIF_VREADFROM: u32 = 3223876364;
+pub const BTRFS_IOC_TRANS_START: u32 = 37894;
+pub const INOTIFY_IOC_SETNEXTWD: u32 = 1074022656;
+pub const SNAPSHOT_GET_IMAGE_SIZE: u32 = 2148021006;
+pub const TUNDETACHFILTER: u32 = 1074812118;
+pub const ND_IOCTL_CLEAR_ERROR: u32 = 3223342596;
+pub const IOC_PR_CLEAR: u32 = 1074819277;
+pub const SCIF_READFROM: u32 = 3223876362;
+pub const PPPIOCGDEBUG: u32 = 2147775553;
+pub const BLKGETZONESZ: u32 = 2147750532;
+pub const HIDIOCGUSAGES: u32 = 3491514387;
+pub const SONYPI_IOCGTEMP: u32 = 2147579404;
+pub const UI_SET_MSCBIT: u32 = 1074025832;
+pub const APM_IOC_SUSPEND: u32 = 16642;
+pub const BTRFS_IOC_TREE_SEARCH: u32 = 3489698833;
+pub const RTC_PLL_GET: u32 = 2149609489;
+pub const RIO_CM_EP_GET_LIST: u32 = 3221512962;
+pub const USBDEVFS_DISCSIGNAL: u32 = 2148553998;
+pub const LIRC_GET_MIN_TIMEOUT: u32 = 2147772680;
+pub const SWITCHTEC_IOCTL_EVENT_SUMMARY_LEGACY: u32 = 2174244674;
+pub const DM_TARGET_MSG: u32 = 3241737486;
+pub const SONYPI_IOCGBAT1REM: u32 = 2147644931;
+pub const EVIOCSFF: u32 = 1076905344;
+pub const TUNSETGROUP: u32 = 1074025678;
+pub const EVIOCGKEYCODE: u32 = 2148025604;
+pub const KCOV_REMOTE_ENABLE: u32 = 1075340134;
+pub const ND_IOCTL_GET_CONFIG_SIZE: u32 = 3222031876;
+pub const FDEJECT: u32 = 602;
+pub const TUNSETOFFLOAD: u32 = 1074025680;
+pub const PPPIOCCONNECT: u32 = 1074033722;
+pub const ATM_ADDADDR: u32 = 1074815368;
+pub const VDUSE_DEV_INJECT_CONFIG_IRQ: u32 = 33043;
+pub const AUTOFS_DEV_IOCTL_ASKUMOUNT: u32 = 3222836093;
+pub const VHOST_VDPA_GET_STATUS: u32 = 2147594097;
+pub const CCISS_PASSTHRU: u32 = 3227009547;
+pub const MGSL_IOCCLRMODCOUNT: u32 = 27919;
+pub const TEE_IOC_SUPPL_SEND: u32 = 2148574215;
+pub const ATMARPD_CTRL: u32 = 25057;
+pub const UI_ABS_SETUP: u32 = 1075598596;
+pub const UI_DEV_DESTROY: u32 = 21762;
+pub const BTRFS_IOC_QUOTA_CTL: u32 = 3222311976;
+pub const RTC_AIE_ON: u32 = 28673;
+pub const AUTOFS_IOC_EXPIRE: u32 = 2165085029;
+pub const PPPIOCSDEBUG: u32 = 1074033728;
+pub const GPIO_V2_LINE_SET_VALUES_IOCTL: u32 = 3222320143;
+pub const PPPIOCSMRU: u32 = 1074033746;
+pub const CCISS_DEREGDISK: u32 = 16908;
+pub const UI_DEV_CREATE: u32 = 21761;
+pub const FUSE_DEV_IOC_CLONE: u32 = 2147804416;
+pub const BTRFS_IOC_START_SYNC: u32 = 2148045848;
+pub const NILFS_IOCTL_DELETE_CHECKPOINT: u32 = 1074294401;
+pub const SNAPSHOT_AVAIL_SWAP_SIZE: u32 = 2148021011;
+pub const DM_TABLE_CLEAR: u32 = 3241737482;
+pub const CCISS_GETINTINFO: u32 = 2148024834;
+pub const PPPIOCSASYNCMAP: u32 = 1074033751;
+pub const I2OEVTGET: u32 = 2154326283;
+pub const NVME_IOCTL_RESET: u32 = 20036;
+pub const PPYIELD: u32 = 28813;
+pub const NVME_IOCTL_IO64_CMD: u32 = 3226488392;
+pub const TUNSETCARRIER: u32 = 1074025698;
+pub const DM_DEV_WAIT: u32 = 3241737480;
+pub const RTC_WIE_ON: u32 = 28687;
+pub const MEDIA_IOC_DEVICE_INFO: u32 = 3238034432;
+pub const RIO_CM_CHAN_CREATE: u32 = 3221381891;
+pub const MGSL_IOCSPARAMS: u32 = 1076915456;
+pub const RTC_SET_TIME: u32 = 1076129802;
+pub const VHOST_RESET_OWNER: u32 = 44802;
+pub const IOC_OPAL_PSID_REVERT_TPR: u32 = 1091072232;
+pub const AUTOFS_DEV_IOCTL_OPENMOUNT: u32 = 3222836084;
+pub const UDF_GETEABLOCK: u32 = 2148035649;
+pub const VFIO_IOMMU_MAP_DMA: u32 = 15217;
+pub const VIDIOC_SUBSCRIBE_EVENT: u32 = 1075861082;
+pub const HIDIOCGFLAG: u32 = 2147764238;
+pub const HIDIOCGUCODE: u32 = 3222816781;
+pub const VIDIOC_OMAP3ISP_AF_CFG: u32 = 3226228421;
+pub const DM_REMOVE_ALL: u32 = 3241737473;
+pub const ASPEED_LPC_CTRL_IOCTL_MAP: u32 = 1074835969;
+pub const CCISS_GETFIRMVER: u32 = 2147762696;
+pub const ND_IOCTL_ARS_START: u32 = 3223342594;
+pub const PPPIOCSMRRU: u32 = 1074033723;
+pub const CEC_ADAP_S_LOG_ADDRS: u32 = 3227279620;
+pub const RPROC_GET_SHUTDOWN_ON_RELEASE: u32 = 2147792642;
+pub const DMA_HEAP_IOCTL_ALLOC: u32 = 3222816768;
+pub const PPSETTIME: u32 = 1074819222;
+pub const RTC_ALM_READ: u32 = 2149871624;
+pub const VDUSE_SET_API_VERSION: u32 = 1074299137;
+pub const RIO_MPORT_MAINT_WRITE_REMOTE: u32 = 1075342600;
+pub const VIDIOC_SUBDEV_S_CROP: u32 = 3224917564;
+pub const USBDEVFS_CONNECT: u32 = 21783;
+pub const SYNC_IOC_FILE_INFO: u32 = 3224911364;
+pub const ATMARP_MKIP: u32 = 25058;
+pub const VFIO_IOMMU_SPAPR_TCE_GET_INFO: u32 = 15216;
+pub const CCISS_GETHEARTBEAT: u32 = 2147762694;
+pub const ATM_RSTADDR: u32 = 1074815367;
+pub const NBD_SET_SIZE: u32 = 43778;
+pub const UDF_GETVOLIDENT: u32 = 2148035650;
+pub const GPIO_V2_LINE_GET_VALUES_IOCTL: u32 = 3222320142;
+pub const MGSL_IOCSTXIDLE: u32 = 27906;
+pub const FSL_HV_IOCTL_SETPROP: u32 = 3223891720;
+pub const BTRFS_IOC_GET_DEV_STATS: u32 = 3288896564;
+pub const PPRSTATUS: u32 = 2147577985;
+pub const MGSL_IOCTXENABLE: u32 = 27908;
+pub const UDF_GETEASIZE: u32 = 2147773504;
+pub const NVME_IOCTL_ADMIN64_CMD: u32 = 3226488391;
+pub const VHOST_SET_OWNER: u32 = 44801;
+pub const RIO_ALLOC_DMA: u32 = 3222826259;
+pub const RIO_CM_CHAN_ACCEPT: u32 = 3221775111;
+pub const I2OHRTGET: u32 = 3222825217;
+pub const ATM_SETCIRANGE: u32 = 1074815371;
+pub const HPET_IE_ON: u32 = 26625;
+pub const PERF_EVENT_IOC_ID: u32 = 2148017159;
+pub const TUNSETSNDBUF: u32 = 1074025684;
+pub const PTP_PIN_SETFUNC: u32 = 1080048903;
+pub const PPPIOCDISCONN: u32 = 29753;
+pub const VIDIOC_QUERYCTRL: u32 = 3225703972;
+pub const PPEXCL: u32 = 28815;
+pub const PCITEST_MSI: u32 = 1074024451;
+pub const FDWERRORCLR: u32 = 598;
+pub const AUTOFS_IOC_FAIL: u32 = 37729;
+pub const USBDEVFS_IOCTL: u32 = 3222295826;
+pub const VIDIOC_S_STD: u32 = 1074288152;
+pub const F2FS_IOC_RESIZE_FS: u32 = 1074328848;
+pub const SONET_SETDIAG: u32 = 3221512466;
+pub const BTRFS_IOC_DEFRAG: u32 = 1342215170;
+pub const CCISS_GETDRIVVER: u32 = 2147762697;
+pub const IPMICTL_GET_TIMING_PARMS_CMD: u32 = 2148034839;
+pub const HPET_IRQFREQ: u32 = 1074292742;
+pub const ATM_GETESI: u32 = 1074815365;
+pub const CCISS_GETLUNINFO: u32 = 2148286993;
+pub const AUTOFS_DEV_IOCTL_ISMOUNTPOINT: u32 = 3222836094;
+pub const TEE_IOC_SHM_ALLOC: u32 = 3222316033;
+pub const PERF_EVENT_IOC_SET_BPF: u32 = 1074013192;
+pub const UDMABUF_CREATE_LIST: u32 = 1074296131;
+pub const VHOST_SET_LOG_BASE: u32 = 1074310916;
+pub const ZATM_GETPOOL: u32 = 1074815329;
+pub const BR2684_SETFILT: u32 = 1075601808;
+pub const RNDGETPOOL: u32 = 2148028930;
+pub const PPS_GETPARAMS: u32 = 2148036769;
+pub const IOC_PR_RESERVE: u32 = 1074819273;
+pub const VIDIOC_TRY_DECODER_CMD: u32 = 3225966177;
+pub const RIO_CM_CHAN_CLOSE: u32 = 1073898244;
+pub const VIDIOC_DV_TIMINGS_CAP: u32 = 3230684772;
+pub const IOCTL_MEI_CONNECT_CLIENT_VTAG: u32 = 3222554628;
+pub const PMU_IOC_GET_BACKLIGHT: u32 = 2148024833;
+pub const USBDEVFS_GET_CAPABILITIES: u32 = 2147767578;
+pub const SCIF_WRITETO: u32 = 3223876363;
+pub const UDF_RELOCATE_BLOCKS: u32 = 3221777475;
+pub const FSL_HV_IOCTL_PARTITION_RESTART: u32 = 3221794561;
+pub const CCISS_REGNEWD: u32 = 16910;
+pub const FAT_IOCTL_SET_ATTRIBUTES: u32 = 1074033169;
+pub const VIDIOC_CREATE_BUFS: u32 = 3238024796;
+pub const CAPI_GET_VERSION: u32 = 3222291207;
+pub const SWITCHTEC_IOCTL_EVENT_SUMMARY: u32 = 2228770626;
+pub const VFIO_EEH_PE_OP: u32 = 15225;
+pub const FW_CDEV_IOC_CREATE_ISO_CONTEXT: u32 = 3223331592;
+pub const F2FS_IOC_RELEASE_COMPRESS_BLOCKS: u32 = 2148070674;
+pub const NBD_SET_SIZE_BLOCKS: u32 = 43783;
+pub const IPMI_BMC_IOCTL_SET_SMS_ATN: u32 = 45312;
+pub const ASPEED_P2A_CTRL_IOCTL_GET_MEMORY_CONFIG: u32 = 3222319873;
+pub const VIDIOC_S_AUDOUT: u32 = 1077171762;
+pub const VIDIOC_S_FMT: u32 = 3234878981;
+pub const PPPIOCATTACH: u32 = 1074033725;
+pub const VHOST_GET_VRING_BUSYLOOP_TIMEOUT: u32 = 1074310948;
+pub const FS_IOC_MEASURE_VERITY: u32 = 3221513862;
+pub const CCISS_BIG_PASSTHRU: u32 = 3227533842;
+pub const IPMICTL_SET_MY_LUN_CMD: u32 = 2147772691;
+pub const PCITEST_LEGACY_IRQ: u32 = 20482;
+pub const USBDEVFS_SUBMITURB: u32 = 2151175434;
+pub const AUTOFS_IOC_READY: u32 = 37728;
+pub const BTRFS_IOC_SEND: u32 = 1078498342;
+pub const VIDIOC_G_EXT_CTRLS: u32 = 3223344711;
+pub const JSIOCSBTNMAP: u32 = 1140877875;
+pub const PPPIOCSFLAGS: u32 = 1074033753;
+pub const NVRAM_INIT: u32 = 28736;
+pub const RFKILL_IOCTL_NOINPUT: u32 = 20993;
+pub const BTRFS_IOC_BALANCE: u32 = 1342215180;
+pub const FS_IOC_GETFSMAP: u32 = 3233830971;
+pub const IPMICTL_GET_MY_CHANNEL_LUN_CMD: u32 = 2147772699;
+pub const STP_POLICY_ID_GET: u32 = 2148541697;
+pub const PPSETFLAGS: u32 = 1074032795;
+pub const CEC_ADAP_S_PHYS_ADDR: u32 = 1073897730;
+pub const ATMTCP_CREATE: u32 = 24974;
+pub const IPMI_BMC_IOCTL_FORCE_ABORT: u32 = 45314;
+pub const PPPIOCGXASYNCMAP: u32 = 2149610576;
+pub const VHOST_SET_VRING_CALL: u32 = 1074310945;
+pub const LIRC_GET_FEATURES: u32 = 2147772672;
+pub const GSMIOC_DISABLE_NET: u32 = 18179;
+pub const AUTOFS_IOC_CATATONIC: u32 = 37730;
+pub const NBD_DO_IT: u32 = 43779;
+pub const LIRC_SET_REC_CARRIER_RANGE: u32 = 1074030879;
+pub const IPMICTL_GET_MY_CHANNEL_ADDRESS_CMD: u32 = 2147772697;
+pub const EVIOCSCLOCKID: u32 = 1074021792;
+pub const USBDEVFS_FREE_STREAMS: u32 = 2148029725;
+pub const FSI_SCOM_RESET: u32 = 1074033411;
+pub const PMU_IOC_GRAB_BACKLIGHT: u32 = 2148024838;
+pub const VIDIOC_SUBDEV_S_FMT: u32 = 3227014661;
+pub const FDDEFPRM: u32 = 1075839555;
+pub const TEE_IOC_INVOKE: u32 = 2148574211;
+pub const USBDEVFS_BULK: u32 = 3222820098;
+pub const SCIF_VWRITETO: u32 = 3223876365;
+pub const SONYPI_IOCSBRT: u32 = 1073837568;
+pub const BTRFS_IOC_FILE_EXTENT_SAME: u32 = 3222836278;
+pub const RTC_PIE_ON: u32 = 28677;
+pub const BTRFS_IOC_SCAN_DEV: u32 = 1342215172;
+pub const PPPIOCXFERUNIT: u32 = 29774;
+pub const WDIOC_GETTIMEOUT: u32 = 2147768071;
+pub const BTRFS_IOC_SET_RECEIVED_SUBVOL: u32 = 3234370597;
+pub const DFL_FPGA_PORT_ERR_SET_IRQ: u32 = 1074312774;
+pub const FBIO_WAITFORVSYNC: u32 = 1074021920;
+pub const RTC_PIE_OFF: u32 = 28678;
+pub const EVIOCGRAB: u32 = 1074021776;
+pub const PMU_IOC_SET_BACKLIGHT: u32 = 1074283010;
+pub const EVIOCGREP: u32 = 2148025603;
+pub const PERF_EVENT_IOC_MODIFY_ATTRIBUTES: u32 = 1074275339;
+pub const UFFDIO_CONTINUE: u32 = 3223366151;
+pub const VDUSE_GET_API_VERSION: u32 = 2148040960;
+pub const RTC_RD_TIME: u32 = 2149871625;
+pub const FDMSGOFF: u32 = 582;
+pub const IPMICTL_REGISTER_FOR_CMD_CHANS: u32 = 2148296988;
+pub const CAPI_GET_ERRCODE: u32 = 2147631905;
+pub const PCITEST_SET_IRQTYPE: u32 = 1074024456;
+pub const VIDIOC_SUBDEV_S_EDID: u32 = 3223868969;
+pub const MATROXFB_SET_OUTPUT_MODE: u32 = 1074294522;
+pub const RIO_DEV_ADD: u32 = 1075866903;
+pub const VIDIOC_ENUM_FREQ_BANDS: u32 = 3225441893;
+pub const FBIO_RADEON_SET_MIRROR: u32 = 1074282500;
+pub const PCITEST_GET_IRQTYPE: u32 = 20489;
+pub const JSIOCGVERSION: u32 = 2147772929;
+pub const SONYPI_IOCSBLUE: u32 = 1073837577;
+pub const SNAPSHOT_PREF_IMAGE_SIZE: u32 = 13074;
+pub const F2FS_IOC_GET_FEATURES: u32 = 2147808524;
+pub const SCIF_REG: u32 = 3223876360;
+pub const NILFS_IOCTL_CLEAN_SEGMENTS: u32 = 1081634440;
+pub const FW_CDEV_IOC_INITIATE_BUS_RESET: u32 = 1074012933;
+pub const RIO_WAIT_FOR_ASYNC: u32 = 1074294038;
+pub const VHOST_SET_VRING_NUM: u32 = 1074310928;
+pub const AUTOFS_DEV_IOCTL_PROTOVER: u32 = 3222836082;
+pub const RIO_FREE_DMA: u32 = 1074294036;
+pub const MGSL_IOCRXENABLE: u32 = 27909;
+pub const IOCTL_VM_SOCKETS_GET_LOCAL_CID: u32 = 1977;
+pub const IPMICTL_SET_TIMING_PARMS_CMD: u32 = 2148034838;
+pub const PPPIOCGL2TPSTATS: u32 = 2152231990;
+pub const PERF_EVENT_IOC_PERIOD: u32 = 1074275332;
+pub const PTP_PIN_SETFUNC2: u32 = 1080048912;
+pub const CHIOEXCHANGE: u32 = 1075602178;
+pub const NILFS_IOCTL_GET_SUINFO: u32 = 2149084804;
+pub const CEC_DQEVENT: u32 = 3226493191;
+pub const UI_SET_SWBIT: u32 = 1074025837;
+pub const VHOST_VDPA_SET_CONFIG: u32 = 1074311028;
+pub const TUNSETIFF: u32 = 1074025674;
+pub const CHIOPOSITION: u32 = 1074553603;
+pub const IPMICTL_SET_MAINTENANCE_MODE_CMD: u32 = 1074030879;
+pub const BTRFS_IOC_DEFAULT_SUBVOL: u32 = 1074304019;
+pub const RIO_UNMAP_OUTBOUND: u32 = 1076391184;
+pub const CAPI_CLR_FLAGS: u32 = 2147762981;
+pub const FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE_ONCE: u32 = 1075323663;
+pub const MATROXFB_GET_OUTPUT_CONNECTION: u32 = 2148036344;
+pub const EVIOCSMASK: u32 = 1074808211;
+pub const BTRFS_IOC_FORGET_DEV: u32 = 1342215173;
+pub const CXL_MEM_QUERY_COMMANDS: u32 = 2148060673;
+pub const CEC_S_MODE: u32 = 1074028809;
+pub const MGSL_IOCSIF: u32 = 27914;
+pub const SWITCHTEC_IOCTL_PFF_TO_PORT: u32 = 3222034244;
+pub const PPSETMODE: u32 = 1074032768;
+pub const VFIO_DEVICE_SET_IRQS: u32 = 15214;
+pub const VIDIOC_PREPARE_BUF: u32 = 3227014749;
+pub const CEC_ADAP_G_CONNECTOR_INFO: u32 = 2151964938;
+pub const IOC_OPAL_WRITE_SHADOW_MBR: u32 = 1092645098;
+pub const VIDIOC_SUBDEV_ENUM_FRAME_INTERVAL: u32 = 3225441867;
+pub const UDMABUF_CREATE: u32 = 1075344706;
+pub const SONET_CLRDIAG: u32 = 3221512467;
+pub const PHN_SET_REG: u32 = 1074294785;
+pub const RNDADDTOENTCNT: u32 = 1074024961;
+pub const VBG_IOCTL_CHECK_BALLOON: u32 = 3223344657;
+pub const VIDIOC_OMAP3ISP_STAT_REQ: u32 = 3223869126;
+pub const PPS_FETCH: u32 = 3221778596;
+pub const RTC_AIE_OFF: u32 = 28674;
+pub const VFIO_GROUP_SET_CONTAINER: u32 = 15208;
+pub const FW_CDEV_IOC_RECEIVE_PHY_PACKETS: u32 = 1074275094;
+pub const VFIO_IOMMU_SPAPR_TCE_REMOVE: u32 = 15224;
+pub const VFIO_IOMMU_GET_INFO: u32 = 15216;
+pub const DM_DEV_SUSPEND: u32 = 3241737478;
+pub const F2FS_IOC_GET_COMPRESS_OPTION: u32 = 2147677461;
+pub const FW_CDEV_IOC_STOP_ISO: u32 = 1074012939;
+pub const GPIO_V2_GET_LINEINFO_IOCTL: u32 = 3238048773;
+pub const ATMMPC_CTRL: u32 = 25048;
+pub const PPPIOCSXASYNCMAP: u32 = 1075868751;
+pub const CHIOGSTATUS: u32 = 1074815752;
+pub const FW_CDEV_IOC_ALLOCATE_ISO_RESOURCE: u32 = 3222807309;
+pub const RIO_MPORT_MAINT_PORT_IDX_GET: u32 = 2147773699;
+pub const CAPI_SET_FLAGS: u32 = 2147762980;
+pub const VFIO_GROUP_GET_DEVICE_FD: u32 = 15210;
+pub const VHOST_SET_MEM_TABLE: u32 = 1074310915;
+pub const MATROXFB_SET_OUTPUT_CONNECTION: u32 = 1074294520;
+pub const DFL_FPGA_PORT_GET_REGION_INFO: u32 = 46658;
+pub const VHOST_GET_FEATURES: u32 = 2148052736;
+pub const LIRC_GET_REC_RESOLUTION: u32 = 2147772679;
+pub const PACKET_CTRL_CMD: u32 = 3222820865;
+pub const LIRC_SET_TRANSMITTER_MASK: u32 = 1074030871;
+pub const BTRFS_IOC_ADD_DEV: u32 = 1342215178;
+pub const JSIOCGCORR: u32 = 2149870114;
+pub const VIDIOC_G_FMT: u32 = 3234878980;
+pub const RTC_EPOCH_SET: u32 = 1074294798;
+pub const CAPI_GET_PROFILE: u32 = 3225436937;
+pub const ATM_GETLOOP: u32 = 1074815314;
+pub const SCIF_LISTEN: u32 = 1074033410;
+pub const NBD_CLEAR_QUE: u32 = 43781;
+pub const F2FS_IOC_MOVE_RANGE: u32 = 3223385353;
+pub const LIRC_GET_LENGTH: u32 = 2147772687;
+pub const I8K_SET_FAN: u32 = 3221776775;
+pub const FDSETMAXERRS: u32 = 1075053132;
+pub const VIDIOC_SUBDEV_QUERYCAP: u32 = 2151699968;
+pub const SNAPSHOT_SET_SWAP_AREA: u32 = 1074541325;
+pub const LIRC_GET_REC_TIMEOUT: u32 = 2147772708;
+pub const EVIOCRMFF: u32 = 1074021761;
+pub const GPIO_GET_LINEEVENT_IOCTL: u32 = 3224417284;
+pub const PPRDATA: u32 = 2147577989;
+pub const RIO_MPORT_GET_PROPERTIES: u32 = 2150657284;
+pub const TUNSETVNETHDRSZ: u32 = 1074025688;
+pub const GPIO_GET_LINEINFO_IOCTL: u32 = 3225990146;
+pub const GSMIOC_GETCONF: u32 = 2152482560;
+pub const LIRC_GET_SEND_MODE: u32 = 2147772673;
+pub const PPPIOCSACTIVE: u32 = 1074820166;
+pub const SIOCGSTAMPNS_NEW: u32 = 2148567303;
+pub const IPMICTL_RECEIVE_MSG: u32 = 3224398092;
+pub const LIRC_SET_SEND_DUTY_CYCLE: u32 = 1074030869;
+pub const UI_END_FF_ERASE: u32 = 1074550219;
+pub const SWITCHTEC_IOCTL_FLASH_PART_INFO: u32 = 3222296385;
+pub const FW_CDEV_IOC_SEND_PHY_PACKET: u32 = 3222807317;
+pub const NBD_SET_FLAGS: u32 = 43786;
+pub const VFIO_DEVICE_GET_REGION_INFO: u32 = 15212;
+pub const REISERFS_IOC_UNPACK: u32 = 1074318593;
+pub const FW_CDEV_IOC_REMOVE_DESCRIPTOR: u32 = 1074012935;
+pub const RIO_SET_EVENT_MASK: u32 = 1074031885;
+pub const SNAPSHOT_ALLOC_SWAP_PAGE: u32 = 2148021012;
+pub const VDUSE_VQ_INJECT_IRQ: u32 = 1074037015;
+pub const I2OPASSTHRU: u32 = 2148559116;
+pub const IOC_OPAL_SET_PW: u32 = 1109422304;
+pub const FSI_SCOM_READ: u32 = 3223352065;
+pub const VHOST_VDPA_GET_DEVICE_ID: u32 = 2147790704;
+pub const VIDIOC_QBUF: u32 = 3227014671;
+pub const VIDIOC_S_TUNER: u32 = 1079268894;
+pub const TUNGETVNETHDRSZ: u32 = 2147767511;
+pub const CAPI_NCCI_GETUNIT: u32 = 2147762983;
+pub const DFL_FPGA_PORT_UINT_GET_IRQ_NUM: u32 = 2147792455;
+pub const VIDIOC_OMAP3ISP_STAT_EN: u32 = 3221771975;
+pub const GPIO_V2_LINE_SET_CONFIG_IOCTL: u32 = 3239097357;
+pub const TEE_IOC_VERSION: u32 = 2148312064;
+pub const VIDIOC_LOG_STATUS: u32 = 22086;
+pub const IPMICTL_SEND_COMMAND_SETTIME: u32 = 2150656277;
+pub const VHOST_SET_LOG_FD: u32 = 1074048775;
+pub const SCIF_SEND: u32 = 3222827782;
+pub const VIDIOC_SUBDEV_G_FMT: u32 = 3227014660;
+pub const NS_ADJBUFLEV: u32 = 24931;
+pub const VIDIOC_DBG_S_REGISTER: u32 = 1077433935;
+pub const NILFS_IOCTL_RESIZE: u32 = 1074294411;
+pub const PHN_GETREG: u32 = 3221778437;
+pub const I2OSWDL: u32 = 3224398085;
+pub const VBG_IOCTL_VMMDEV_REQUEST_BIG: u32 = 22019;
+pub const JSIOCGBUTTONS: u32 = 2147576338;
+pub const VFIO_IOMMU_ENABLE: u32 = 15219;
+pub const DM_DEV_RENAME: u32 = 3241737477;
+pub const MEDIA_IOC_SETUP_LINK: u32 = 3224665091;
+pub const VIDIOC_ENUMOUTPUT: u32 = 3225966128;
+pub const STP_POLICY_ID_SET: u32 = 3222283520;
+pub const VHOST_VDPA_SET_CONFIG_CALL: u32 = 1074048887;
+pub const VIDIOC_SUBDEV_G_CROP: u32 = 3224917563;
+pub const VIDIOC_S_CROP: u32 = 1075074620;
+pub const WDIOC_GETTEMP: u32 = 2147768067;
+pub const IOC_OPAL_ADD_USR_TO_LR: u32 = 1092120804;
+pub const UI_SET_LEDBIT: u32 = 1074025833;
+pub const NBD_SET_SOCK: u32 = 43776;
+pub const BTRFS_IOC_SNAP_DESTROY_V2: u32 = 1342215231;
+pub const HIDIOCGCOLLECTIONINFO: u32 = 3222292497;
+pub const I2OSWUL: u32 = 3224398086;
+pub const IOCTL_MEI_NOTIFY_GET: u32 = 2147764227;
+pub const FDFMTTRK: u32 = 1074528840;
+pub const MMTIMER_GETBITS: u32 = 27908;
+pub const VIDIOC_ENUMSTD: u32 = 3225966105;
+pub const VHOST_GET_VRING_BASE: u32 = 3221794578;
+pub const VFIO_DEVICE_IOEVENTFD: u32 = 15220;
+pub const ATMARP_SETENTRY: u32 = 25059;
+pub const CCISS_REVALIDVOLS: u32 = 16906;
+pub const MGSL_IOCLOOPTXDONE: u32 = 27913;
+pub const RTC_VL_READ: u32 = 2147774483;
+pub const ND_IOCTL_ARS_STATUS: u32 = 3224391171;
+pub const RIO_DEV_DEL: u32 = 1075866904;
+pub const VBG_IOCTL_ACQUIRE_GUEST_CAPABILITIES: u32 = 3223606797;
+pub const VIDIOC_SUBDEV_DV_TIMINGS_CAP: u32 = 3230684772;
+pub const SONYPI_IOCSFAN: u32 = 1073837579;
+pub const SPIOCSTYPE: u32 = 1074295041;
+pub const IPMICTL_REGISTER_FOR_CMD: u32 = 2147641614;
+pub const I8K_GET_FAN: u32 = 3221776774;
+pub const TUNGETVNETBE: u32 = 2147767519;
+pub const AUTOFS_DEV_IOCTL_FAIL: u32 = 3222836087;
+pub const UI_END_FF_UPLOAD: u32 = 1080579529;
+pub const TOSH_SMM: u32 = 3222828176;
+pub const SONYPI_IOCGBAT2REM: u32 = 2147644933;
+pub const F2FS_IOC_GET_COMPRESS_BLOCKS: u32 = 2148070673;
+pub const PPPIOCSNPMODE: u32 = 1074295883;
+pub const USBDEVFS_CONTROL: u32 = 3222820096;
+pub const HIDIOCGUSAGE: u32 = 3222816779;
+pub const TUNSETTXFILTER: u32 = 1074025681;
+pub const TUNGETVNETLE: u32 = 2147767517;
+pub const VIDIOC_ENUM_DV_TIMINGS: u32 = 3230946914;
+pub const BTRFS_IOC_INO_PATHS: u32 = 3224933411;
+pub const MGSL_IOCGXSYNC: u32 = 27924;
+pub const HIDIOCGFIELDINFO: u32 = 3224913930;
+pub const VIDIOC_SUBDEV_G_STD: u32 = 2148029975;
+pub const I2OVALIDATE: u32 = 2147772680;
+pub const VIDIOC_TRY_ENCODER_CMD: u32 = 3223869006;
+pub const NILFS_IOCTL_GET_CPINFO: u32 = 2149084802;
+pub const VIDIOC_G_FREQUENCY: u32 = 3224131128;
+pub const VFAT_IOCTL_READDIR_SHORT: u32 = 2184212994;
+pub const ND_IOCTL_GET_CONFIG_DATA: u32 = 3222031877;
+pub const F2FS_IOC_RESERVE_COMPRESS_BLOCKS: u32 = 2148070675;
+pub const FDGETDRVSTAT: u32 = 2152727058;
+pub const SYNC_IOC_MERGE: u32 = 3224387075;
+pub const VIDIOC_S_DV_TIMINGS: u32 = 3229898327;
+pub const PPPIOCBRIDGECHAN: u32 = 1074033717;
+pub const LIRC_SET_SEND_MODE: u32 = 1074030865;
+pub const RIO_ENABLE_PORTWRITE_RANGE: u32 = 1074818315;
+pub const ATM_GETTYPE: u32 = 1074815364;
+pub const PHN_GETREGS: u32 = 3223875591;
+pub const FDSETEMSGTRESH: u32 = 586;
+pub const NILFS_IOCTL_GET_VINFO: u32 = 3222826630;
+pub const MGSL_IOCWAITEVENT: u32 = 3221515528;
+pub const CAPI_INSTALLED: u32 = 2147631906;
+pub const EVIOCGMASK: u32 = 2148550034;
+pub const BTRFS_IOC_SUBVOL_GETFLAGS: u32 = 2148045849;
+pub const FSL_HV_IOCTL_PARTITION_GET_STATUS: u32 = 3222056706;
+pub const MEDIA_IOC_ENUM_ENTITIES: u32 = 3238034433;
+pub const GSMIOC_GETFIRST: u32 = 2147763972;
+pub const FW_CDEV_IOC_FLUSH_ISO: u32 = 1074012952;
+pub const VIDIOC_DBG_G_CHIP_INFO: u32 = 3234354790;
+pub const F2FS_IOC_RELEASE_VOLATILE_WRITE: u32 = 62724;
+pub const CAPI_GET_SERIAL: u32 = 3221504776;
+pub const FDSETDRVPRM: u32 = 1082131088;
+pub const IOC_OPAL_SAVE: u32 = 1092120796;
+pub const VIDIOC_G_DV_TIMINGS: u32 = 3229898328;
+pub const TUNSETIFINDEX: u32 = 1074025690;
+pub const CCISS_SETINTINFO: u32 = 1074283011;
+pub const CM_IOSDBGLVL: u32 = 1074291706;
+pub const RTC_VL_CLR: u32 = 28692;
+pub const VIDIOC_REQBUFS: u32 = 3222558216;
+pub const USBDEVFS_REAPURBNDELAY32: u32 = 1074025741;
+pub const TEE_IOC_SHM_REGISTER: u32 = 3222840329;
+pub const USBDEVFS_SETCONFIGURATION: u32 = 2147767557;
+pub const CCISS_GETNODENAME: u32 = 2148549124;
+pub const VIDIOC_SUBDEV_S_FRAME_INTERVAL: u32 = 3224393238;
+pub const VIDIOC_ENUM_FRAMESIZES: u32 = 3224131146;
+pub const VFIO_DEVICE_PCI_HOT_RESET: u32 = 15217;
+pub const FW_CDEV_IOC_SEND_BROADCAST_REQUEST: u32 = 1076372242;
+pub const LPSETTIMEOUT_NEW: u32 = 1074791951;
+pub const RIO_CM_MPORT_GET_LIST: u32 = 3221512971;
+pub const FW_CDEV_IOC_QUEUE_ISO: u32 = 3222807305;
+pub const FDRAWCMD: u32 = 600;
+pub const SCIF_UNREG: u32 = 3222303497;
+pub const PPPIOCGIDLE64: u32 = 2148561983;
+pub const USBDEVFS_RELEASEINTERFACE: u32 = 2147767568;
+pub const VIDIOC_CROPCAP: u32 = 3224131130;
+pub const DFL_FPGA_PORT_GET_INFO: u32 = 46657;
+pub const PHN_SET_REGS: u32 = 1074294787;
+pub const ATMLEC_DATA: u32 = 25041;
+pub const PPPOEIOCDFWD: u32 = 45313;
+pub const VIDIOC_S_SELECTION: u32 = 3225441887;
+pub const SNAPSHOT_FREE_SWAP_PAGES: u32 = 13065;
+pub const BTRFS_IOC_LOGICAL_INO: u32 = 3224933412;
+pub const VIDIOC_S_CTRL: u32 = 3221771804;
+pub const ZATM_SETPOOL: u32 = 1074815331;
+pub const MTIOCPOS: u32 = 2148035843;
+pub const PMU_IOC_SLEEP: u32 = 16896;
+pub const AUTOFS_DEV_IOCTL_PROTOSUBVER: u32 = 3222836083;
+pub const VBG_IOCTL_CHANGE_FILTER_MASK: u32 = 3223344652;
+pub const NILFS_IOCTL_GET_SUSTAT: u32 = 2150657669;
+pub const VIDIOC_QUERYCAP: u32 = 2154321408;
+pub const HPET_INFO: u32 = 2149083139;
+pub const VIDIOC_AM437X_CCDC_CFG: u32 = 1074288321;
+pub const DM_LIST_DEVICES: u32 = 3241737474;
+pub const TUNSETOWNER: u32 = 1074025676;
+pub const VBG_IOCTL_CHANGE_GUEST_CAPABILITIES: u32 = 3223344654;
+pub const RNDADDENTROPY: u32 = 1074287107;
+pub const USBDEVFS_RESET: u32 = 21780;
+pub const BTRFS_IOC_SUBVOL_CREATE: u32 = 1342215182;
+pub const USBDEVFS_FORBID_SUSPEND: u32 = 21793;
+pub const FDGETDRVTYP: u32 = 2148532751;
+pub const PPWCONTROL: u32 = 1073836164;
+pub const VIDIOC_ENUM_FRAMEINTERVALS: u32 = 3224655435;
+pub const KCOV_DISABLE: u32 = 25445;
+pub const IOC_OPAL_ACTIVATE_LSP: u32 = 1092120799;
+pub const VHOST_VDPA_GET_IOVA_RANGE: u32 = 2148577144;
+pub const PPPIOCSPASS: u32 = 1074820167;
+pub const RIO_CM_CHAN_CONNECT: u32 = 1074291464;
+pub const I2OSWDEL: u32 = 3224398087;
+pub const FS_IOC_SET_ENCRYPTION_POLICY: u32 = 2148296211;
+pub const IOC_OPAL_MBR_DONE: u32 = 1091596521;
+pub const PPPIOCSMAXCID: u32 = 1074033745;
+pub const PPSETPHASE: u32 = 1074032788;
+pub const VHOST_VDPA_SET_VRING_ENABLE: u32 = 1074311029;
+pub const USBDEVFS_GET_SPEED: u32 = 21791;
+pub const SONET_GETFRAMING: u32 = 2147770646;
+pub const VIDIOC_QUERYBUF: u32 = 3227014665;
+pub const VIDIOC_S_EDID: u32 = 3223868969;
+pub const BTRFS_IOC_QGROUP_ASSIGN: u32 = 1075352617;
+pub const PPS_GETCAP: u32 = 2148036771;
+pub const SNAPSHOT_PLATFORM_SUPPORT: u32 = 13071;
+pub const LIRC_SET_REC_TIMEOUT_REPORTS: u32 = 1074030873;
+pub const SCIF_GET_NODEIDS: u32 = 3222827790;
+pub const NBD_DISCONNECT: u32 = 43784;
+pub const VIDIOC_SUBDEV_G_FRAME_INTERVAL: u32 = 3224393237;
+pub const VFIO_IOMMU_DISABLE: u32 = 15220;
+pub const SNAPSHOT_CREATE_IMAGE: u32 = 1074017041;
+pub const SNAPSHOT_POWER_OFF: u32 = 13072;
+pub const APM_IOC_STANDBY: u32 = 16641;
+pub const PPPIOCGUNIT: u32 = 2147775574;
+pub const AUTOFS_IOC_EXPIRE_MULTI: u32 = 1074041702;
+pub const SCIF_BIND: u32 = 3221779201;
+pub const IOC_WATCH_QUEUE_SET_SIZE: u32 = 22368;
+pub const NILFS_IOCTL_CHANGE_CPMODE: u32 = 1074818688;
+pub const IOC_OPAL_LOCK_UNLOCK: u32 = 1092120797;
+pub const F2FS_IOC_SET_PIN_FILE: u32 = 1074066701;
+pub const PPPIOCGRASYNCMAP: u32 = 2147775573;
+pub const MMTIMER_MMAPAVAIL: u32 = 27910;
+pub const I2OPASSTHRU32: u32 = 2148034828;
+pub const DFL_FPGA_FME_PORT_RELEASE: u32 = 1074050689;
+pub const VIDIOC_SUBDEV_QUERY_DV_TIMINGS: u32 = 2156156515;
+pub const UI_SET_SNDBIT: u32 = 1074025834;
+pub const VIDIOC_G_AUDOUT: u32 = 2150913585;
+pub const RTC_PLL_SET: u32 = 1075867666;
+pub const VIDIOC_ENUMAUDIO: u32 = 3224655425;
+pub const AUTOFS_DEV_IOCTL_TIMEOUT: u32 = 3222836090;
+pub const VBG_IOCTL_DRIVER_VERSION_INFO: u32 = 3224131072;
+pub const VHOST_SCSI_GET_EVENTS_MISSED: u32 = 1074048836;
+pub const VHOST_SET_VRING_ADDR: u32 = 1076408081;
+pub const VDUSE_CREATE_DEV: u32 = 1095794946;
+pub const FDFLUSH: u32 = 587;
+pub const VBG_IOCTL_WAIT_FOR_EVENTS: u32 = 3223344650;
+pub const DFL_FPGA_FME_ERR_SET_IRQ: u32 = 1074312836;
+pub const F2FS_IOC_GET_PIN_FILE: u32 = 2147808526;
+pub const SCIF_CONNECT: u32 = 3221779203;
+pub const BLKREPORTZONE: u32 = 3222278786;
+pub const AUTOFS_IOC_ASKUMOUNT: u32 = 2147783536;
+pub const ATM_ADDPARTY: u32 = 1074815476;
+pub const FDSETPRM: u32 = 1075839554;
+pub const ATM_GETSTATZ: u32 = 1074815313;
+pub const ISST_IF_MSR_COMMAND: u32 = 3221814788;
+pub const BTRFS_IOC_GET_SUBVOL_INFO: u32 = 2180551740;
+pub const VIDIOC_UNSUBSCRIBE_EVENT: u32 = 1075861083;
+pub const SEV_ISSUE_CMD: u32 = 3222295296;
+pub const GPIOHANDLE_SET_LINE_VALUES_IOCTL: u32 = 3225465865;
+pub const PCITEST_COPY: u32 = 1074286598;
+pub const IPMICTL_GET_MY_ADDRESS_CMD: u32 = 2147772690;
+pub const CHIOGPICKER: u32 = 2147771140;
+pub const CAPI_NCCI_OPENCOUNT: u32 = 2147762982;
+pub const CXL_MEM_SEND_COMMAND: u32 = 3224423938;
+pub const PERF_EVENT_IOC_SET_FILTER: u32 = 1074275334;
+pub const IOC_OPAL_REVERT_TPR: u32 = 1091072226;
+pub const CHIOGVPARAMS: u32 = 2154849043;
+pub const PTP_PEROUT_REQUEST: u32 = 1077427459;
+pub const FSI_SCOM_CHECK: u32 = 2147775232;
+pub const RTC_IRQP_READ: u32 = 2148036619;
+pub const RIO_MPORT_MAINT_READ_LOCAL: u32 = 2149084421;
+pub const HIDIOCGRDESCSIZE: u32 = 2147764225;
+pub const UI_GET_VERSION: u32 = 2147767597;
+pub const NILFS_IOCTL_GET_CPSTAT: u32 = 2149084803;
+pub const CCISS_GETBUSTYPES: u32 = 2147762695;
+pub const VFIO_IOMMU_SPAPR_TCE_CREATE: u32 = 15223;
+pub const VIDIOC_EXPBUF: u32 = 3225441808;
+pub const UI_SET_RELBIT: u32 = 1074025830;
+pub const VFIO_SET_IOMMU: u32 = 15206;
+pub const VIDIOC_S_MODULATOR: u32 = 1078220343;
+pub const TUNGETFILTER: u32 = 2148553947;
+pub const MEYEIOC_SYNC: u32 = 3221518019;
+pub const CCISS_SETNODENAME: u32 = 1074807301;
+pub const FBIO_GETCONTROL2: u32 = 2148025993;
+pub const TUNSETDEBUG: u32 = 1074025673;
+pub const DM_DEV_REMOVE: u32 = 3241737476;
+pub const HIDIOCSUSAGES: u32 = 1344030740;
+pub const FS_IOC_ADD_ENCRYPTION_KEY: u32 = 3226494487;
+pub const FBIOGET_VBLANK: u32 = 2149598738;
+pub const ATM_GETSTAT: u32 = 1074815312;
+pub const VIDIOC_G_JPEGCOMP: u32 = 2156680765;
+pub const TUNATTACHFILTER: u32 = 1074812117;
+pub const UI_SET_ABSBIT: u32 = 1074025831;
+pub const DFL_FPGA_PORT_ERR_GET_IRQ_NUM: u32 = 2147792453;
+pub const USBDEVFS_REAPURB32: u32 = 1074025740;
+pub const BTRFS_IOC_TRANS_END: u32 = 37895;
+pub const CAPI_REGISTER: u32 = 1074545409;
+pub const F2FS_IOC_COMPRESS_FILE: u32 = 62744;
+pub const USBDEVFS_DISCARDURB: u32 = 21771;
+pub const HE_GET_REG: u32 = 1074815328;
+pub const ATM_SETLOOP: u32 = 1074815315;
+pub const ATMSIGD_CTRL: u32 = 25072;
+pub const CIOC_KERNEL_VERSION: u32 = 3221775114;
+pub const BTRFS_IOC_CLONE_RANGE: u32 = 1075876877;
+pub const SNAPSHOT_UNFREEZE: u32 = 13058;
+pub const F2FS_IOC_START_VOLATILE_WRITE: u32 = 62723;
+pub const PMU_IOC_HAS_ADB: u32 = 2148024836;
+pub const I2OGETIOPS: u32 = 2149607680;
+pub const VIDIOC_S_FBUF: u32 = 1076909579;
+pub const PPRCONTROL: u32 = 2147577987;
+pub const CHIOSPICKER: u32 = 1074029317;
+pub const VFIO_IOMMU_SPAPR_REGISTER_MEMORY: u32 = 15221;
+pub const TUNGETSNDBUF: u32 = 2147767507;
+pub const GSMIOC_SETCONF: u32 = 1078740737;
+pub const IOC_PR_PREEMPT: u32 = 1075343563;
+pub const KCOV_INIT_TRACE: u32 = 2148033281;
+pub const SONYPI_IOCGBAT1CAP: u32 = 2147644930;
+pub const SWITCHTEC_IOCTL_FLASH_INFO: u32 = 2148554560;
+pub const MTIOCTOP: u32 = 1074294017;
+pub const VHOST_VDPA_SET_STATUS: u32 = 1073852274;
+pub const VHOST_SCSI_SET_EVENTS_MISSED: u32 = 1074048835;
+pub const VFIO_IOMMU_DIRTY_PAGES: u32 = 15221;
+pub const BTRFS_IOC_SCRUB_PROGRESS: u32 = 3288372253;
+pub const PPPIOCGMRU: u32 = 2147775571;
+pub const BTRFS_IOC_DEV_REPLACE: u32 = 3391657013;
+pub const PPPIOCGFLAGS: u32 = 2147775578;
+pub const NILFS_IOCTL_SET_SUINFO: u32 = 1075342989;
+pub const FW_CDEV_IOC_GET_CYCLE_TIMER2: u32 = 3222807316;
+pub const ATM_DELLECSADDR: u32 = 1074815375;
+pub const FW_CDEV_IOC_GET_SPEED: u32 = 8977;
+pub const PPPIOCGIDLE32: u32 = 2148037695;
+pub const VFIO_DEVICE_RESET: u32 = 15215;
+pub const GPIO_GET_LINEINFO_UNWATCH_IOCTL: u32 = 3221533708;
+pub const WDIOC_GETSTATUS: u32 = 2147768065;
+pub const BTRFS_IOC_SET_FEATURES: u32 = 1076925497;
+pub const IOCTL_MEI_CONNECT_CLIENT: u32 = 3222292481;
+pub const VIDIOC_OMAP3ISP_AEWB_CFG: u32 = 3223344835;
+pub const PCITEST_READ: u32 = 1074286597;
+pub const VFIO_GROUP_GET_STATUS: u32 = 15207;
+pub const MATROXFB_GET_ALL_OUTPUTS: u32 = 2148036347;
+pub const USBDEVFS_CLEAR_HALT: u32 = 2147767573;
+pub const VIDIOC_DECODER_CMD: u32 = 3225966176;
+pub const VIDIOC_G_AUDIO: u32 = 2150913569;
+pub const CCISS_RESCANDISK: u32 = 16912;
+pub const RIO_DISABLE_PORTWRITE_RANGE: u32 = 1074818316;
+pub const IOC_OPAL_SECURE_ERASE_LR: u32 = 1091596519;
+pub const USBDEVFS_REAPURB: u32 = 1074287884;
+pub const DFL_FPGA_CHECK_EXTENSION: u32 = 46593;
+pub const AUTOFS_IOC_PROTOVER: u32 = 2147783523;
+pub const FSL_HV_IOCTL_MEMCPY: u32 = 3223891717;
+pub const BTRFS_IOC_GET_FEATURES: u32 = 2149094457;
+pub const PCITEST_MSIX: u32 = 1074024455;
+pub const BTRFS_IOC_DEFRAG_RANGE: u32 = 1076925456;
+pub const UI_BEGIN_FF_ERASE: u32 = 3222033866;
+pub const DM_GET_TARGET_VERSION: u32 = 3241737489;
+pub const PPPIOCGIDLE: u32 = 2148561983;
+pub const NVRAM_SETCKS: u32 = 28737;
+pub const WDIOC_GETSUPPORT: u32 = 2150127360;
+pub const GSMIOC_ENABLE_NET: u32 = 1077167874;
+pub const GPIO_GET_CHIPINFO_IOCTL: u32 = 2151986177;
+pub const NE_ADD_VCPU: u32 = 3221532193;
+pub const EVIOCSKEYCODE_V2: u32 = 1076380932;
+pub const PTP_SYS_OFFSET_EXTENDED2: u32 = 3300932882;
+pub const SCIF_FENCE_WAIT: u32 = 3221517072;
+pub const RIO_TRANSFER: u32 = 3222826261;
+pub const FSL_HV_IOCTL_DOORBELL: u32 = 3221794566;
+pub const RIO_MPORT_MAINT_WRITE_LOCAL: u32 = 1075342598;
+pub const I2OEVTREG: u32 = 1074555146;
+pub const I2OPARMGET: u32 = 3223873796;
+pub const EVIOCGID: u32 = 2148025602;
+pub const BTRFS_IOC_QGROUP_CREATE: u32 = 1074828330;
+pub const AUTOFS_DEV_IOCTL_SETPIPEFD: u32 = 3222836088;
+pub const VIDIOC_S_PARM: u32 = 3234616854;
+pub const TUNSETSTEERINGEBPF: u32 = 2147767520;
+pub const ATM_GETNAMES: u32 = 1074815363;
+pub const VIDIOC_QUERYMENU: u32 = 3224131109;
+pub const DFL_FPGA_PORT_DMA_UNMAP: u32 = 46660;
+pub const I2OLCTGET: u32 = 3222825218;
+pub const FS_IOC_GET_ENCRYPTION_PWSALT: u32 = 1074816532;
+pub const NS_SETBUFLEV: u32 = 1074815330;
+pub const BLKCLOSEZONE: u32 = 1074795143;
+pub const SONET_GETFRSENSE: u32 = 2147901719;
+pub const UI_SET_EVBIT: u32 = 1074025828;
+pub const DM_LIST_VERSIONS: u32 = 3241737485;
+pub const HIDIOCGSTRING: u32 = 2164541444;
+pub const PPPIOCATTCHAN: u32 = 1074033720;
+pub const VDUSE_DEV_SET_CONFIG: u32 = 1074299154;
+pub const TUNGETFEATURES: u32 = 2147767503;
+pub const VFIO_GROUP_UNSET_CONTAINER: u32 = 15209;
+pub const IPMICTL_SET_MY_ADDRESS_CMD: u32 = 2147772689;
+pub const CCISS_REGNEWDISK: u32 = 1074020877;
+pub const VIDIOC_QUERY_DV_TIMINGS: u32 = 2156156515;
+pub const PHN_SETREGS: u32 = 1076391944;
+pub const FAT_IOCTL_GET_ATTRIBUTES: u32 = 2147774992;
+pub const FSL_MC_SEND_MC_COMMAND: u32 = 3225440992;
+pub const TUNGETIFF: u32 = 2147767506;
+pub const PTP_CLOCK_GETCAPS2: u32 = 2152742154;
+pub const BTRFS_IOC_RESIZE: u32 = 1342215171;
+pub const VHOST_SET_VRING_ENDIAN: u32 = 1074310931;
+pub const PPS_KC_BIND: u32 = 1074294949;
+pub const F2FS_IOC_WRITE_CHECKPOINT: u32 = 62727;
+pub const UI_SET_FFBIT: u32 = 1074025835;
+pub const IPMICTL_GET_MY_LUN_CMD: u32 = 2147772692;
+pub const CEC_ADAP_G_PHYS_ADDR: u32 = 2147639553;
+pub const CEC_G_MODE: u32 = 2147770632;
+pub const USBDEVFS_RESETEP: u32 = 2147767555;
+pub const MEDIA_REQUEST_IOC_QUEUE: u32 = 31872;
+pub const USBDEVFS_ALLOC_STREAMS: u32 = 2148029724;
+pub const MGSL_IOCSXCTRL: u32 = 27925;
+pub const MEDIA_IOC_G_TOPOLOGY: u32 = 3225975812;
+pub const PPPIOCUNBRIDGECHAN: u32 = 29748;
+pub const F2FS_IOC_COMMIT_ATOMIC_WRITE: u32 = 62722;
+pub const ISST_IF_GET_PLATFORM_INFO: u32 = 2148072960;
+pub const SCIF_FENCE_MARK: u32 = 3222303503;
+pub const USBDEVFS_RELEASE_PORT: u32 = 2147767577;
+pub const VFIO_CHECK_EXTENSION: u32 = 15205;
+pub const BTRFS_IOC_QGROUP_LIMIT: u32 = 2150667307;
+pub const FAT_IOCTL_GET_VOLUME_ID: u32 = 2147774995;
+pub const UI_SET_PHYS: u32 = 1074287980;
+pub const FDWERRORGET: u32 = 2150105623;
+pub const VIDIOC_SUBDEV_G_EDID: u32 = 3223868968;
+pub const MGSL_IOCGSTATS: u32 = 27911;
+pub const RPROC_SET_SHUTDOWN_ON_RELEASE: u32 = 1074050817;
+pub const SIOCGSTAMP_NEW: u32 = 2148567302;
+pub const RTC_WKALM_RD: u32 = 2150133776;
+pub const PHN_GET_REG: u32 = 3221778432;
+pub const DELL_WMI_SMBIOS_CMD: u32 = 3224655616;
+pub const PHN_NOT_OH: u32 = 28676;
+pub const PPGETMODES: u32 = 2147774615;
+pub const CHIOGPARAMS: u32 = 2148819718;
+pub const VFIO_DEVICE_GET_GFX_DMABUF: u32 = 15219;
+pub const VHOST_SET_VRING_BUSYLOOP_TIMEOUT: u32 = 1074310947;
+pub const VIDIOC_SUBDEV_G_SELECTION: u32 = 3225441853;
+pub const BTRFS_IOC_RM_DEV_V2: u32 = 1342215226;
+pub const MGSL_IOCWAITGPIO: u32 = 3222301970;
+pub const PMU_IOC_CAN_SLEEP: u32 = 2148024837;
+pub const KCOV_ENABLE: u32 = 25444;
+pub const BTRFS_IOC_CLONE: u32 = 1074041865;
+pub const F2FS_IOC_DEFRAGMENT: u32 = 3222336776;
+pub const FW_CDEV_IOC_DEALLOCATE_ISO_RESOURCE: u32 = 1074012942;
+pub const AGPIOC_ALLOCATE: u32 = 3221766406;
+pub const NE_SET_USER_MEMORY_REGION: u32 = 1075359267;
+pub const MGSL_IOCTXABORT: u32 = 27910;
+pub const MGSL_IOCSGPIO: u32 = 1074818320;
+pub const LIRC_SET_REC_CARRIER: u32 = 1074030868;
+pub const F2FS_IOC_FLUSH_DEVICE: u32 = 1074328842;
+pub const SNAPSHOT_ATOMIC_RESTORE: u32 = 13060;
+pub const RTC_UIE_OFF: u32 = 28676;
+pub const BT_BMC_IOCTL_SMS_ATN: u32 = 45312;
+pub const NVME_IOCTL_ID: u32 = 20032;
+pub const NE_START_ENCLAVE: u32 = 3222318628;
+pub const VIDIOC_STREAMON: u32 = 1074026002;
+pub const FDPOLLDRVSTAT: u32 = 2152727059;
+pub const AUTOFS_DEV_IOCTL_READY: u32 = 3222836086;
+pub const VIDIOC_ENUMAUDOUT: u32 = 3224655426;
+pub const VIDIOC_SUBDEV_S_STD: u32 = 1074288152;
+pub const WDIOC_GETTIMELEFT: u32 = 2147768074;
+pub const ATM_GETLINKRATE: u32 = 1074815361;
+pub const RTC_WKALM_SET: u32 = 1076391951;
+pub const VHOST_GET_BACKEND_FEATURES: u32 = 2148052774;
+pub const ATMARP_ENCAP: u32 = 25061;
+pub const CAPI_GET_FLAGS: u32 = 2147762979;
+pub const IPMICTL_SET_MY_CHANNEL_ADDRESS_CMD: u32 = 2147772696;
+pub const DFL_FPGA_FME_PORT_ASSIGN: u32 = 1074050690;
+pub const NS_GET_OWNER_UID: u32 = 46852;
+pub const VIDIOC_OVERLAY: u32 = 1074025998;
+pub const BTRFS_IOC_WAIT_SYNC: u32 = 1074304022;
+pub const GPIOHANDLE_SET_CONFIG_IOCTL: u32 = 3226776586;
+pub const VHOST_GET_VRING_ENDIAN: u32 = 1074310932;
+pub const ATM_GETADDR: u32 = 1074815366;
+pub const PHN_GET_REGS: u32 = 3221778434;
+pub const AUTOFS_DEV_IOCTL_REQUESTER: u32 = 3222836091;
+pub const AUTOFS_DEV_IOCTL_EXPIRE: u32 = 3222836092;
+pub const SNAPSHOT_S2RAM: u32 = 13067;
+pub const JSIOCSAXMAP: u32 = 1077963313;
+pub const F2FS_IOC_SET_COMPRESS_OPTION: u32 = 1073935638;
+pub const VBG_IOCTL_HGCM_DISCONNECT: u32 = 3223082501;
+pub const SCIF_FENCE_SIGNAL: u32 = 3223876369;
+pub const VFIO_DEVICE_GET_PCI_HOT_RESET_INFO: u32 = 15216;
+pub const VIDIOC_SUBDEV_ENUM_MBUS_CODE: u32 = 3224393218;
+pub const MMTIMER_GETOFFSET: u32 = 27904;
+pub const RIO_CM_CHAN_LISTEN: u32 = 1073898246;
+pub const ATM_SETSC: u32 = 1074029041;
+pub const F2FS_IOC_SHUTDOWN: u32 = 2147768445;
+pub const NVME_IOCTL_RESCAN: u32 = 20038;
+pub const BLKOPENZONE: u32 = 1074795142;
+pub const DM_VERSION: u32 = 3241737472;
+pub const CEC_TRANSMIT: u32 = 3224920325;
+pub const FS_IOC_GET_ENCRYPTION_POLICY_EX: u32 = 3221841430;
+pub const SIOCMKCLIP: u32 = 25056;
+pub const IPMI_BMC_IOCTL_CLEAR_SMS_ATN: u32 = 45313;
+pub const HIDIOCGVERSION: u32 = 2147764225;
+pub const VIDIOC_S_INPUT: u32 = 3221509671;
+pub const VIDIOC_G_CROP: u32 = 3222558267;
+pub const LIRC_SET_WIDEBAND_RECEIVER: u32 = 1074030883;
+pub const EVIOCGEFFECTS: u32 = 2147763588;
+pub const UVCIOC_CTRL_QUERY: u32 = 3222304033;
+pub const IOC_OPAL_GENERIC_TABLE_RW: u32 = 1094217963;
+pub const FS_IOC_READ_VERITY_METADATA: u32 = 3223873159;
+pub const ND_IOCTL_SET_CONFIG_DATA: u32 = 3221769734;
+pub const USBDEVFS_GETDRIVER: u32 = 1090802952;
+pub const IDT77105_GETSTAT: u32 = 1074815282;
+pub const HIDIOCINITREPORT: u32 = 18437;
+pub const VFIO_DEVICE_GET_INFO: u32 = 15211;
+pub const RIO_CM_CHAN_RECEIVE: u32 = 3222299402;
+pub const RNDGETENTCNT: u32 = 2147766784;
+pub const PPPIOCNEWUNIT: u32 = 3221517374;
+pub const BTRFS_IOC_INO_LOOKUP: u32 = 3489698834;
+pub const FDRESET: u32 = 596;
+pub const IOC_PR_REGISTER: u32 = 1075343560;
+pub const HIDIOCSREPORT: u32 = 1074546696;
+pub const TEE_IOC_OPEN_SESSION: u32 = 2148574210;
+pub const TEE_IOC_SUPPL_RECV: u32 = 2148574214;
+pub const BTRFS_IOC_BALANCE_CTL: u32 = 1074041889;
+pub const GPIO_GET_LINEINFO_WATCH_IOCTL: u32 = 3225990155;
+pub const HIDIOCGRAWINFO: u32 = 2148026371;
+pub const PPPIOCSCOMPRESS: u32 = 1074820173;
+pub const USBDEVFS_CONNECTINFO: u32 = 1074287889;
+pub const BLKRESETZONE: u32 = 1074795139;
+pub const CHIOINITELEM: u32 = 25361;
+pub const NILFS_IOCTL_SET_ALLOC_RANGE: u32 = 1074818700;
+pub const AUTOFS_DEV_IOCTL_CATATONIC: u32 = 3222836089;
+pub const RIO_MPORT_MAINT_HDID_SET: u32 = 1073900801;
+pub const PPGETPHASE: u32 = 2147774617;
+pub const USBDEVFS_DISCONNECT_CLAIM: u32 = 2164806939;
+pub const FDMSGON: u32 = 581;
+pub const VIDIOC_G_SLICED_VBI_CAP: u32 = 3228849733;
+pub const BTRFS_IOC_BALANCE_V2: u32 = 3288372256;
+pub const MEDIA_REQUEST_IOC_REINIT: u32 = 31873;
+pub const IOC_OPAL_ERASE_LR: u32 = 1091596518;
+pub const FDFMTBEG: u32 = 583;
+pub const RNDRESEEDCRNG: u32 = 20999;
+pub const ISST_IF_GET_PHY_ID: u32 = 3221814785;
+pub const TUNSETNOCSUM: u32 = 1074025672;
+pub const SONET_GETSTAT: u32 = 2149867792;
+pub const TFD_IOC_SET_TICKS: u32 = 1074287616;
+pub const PPDATADIR: u32 = 1074032784;
+pub const IOC_OPAL_ENABLE_DISABLE_MBR: u32 = 1091596517;
+pub const GPIO_V2_GET_LINE_IOCTL: u32 = 3260068871;
+pub const RIO_CM_CHAN_SEND: u32 = 1074815753;
+pub const PPWCTLONIRQ: u32 = 1073836178;
+pub const SONYPI_IOCGBRT: u32 = 2147579392;
+pub const IOC_PR_RELEASE: u32 = 1074819274;
+pub const PPCLRIRQ: u32 = 2147774611;
+pub const IPMICTL_SET_MY_CHANNEL_LUN_CMD: u32 = 2147772698;
+pub const MGSL_IOCSXSYNC: u32 = 27923;
+pub const HPET_IE_OFF: u32 = 26626;
+pub const IOC_OPAL_ACTIVATE_USR: u32 = 1091596513;
+pub const SONET_SETFRAMING: u32 = 1074028821;
+pub const PERF_EVENT_IOC_PAUSE_OUTPUT: u32 = 1074013193;
+pub const BTRFS_IOC_LOGICAL_INO_V2: u32 = 3224933435;
+pub const VBG_IOCTL_HGCM_CONNECT: u32 = 3231471108;
+pub const BLKFINISHZONE: u32 = 1074795144;
+pub const EVIOCREVOKE: u32 = 1074021777;
+pub const VFIO_DEVICE_FEATURE: u32 = 15221;
+pub const CCISS_GETPCIINFO: u32 = 2148024833;
+pub const ISST_IF_MBOX_COMMAND: u32 = 3221814787;
+pub const SCIF_ACCEPTREQ: u32 = 3222303492;
+pub const PERF_EVENT_IOC_QUERY_BPF: u32 = 3221758986;
+pub const VIDIOC_STREAMOFF: u32 = 1074026003;
+pub const VDUSE_DESTROY_DEV: u32 = 1090552067;
+pub const FDGETFDCSTAT: u32 = 2150105621;
+pub const CM_IOCGATR: u32 = 3221775105;
+pub const VIDIOC_S_PRIORITY: u32 = 1074026052;
+pub const SNAPSHOT_FREEZE: u32 = 13057;
+pub const VIDIOC_ENUMINPUT: u32 = 3226490394;
+pub const ZATM_GETPOOLZ: u32 = 1074815330;
+pub const RIO_DISABLE_DOORBELL_RANGE: u32 = 1074294026;
+pub const GPIO_V2_GET_LINEINFO_WATCH_IOCTL: u32 = 3238048774;
+pub const VIDIOC_G_STD: u32 = 2148029975;
+pub const USBDEVFS_ALLOW_SUSPEND: u32 = 21794;
+pub const SONET_GETSTATZ: u32 = 2149867793;
+pub const SCIF_ACCEPTREG: u32 = 3221779205;
+pub const VIDIOC_ENCODER_CMD: u32 = 3223869005;
+pub const PPPIOCSRASYNCMAP: u32 = 1074033748;
+pub const IOCTL_MEI_NOTIFY_SET: u32 = 1074022402;
+pub const BTRFS_IOC_QUOTA_RESCAN_STATUS: u32 = 2151715885;
+pub const F2FS_IOC_GARBAGE_COLLECT: u32 = 1074066694;
+pub const ATMLEC_CTRL: u32 = 25040;
+pub const MATROXFB_GET_AVAILABLE_OUTPUTS: u32 = 2148036345;
+pub const DM_DEV_CREATE: u32 = 3241737475;
+pub const VHOST_VDPA_GET_VRING_NUM: u32 = 2147659638;
+pub const VIDIOC_G_CTRL: u32 = 3221771803;
+pub const NBD_CLEAR_SOCK: u32 = 43780;
+pub const VFIO_DEVICE_QUERY_GFX_PLANE: u32 = 15218;
+pub const WDIOC_KEEPALIVE: u32 = 2147768069;
+pub const NVME_IOCTL_SUBSYS_RESET: u32 = 20037;
+pub const PTP_EXTTS_REQUEST2: u32 = 1074806027;
+pub const PCITEST_BAR: u32 = 20481;
+pub const MGSL_IOCGGPIO: u32 = 2148560145;
+pub const EVIOCSREP: u32 = 1074283779;
+pub const VFIO_DEVICE_GET_IRQ_INFO: u32 = 15213;
+pub const HPET_DPI: u32 = 26629;
+pub const VDUSE_VQ_SETUP_KICKFD: u32 = 1074299158;
+pub const ND_IOCTL_CALL: u32 = 3225439754;
+pub const HIDIOCGDEVINFO: u32 = 2149337091;
+pub const DM_TABLE_DEPS: u32 = 3241737483;
+pub const BTRFS_IOC_DEV_INFO: u32 = 3489698846;
+pub const VDUSE_IOTLB_GET_FD: u32 = 3223355664;
+pub const FW_CDEV_IOC_GET_INFO: u32 = 3223855872;
+pub const VIDIOC_G_PRIORITY: u32 = 2147767875;
+pub const ATM_NEWBACKENDIF: u32 = 1073897971;
+pub const VIDIOC_S_EXT_CTRLS: u32 = 3223344712;
+pub const VIDIOC_SUBDEV_ENUM_DV_TIMINGS: u32 = 3230946914;
+pub const VIDIOC_OMAP3ISP_CCDC_CFG: u32 = 3224917697;
+pub const VIDIOC_S_HW_FREQ_SEEK: u32 = 1076909650;
+pub const DM_TABLE_LOAD: u32 = 3241737481;
+pub const F2FS_IOC_START_ATOMIC_WRITE: u32 = 62721;
+pub const VIDIOC_G_OUTPUT: u32 = 2147767854;
+pub const ATM_DROPPARTY: u32 = 1074029045;
+pub const CHIOGELEM: u32 = 1080845072;
+pub const BTRFS_IOC_GET_SUPPORTED_FEATURES: u32 = 2152240185;
+pub const EVIOCSKEYCODE: u32 = 1074283780;
+pub const NE_GET_IMAGE_LOAD_INFO: u32 = 3222318626;
+pub const TUNSETLINK: u32 = 1074025677;
+pub const FW_CDEV_IOC_ADD_DESCRIPTOR: u32 = 3222807302;
+pub const BTRFS_IOC_SCRUB_CANCEL: u32 = 37916;
+pub const PPS_SETPARAMS: u32 = 1074294946;
+pub const IOC_OPAL_LR_SETUP: u32 = 1093169379;
+pub const FW_CDEV_IOC_DEALLOCATE: u32 = 1074012931;
+pub const WDIOC_SETTIMEOUT: u32 = 3221509894;
+pub const IOC_WATCH_QUEUE_SET_FILTER: u32 = 22369;
+pub const CAPI_GET_MANUFACTURER: u32 = 3221504774;
+pub const VFIO_IOMMU_SPAPR_UNREGISTER_MEMORY: u32 = 15222;
+pub const ASPEED_P2A_CTRL_IOCTL_SET_WINDOW: u32 = 1074836224;
+pub const VIDIOC_G_EDID: u32 = 3223868968;
+pub const F2FS_IOC_GARBAGE_COLLECT_RANGE: u32 = 1075377419;
+pub const RIO_MAP_INBOUND: u32 = 3223874833;
+pub const IOC_OPAL_TAKE_OWNERSHIP: u32 = 1091072222;
+pub const USBDEVFS_CLAIM_PORT: u32 = 2147767576;
+pub const VIDIOC_S_AUDIO: u32 = 1077171746;
+pub const FS_IOC_GET_ENCRYPTION_NONCE: u32 = 2148558363;
+pub const FW_CDEV_IOC_SEND_STREAM_PACKET: u32 = 1076372243;
+pub const BTRFS_IOC_SNAP_DESTROY: u32 = 1342215183;
+pub const SNAPSHOT_FREE: u32 = 13061;
+pub const I8K_GET_SPEED: u32 = 3221776773;
+pub const HIDIOCGREPORT: u32 = 1074546695;
+pub const HPET_EPI: u32 = 26628;
+pub const JSIOCSCORR: u32 = 1076128289;
+pub const IOC_PR_PREEMPT_ABORT: u32 = 1075343564;
+pub const RIO_MAP_OUTBOUND: u32 = 3223874831;
+pub const ATM_SETESI: u32 = 1074815372;
+pub const FW_CDEV_IOC_START_ISO: u32 = 1074799370;
+pub const ATM_DELADDR: u32 = 1074815369;
+pub const PPFCONTROL: u32 = 1073901710;
+pub const SONYPI_IOCGFAN: u32 = 2147579402;
+pub const RTC_IRQP_SET: u32 = 1074294796;
+pub const PCITEST_WRITE: u32 = 1074286596;
+pub const PPCLAIM: u32 = 28811;
+pub const VIDIOC_S_JPEGCOMP: u32 = 1082938942;
+pub const IPMICTL_UNREGISTER_FOR_CMD: u32 = 2147641615;
+pub const VHOST_SET_FEATURES: u32 = 1074310912;
+pub const TOSHIBA_ACPI_SCI: u32 = 3222828177;
+pub const VIDIOC_DQBUF: u32 = 3227014673;
+pub const BTRFS_IOC_BALANCE_PROGRESS: u32 = 2214630434;
+pub const BTRFS_IOC_SUBVOL_SETFLAGS: u32 = 1074304026;
+pub const ATMLEC_MCAST: u32 = 25042;
+pub const MMTIMER_GETFREQ: u32 = 2148035842;
+pub const VIDIOC_G_SELECTION: u32 = 3225441886;
+pub const RTC_ALM_SET: u32 = 1076129799;
+pub const PPPOEIOCSFWD: u32 = 1074311424;
+pub const IPMICTL_GET_MAINTENANCE_MODE_CMD: u32 = 2147772702;
+pub const FS_IOC_ENABLE_VERITY: u32 = 1082156677;
+pub const NILFS_IOCTL_GET_BDESCS: u32 = 3222826631;
+pub const FDFMTEND: u32 = 585;
+pub const DMA_BUF_SET_NAME: u32 = 1074291201;
+pub const UI_BEGIN_FF_UPLOAD: u32 = 3228063176;
+pub const RTC_UIE_ON: u32 = 28675;
+pub const PPRELEASE: u32 = 28812;
+pub const VFIO_IOMMU_UNMAP_DMA: u32 = 15218;
+pub const VIDIOC_OMAP3ISP_PRV_CFG: u32 = 3228587714;
+pub const GPIO_GET_LINEHANDLE_IOCTL: u32 = 3245126659;
+pub const VFAT_IOCTL_READDIR_BOTH: u32 = 2184212993;
+pub const NVME_IOCTL_ADMIN_CMD: u32 = 3225964097;
+pub const VHOST_SET_VRING_KICK: u32 = 1074310944;
+pub const BTRFS_IOC_SUBVOL_CREATE_V2: u32 = 1342215192;
+pub const BTRFS_IOC_SNAP_CREATE: u32 = 1342215169;
+pub const SONYPI_IOCGBAT2CAP: u32 = 2147644932;
+pub const PPNEGOT: u32 = 1074032785;
+pub const NBD_PRINT_DEBUG: u32 = 43782;
+pub const BTRFS_IOC_INO_LOOKUP_USER: u32 = 3489698878;
+pub const BTRFS_IOC_GET_SUBVOL_ROOTREF: u32 = 3489698877;
+pub const FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS: u32 = 3225445913;
+pub const BTRFS_IOC_FS_INFO: u32 = 2214630431;
+pub const VIDIOC_ENUM_FMT: u32 = 3225441794;
+pub const VIDIOC_G_INPUT: u32 = 2147767846;
+pub const VTPM_PROXY_IOC_NEW_DEV: u32 = 3222577408;
+pub const DFL_FPGA_FME_ERR_GET_IRQ_NUM: u32 = 2147792515;
+pub const ND_IOCTL_DIMM_FLAGS: u32 = 3221769731;
+pub const BTRFS_IOC_QUOTA_RESCAN: u32 = 1077974060;
+pub const MMTIMER_GETCOUNTER: u32 = 2148035849;
+pub const MATROXFB_GET_OUTPUT_MODE: u32 = 3221778170;
+pub const BTRFS_IOC_QUOTA_RESCAN_WAIT: u32 = 37934;
+pub const RIO_CM_CHAN_BIND: u32 = 1074291461;
+pub const HIDIOCGRDESC: u32 = 2416199682;
+pub const MGSL_IOCGIF: u32 = 27915;
+pub const VIDIOC_S_OUTPUT: u32 = 3221509679;
+pub const HIDIOCGREPORTINFO: u32 = 3222030345;
+pub const WDIOC_GETBOOTSTATUS: u32 = 2147768066;
+pub const VDUSE_VQ_GET_INFO: u32 = 3224404245;
+pub const ACRN_IOCTL_ASSIGN_PCIDEV: u32 = 1076142677;
+pub const BLKGETDISKSEQ: u32 = 2148012672;
+pub const ACRN_IOCTL_PM_GET_CPU_STATE: u32 = 3221791328;
+pub const ACRN_IOCTL_DESTROY_VM: u32 = 41489;
+pub const ACRN_IOCTL_SET_PTDEV_INTR: u32 = 1075094099;
+pub const ACRN_IOCTL_CREATE_IOREQ_CLIENT: u32 = 41522;
+pub const ACRN_IOCTL_IRQFD: u32 = 1075356273;
+pub const ACRN_IOCTL_CREATE_VM: u32 = 3224412688;
+pub const ACRN_IOCTL_INJECT_MSI: u32 = 1074831907;
+pub const ACRN_IOCTL_ATTACH_IOREQ_CLIENT: u32 = 41523;
+pub const ACRN_IOCTL_RESET_PTDEV_INTR: u32 = 1075094100;
+pub const ACRN_IOCTL_NOTIFY_REQUEST_FINISH: u32 = 1074307633;
+pub const ACRN_IOCTL_SET_IRQLINE: u32 = 1074307621;
+pub const ACRN_IOCTL_START_VM: u32 = 41490;
+pub const ACRN_IOCTL_SET_VCPU_REGS: u32 = 1093181974;
+pub const ACRN_IOCTL_SET_MEMSEG: u32 = 1075880513;
+pub const ACRN_IOCTL_PAUSE_VM: u32 = 41491;
+pub const ACRN_IOCTL_CLEAR_VM_IOREQ: u32 = 41525;
+pub const ACRN_IOCTL_UNSET_MEMSEG: u32 = 1075880514;
+pub const ACRN_IOCTL_IOEVENTFD: u32 = 1075880560;
+pub const ACRN_IOCTL_DEASSIGN_PCIDEV: u32 = 1076142678;
+pub const ACRN_IOCTL_RESET_VM: u32 = 41493;
+pub const ACRN_IOCTL_DESTROY_IOREQ_CLIENT: u32 = 41524;
+pub const ACRN_IOCTL_VM_INTR_MONITOR: u32 = 1074307620;
diff --git a/vendor/linux-raw-sys/src/loongarch64/netlink.rs b/vendor/linux-raw-sys/src/loongarch64/netlink.rs
new file mode 100644
index 000000000..8069c2f5c
--- /dev/null
+++ b/vendor/linux-raw-sys/src/loongarch64/netlink.rs
@@ -0,0 +1,2860 @@
+/* automatically generated by rust-bindgen 0.59.2 */
+
+#[repr(C)]
+#[derive(Default)]
+pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
+impl<T> __IncompleteArrayField<T> {
+#[inline]
+pub const fn new() -> Self {
+__IncompleteArrayField(::core::marker::PhantomData, [])
+}
+#[inline]
+pub fn as_ptr(&self) -> *const T {
+self as *const _ as *const T
+}
+#[inline]
+pub fn as_mut_ptr(&mut self) -> *mut T {
+self as *mut _ as *mut T
+}
+#[inline]
+pub unsafe fn as_slice(&self, len: usize) -> &[T] {
+::core::slice::from_raw_parts(self.as_ptr(), len)
+}
+#[inline]
+pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
+::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
+}
+}
+impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
+fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
+fmt.write_str("__IncompleteArrayField")
+}
+}
+pub const LINUX_VERSION_CODE: u32 = 393728;
+pub const LINUX_VERSION_MAJOR: u32 = 6;
+pub const LINUX_VERSION_PATCHLEVEL: u32 = 2;
+pub const LINUX_VERSION_SUBLEVEL: u32 = 0;
+pub const _K_SS_MAXSIZE: u32 = 128;
+pub const SOCK_SNDBUF_LOCK: u32 = 1;
+pub const SOCK_RCVBUF_LOCK: u32 = 2;
+pub const SOCK_BUF_LOCK_MASK: u32 = 3;
+pub const SOCK_TXREHASH_DEFAULT: u32 = 255;
+pub const SOCK_TXREHASH_DISABLED: u32 = 0;
+pub const SOCK_TXREHASH_ENABLED: u32 = 1;
+pub const __FD_SETSIZE: u32 = 1024;
+pub const NETLINK_ROUTE: u32 = 0;
+pub const NETLINK_UNUSED: u32 = 1;
+pub const NETLINK_USERSOCK: u32 = 2;
+pub const NETLINK_FIREWALL: u32 = 3;
+pub const NETLINK_SOCK_DIAG: u32 = 4;
+pub const NETLINK_NFLOG: u32 = 5;
+pub const NETLINK_XFRM: u32 = 6;
+pub const NETLINK_SELINUX: u32 = 7;
+pub const NETLINK_ISCSI: u32 = 8;
+pub const NETLINK_AUDIT: u32 = 9;
+pub const NETLINK_FIB_LOOKUP: u32 = 10;
+pub const NETLINK_CONNECTOR: u32 = 11;
+pub const NETLINK_NETFILTER: u32 = 12;
+pub const NETLINK_IP6_FW: u32 = 13;
+pub const NETLINK_DNRTMSG: u32 = 14;
+pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
+pub const NETLINK_GENERIC: u32 = 16;
+pub const NETLINK_SCSITRANSPORT: u32 = 18;
+pub const NETLINK_ECRYPTFS: u32 = 19;
+pub const NETLINK_RDMA: u32 = 20;
+pub const NETLINK_CRYPTO: u32 = 21;
+pub const NETLINK_SMC: u32 = 22;
+pub const NETLINK_INET_DIAG: u32 = 4;
+pub const MAX_LINKS: u32 = 32;
+pub const NLM_F_REQUEST: u32 = 1;
+pub const NLM_F_MULTI: u32 = 2;
+pub const NLM_F_ACK: u32 = 4;
+pub const NLM_F_ECHO: u32 = 8;
+pub const NLM_F_DUMP_INTR: u32 = 16;
+pub const NLM_F_DUMP_FILTERED: u32 = 32;
+pub const NLM_F_ROOT: u32 = 256;
+pub const NLM_F_MATCH: u32 = 512;
+pub const NLM_F_ATOMIC: u32 = 1024;
+pub const NLM_F_DUMP: u32 = 768;
+pub const NLM_F_REPLACE: u32 = 256;
+pub const NLM_F_EXCL: u32 = 512;
+pub const NLM_F_CREATE: u32 = 1024;
+pub const NLM_F_APPEND: u32 = 2048;
+pub const NLM_F_NONREC: u32 = 256;
+pub const NLM_F_BULK: u32 = 512;
+pub const NLM_F_CAPPED: u32 = 256;
+pub const NLM_F_ACK_TLVS: u32 = 512;
+pub const NLMSG_ALIGNTO: u32 = 4;
+pub const NLMSG_NOOP: u32 = 1;
+pub const NLMSG_ERROR: u32 = 2;
+pub const NLMSG_DONE: u32 = 3;
+pub const NLMSG_OVERRUN: u32 = 4;
+pub const NLMSG_MIN_TYPE: u32 = 16;
+pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
+pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
+pub const NETLINK_PKTINFO: u32 = 3;
+pub const NETLINK_BROADCAST_ERROR: u32 = 4;
+pub const NETLINK_NO_ENOBUFS: u32 = 5;
+pub const NETLINK_RX_RING: u32 = 6;
+pub const NETLINK_TX_RING: u32 = 7;
+pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
+pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
+pub const NETLINK_CAP_ACK: u32 = 10;
+pub const NETLINK_EXT_ACK: u32 = 11;
+pub const NETLINK_GET_STRICT_CHK: u32 = 12;
+pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
+pub const NET_MAJOR: u32 = 36;
+pub const NLA_F_NESTED: u32 = 32768;
+pub const NLA_F_NET_BYTEORDER: u32 = 16384;
+pub const NLA_TYPE_MASK: i32 = -49153;
+pub const NLA_ALIGNTO: u32 = 4;
+pub const MACVLAN_FLAG_NOPROMISC: u32 = 1;
+pub const MACVLAN_FLAG_NODST: u32 = 2;
+pub const IPVLAN_F_PRIVATE: u32 = 1;
+pub const IPVLAN_F_VEPA: u32 = 2;
+pub const TUNNEL_MSG_FLAG_STATS: u32 = 1;
+pub const TUNNEL_MSG_VALID_USER_FLAGS: u32 = 1;
+pub const MAX_VLAN_LIST_LEN: u32 = 1;
+pub const PORT_PROFILE_MAX: u32 = 40;
+pub const PORT_UUID_MAX: u32 = 16;
+pub const PORT_SELF_VF: i32 = -1;
+pub const XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
+pub const XDP_FLAGS_SKB_MODE: u32 = 2;
+pub const XDP_FLAGS_DRV_MODE: u32 = 4;
+pub const XDP_FLAGS_HW_MODE: u32 = 8;
+pub const XDP_FLAGS_REPLACE: u32 = 16;
+pub const XDP_FLAGS_MODES: u32 = 14;
+pub const XDP_FLAGS_MASK: u32 = 31;
+pub const RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
+pub const RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
+pub const RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
+pub const RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
+pub const RMNET_FLAGS_INGRESS_MAP_CKSUMV5: u32 = 16;
+pub const RMNET_FLAGS_EGRESS_MAP_CKSUMV5: u32 = 32;
+pub const IFA_F_SECONDARY: u32 = 1;
+pub const IFA_F_TEMPORARY: u32 = 1;
+pub const IFA_F_NODAD: u32 = 2;
+pub const IFA_F_OPTIMISTIC: u32 = 4;
+pub const IFA_F_DADFAILED: u32 = 8;
+pub const IFA_F_HOMEADDRESS: u32 = 16;
+pub const IFA_F_DEPRECATED: u32 = 32;
+pub const IFA_F_TENTATIVE: u32 = 64;
+pub const IFA_F_PERMANENT: u32 = 128;
+pub const IFA_F_MANAGETEMPADDR: u32 = 256;
+pub const IFA_F_NOPREFIXROUTE: u32 = 512;
+pub const IFA_F_MCAUTOJOIN: u32 = 1024;
+pub const IFA_F_STABLE_PRIVACY: u32 = 2048;
+pub const IFAPROT_UNSPEC: u32 = 0;
+pub const IFAPROT_KERNEL_LO: u32 = 1;
+pub const IFAPROT_KERNEL_RA: u32 = 2;
+pub const IFAPROT_KERNEL_LL: u32 = 3;
+pub const NTF_USE: u32 = 1;
+pub const NTF_SELF: u32 = 2;
+pub const NTF_MASTER: u32 = 4;
+pub const NTF_PROXY: u32 = 8;
+pub const NTF_EXT_LEARNED: u32 = 16;
+pub const NTF_OFFLOADED: u32 = 32;
+pub const NTF_STICKY: u32 = 64;
+pub const NTF_ROUTER: u32 = 128;
+pub const NTF_EXT_MANAGED: u32 = 1;
+pub const NTF_EXT_LOCKED: u32 = 2;
+pub const NUD_INCOMPLETE: u32 = 1;
+pub const NUD_REACHABLE: u32 = 2;
+pub const NUD_STALE: u32 = 4;
+pub const NUD_DELAY: u32 = 8;
+pub const NUD_PROBE: u32 = 16;
+pub const NUD_FAILED: u32 = 32;
+pub const NUD_NOARP: u32 = 64;
+pub const NUD_PERMANENT: u32 = 128;
+pub const NUD_NONE: u32 = 0;
+pub const RTNL_FAMILY_IPMR: u32 = 128;
+pub const RTNL_FAMILY_IP6MR: u32 = 129;
+pub const RTNL_FAMILY_MAX: u32 = 129;
+pub const RTA_ALIGNTO: u32 = 4;
+pub const RTPROT_UNSPEC: u32 = 0;
+pub const RTPROT_REDIRECT: u32 = 1;
+pub const RTPROT_KERNEL: u32 = 2;
+pub const RTPROT_BOOT: u32 = 3;
+pub const RTPROT_STATIC: u32 = 4;
+pub const RTPROT_GATED: u32 = 8;
+pub const RTPROT_RA: u32 = 9;
+pub const RTPROT_MRT: u32 = 10;
+pub const RTPROT_ZEBRA: u32 = 11;
+pub const RTPROT_BIRD: u32 = 12;
+pub const RTPROT_DNROUTED: u32 = 13;
+pub const RTPROT_XORP: u32 = 14;
+pub const RTPROT_NTK: u32 = 15;
+pub const RTPROT_DHCP: u32 = 16;
+pub const RTPROT_MROUTED: u32 = 17;
+pub const RTPROT_KEEPALIVED: u32 = 18;
+pub const RTPROT_BABEL: u32 = 42;
+pub const RTPROT_OPENR: u32 = 99;
+pub const RTPROT_BGP: u32 = 186;
+pub const RTPROT_ISIS: u32 = 187;
+pub const RTPROT_OSPF: u32 = 188;
+pub const RTPROT_RIP: u32 = 189;
+pub const RTPROT_EIGRP: u32 = 192;
+pub const RTM_F_NOTIFY: u32 = 256;
+pub const RTM_F_CLONED: u32 = 512;
+pub const RTM_F_EQUALIZE: u32 = 1024;
+pub const RTM_F_PREFIX: u32 = 2048;
+pub const RTM_F_LOOKUP_TABLE: u32 = 4096;
+pub const RTM_F_FIB_MATCH: u32 = 8192;
+pub const RTM_F_OFFLOAD: u32 = 16384;
+pub const RTM_F_TRAP: u32 = 32768;
+pub const RTM_F_OFFLOAD_FAILED: u32 = 536870912;
+pub const RTNH_F_DEAD: u32 = 1;
+pub const RTNH_F_PERVASIVE: u32 = 2;
+pub const RTNH_F_ONLINK: u32 = 4;
+pub const RTNH_F_OFFLOAD: u32 = 8;
+pub const RTNH_F_LINKDOWN: u32 = 16;
+pub const RTNH_F_UNRESOLVED: u32 = 32;
+pub const RTNH_F_TRAP: u32 = 64;
+pub const RTNH_COMPARE_MASK: u32 = 89;
+pub const RTNH_ALIGNTO: u32 = 4;
+pub const RTNETLINK_HAVE_PEERINFO: u32 = 1;
+pub const RTAX_FEATURE_ECN: u32 = 1;
+pub const RTAX_FEATURE_SACK: u32 = 2;
+pub const RTAX_FEATURE_TIMESTAMP: u32 = 4;
+pub const RTAX_FEATURE_ALLFRAG: u32 = 8;
+pub const RTAX_FEATURE_MASK: u32 = 15;
+pub const TCM_IFINDEX_MAGIC_BLOCK: u32 = 4294967295;
+pub const TCA_DUMP_FLAGS_TERSE: u32 = 1;
+pub const RTMGRP_LINK: u32 = 1;
+pub const RTMGRP_NOTIFY: u32 = 2;
+pub const RTMGRP_NEIGH: u32 = 4;
+pub const RTMGRP_TC: u32 = 8;
+pub const RTMGRP_IPV4_IFADDR: u32 = 16;
+pub const RTMGRP_IPV4_MROUTE: u32 = 32;
+pub const RTMGRP_IPV4_ROUTE: u32 = 64;
+pub const RTMGRP_IPV4_RULE: u32 = 128;
+pub const RTMGRP_IPV6_IFADDR: u32 = 256;
+pub const RTMGRP_IPV6_MROUTE: u32 = 512;
+pub const RTMGRP_IPV6_ROUTE: u32 = 1024;
+pub const RTMGRP_IPV6_IFINFO: u32 = 2048;
+pub const RTMGRP_DECnet_IFADDR: u32 = 4096;
+pub const RTMGRP_DECnet_ROUTE: u32 = 16384;
+pub const RTMGRP_IPV6_PREFIX: u32 = 131072;
+pub const TCA_FLAG_LARGE_DUMP_ON: u32 = 1;
+pub const TCA_ACT_FLAG_LARGE_DUMP_ON: u32 = 1;
+pub const TCA_ACT_FLAG_TERSE_DUMP: u32 = 2;
+pub const RTEXT_FILTER_VF: u32 = 1;
+pub const RTEXT_FILTER_BRVLAN: u32 = 2;
+pub const RTEXT_FILTER_BRVLAN_COMPRESSED: u32 = 4;
+pub const RTEXT_FILTER_SKIP_STATS: u32 = 8;
+pub const RTEXT_FILTER_MRP: u32 = 16;
+pub const RTEXT_FILTER_CFM_CONFIG: u32 = 32;
+pub const RTEXT_FILTER_CFM_STATUS: u32 = 64;
+pub const RTEXT_FILTER_MST: u32 = 128;
+pub type size_t = crate::ctypes::c_ulong;
+pub type ssize_t = crate::ctypes::c_long;
+pub type __kernel_sa_family_t = crate::ctypes::c_ushort;
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct __kernel_sockaddr_storage {
+pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union __kernel_sockaddr_storage__bindgen_ty_1 {
+pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
+pub __align: *mut crate::ctypes::c_void,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
+pub ss_family: __kernel_sa_family_t,
+pub __data: [crate::ctypes::c_char; 126usize],
+}
+pub type __s8 = crate::ctypes::c_schar;
+pub type __u8 = crate::ctypes::c_uchar;
+pub type __s16 = crate::ctypes::c_short;
+pub type __u16 = crate::ctypes::c_ushort;
+pub type __s32 = crate::ctypes::c_int;
+pub type __u32 = crate::ctypes::c_uint;
+pub type __s64 = crate::ctypes::c_longlong;
+pub type __u64 = crate::ctypes::c_ulonglong;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_fd_set {
+pub fds_bits: [crate::ctypes::c_ulong; 16usize],
+}
+pub type __kernel_sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: crate::ctypes::c_int)>;
+pub type __kernel_key_t = crate::ctypes::c_int;
+pub type __kernel_mqd_t = crate::ctypes::c_int;
+pub type __kernel_long_t = crate::ctypes::c_long;
+pub type __kernel_ulong_t = crate::ctypes::c_ulong;
+pub type __kernel_ino_t = __kernel_ulong_t;
+pub type __kernel_mode_t = crate::ctypes::c_uint;
+pub type __kernel_pid_t = crate::ctypes::c_int;
+pub type __kernel_ipc_pid_t = crate::ctypes::c_int;
+pub type __kernel_uid_t = crate::ctypes::c_uint;
+pub type __kernel_gid_t = crate::ctypes::c_uint;
+pub type __kernel_suseconds_t = __kernel_long_t;
+pub type __kernel_daddr_t = crate::ctypes::c_int;
+pub type __kernel_uid32_t = crate::ctypes::c_uint;
+pub type __kernel_gid32_t = crate::ctypes::c_uint;
+pub type __kernel_old_uid_t = __kernel_uid_t;
+pub type __kernel_old_gid_t = __kernel_gid_t;
+pub type __kernel_old_dev_t = crate::ctypes::c_uint;
+pub type __kernel_size_t = __kernel_ulong_t;
+pub type __kernel_ssize_t = __kernel_long_t;
+pub type __kernel_ptrdiff_t = __kernel_long_t;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct __kernel_fsid_t {
+pub val: [crate::ctypes::c_int; 2usize],
+}
+pub type __kernel_off_t = __kernel_long_t;
+pub type __kernel_loff_t = crate::ctypes::c_longlong;
+pub type __kernel_old_time_t = __kernel_long_t;
+pub type __kernel_time_t = __kernel_long_t;
+pub type __kernel_time64_t = crate::ctypes::c_longlong;
+pub type __kernel_clock_t = __kernel_long_t;
+pub type __kernel_timer_t = crate::ctypes::c_int;
+pub type __kernel_clockid_t = crate::ctypes::c_int;
+pub type __kernel_caddr_t = *mut crate::ctypes::c_char;
+pub type __kernel_uid16_t = crate::ctypes::c_ushort;
+pub type __kernel_gid16_t = crate::ctypes::c_ushort;
+pub type __le16 = __u16;
+pub type __be16 = __u16;
+pub type __le32 = __u32;
+pub type __be32 = __u32;
+pub type __le64 = __u64;
+pub type __be64 = __u64;
+pub type __sum16 = __u16;
+pub type __wsum = __u32;
+pub type __poll_t = crate::ctypes::c_uint;
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct sockaddr_nl {
+pub nl_family: __kernel_sa_family_t,
+pub nl_pad: crate::ctypes::c_ushort,
+pub nl_pid: __u32,
+pub nl_groups: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nlmsghdr {
+pub nlmsg_len: __u32,
+pub nlmsg_type: __u16,
+pub nlmsg_flags: __u16,
+pub nlmsg_seq: __u32,
+pub nlmsg_pid: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nlmsgerr {
+pub error: crate::ctypes::c_int,
+pub msg: nlmsghdr,
+}
+impl nlmsgerr_attrs {
+pub const NLMSGERR_ATTR_MAX: nlmsgerr_attrs = nlmsgerr_attrs::NLMSGERR_ATTR_MISS_NEST;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum nlmsgerr_attrs {
+NLMSGERR_ATTR_UNUSED = 0,
+NLMSGERR_ATTR_MSG = 1,
+NLMSGERR_ATTR_OFFS = 2,
+NLMSGERR_ATTR_COOKIE = 3,
+NLMSGERR_ATTR_POLICY = 4,
+NLMSGERR_ATTR_MISS_TYPE = 5,
+NLMSGERR_ATTR_MISS_NEST = 6,
+__NLMSGERR_ATTR_MAX = 7,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nl_pktinfo {
+pub group: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nl_mmap_req {
+pub nm_block_size: crate::ctypes::c_uint,
+pub nm_block_nr: crate::ctypes::c_uint,
+pub nm_frame_size: crate::ctypes::c_uint,
+pub nm_frame_nr: crate::ctypes::c_uint,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nl_mmap_hdr {
+pub nm_status: crate::ctypes::c_uint,
+pub nm_len: crate::ctypes::c_uint,
+pub nm_group: __u32,
+pub nm_pid: __u32,
+pub nm_uid: __u32,
+pub nm_gid: __u32,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum nl_mmap_status {
+NL_MMAP_STATUS_UNUSED = 0,
+NL_MMAP_STATUS_RESERVED = 1,
+NL_MMAP_STATUS_VALID = 2,
+NL_MMAP_STATUS_COPY = 3,
+NL_MMAP_STATUS_SKIP = 4,
+}
+pub const NETLINK_UNCONNECTED: _bindgen_ty_1 = _bindgen_ty_1::NETLINK_UNCONNECTED;
+pub const NETLINK_CONNECTED: _bindgen_ty_1 = _bindgen_ty_1::NETLINK_CONNECTED;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_1 {
+NETLINK_UNCONNECTED = 0,
+NETLINK_CONNECTED = 1,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nlattr {
+pub nla_len: __u16,
+pub nla_type: __u16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nla_bitfield32 {
+pub value: __u32,
+pub selector: __u32,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum netlink_attribute_type {
+NL_ATTR_TYPE_INVALID = 0,
+NL_ATTR_TYPE_FLAG = 1,
+NL_ATTR_TYPE_U8 = 2,
+NL_ATTR_TYPE_U16 = 3,
+NL_ATTR_TYPE_U32 = 4,
+NL_ATTR_TYPE_U64 = 5,
+NL_ATTR_TYPE_S8 = 6,
+NL_ATTR_TYPE_S16 = 7,
+NL_ATTR_TYPE_S32 = 8,
+NL_ATTR_TYPE_S64 = 9,
+NL_ATTR_TYPE_BINARY = 10,
+NL_ATTR_TYPE_STRING = 11,
+NL_ATTR_TYPE_NUL_STRING = 12,
+NL_ATTR_TYPE_NESTED = 13,
+NL_ATTR_TYPE_NESTED_ARRAY = 14,
+NL_ATTR_TYPE_BITFIELD32 = 15,
+}
+impl netlink_policy_type_attr {
+pub const NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = netlink_policy_type_attr::NL_POLICY_TYPE_ATTR_MASK;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum netlink_policy_type_attr {
+NL_POLICY_TYPE_ATTR_UNSPEC = 0,
+NL_POLICY_TYPE_ATTR_TYPE = 1,
+NL_POLICY_TYPE_ATTR_MIN_VALUE_S = 2,
+NL_POLICY_TYPE_ATTR_MAX_VALUE_S = 3,
+NL_POLICY_TYPE_ATTR_MIN_VALUE_U = 4,
+NL_POLICY_TYPE_ATTR_MAX_VALUE_U = 5,
+NL_POLICY_TYPE_ATTR_MIN_LENGTH = 6,
+NL_POLICY_TYPE_ATTR_MAX_LENGTH = 7,
+NL_POLICY_TYPE_ATTR_POLICY_IDX = 8,
+NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE = 9,
+NL_POLICY_TYPE_ATTR_BITFIELD32_MASK = 10,
+NL_POLICY_TYPE_ATTR_PAD = 11,
+NL_POLICY_TYPE_ATTR_MASK = 12,
+__NL_POLICY_TYPE_ATTR_MAX = 13,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtnl_link_stats {
+pub rx_packets: __u32,
+pub tx_packets: __u32,
+pub rx_bytes: __u32,
+pub tx_bytes: __u32,
+pub rx_errors: __u32,
+pub tx_errors: __u32,
+pub rx_dropped: __u32,
+pub tx_dropped: __u32,
+pub multicast: __u32,
+pub collisions: __u32,
+pub rx_length_errors: __u32,
+pub rx_over_errors: __u32,
+pub rx_crc_errors: __u32,
+pub rx_frame_errors: __u32,
+pub rx_fifo_errors: __u32,
+pub rx_missed_errors: __u32,
+pub tx_aborted_errors: __u32,
+pub tx_carrier_errors: __u32,
+pub tx_fifo_errors: __u32,
+pub tx_heartbeat_errors: __u32,
+pub tx_window_errors: __u32,
+pub rx_compressed: __u32,
+pub tx_compressed: __u32,
+pub rx_nohandler: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtnl_link_stats64 {
+pub rx_packets: __u64,
+pub tx_packets: __u64,
+pub rx_bytes: __u64,
+pub tx_bytes: __u64,
+pub rx_errors: __u64,
+pub tx_errors: __u64,
+pub rx_dropped: __u64,
+pub tx_dropped: __u64,
+pub multicast: __u64,
+pub collisions: __u64,
+pub rx_length_errors: __u64,
+pub rx_over_errors: __u64,
+pub rx_crc_errors: __u64,
+pub rx_frame_errors: __u64,
+pub rx_fifo_errors: __u64,
+pub rx_missed_errors: __u64,
+pub tx_aborted_errors: __u64,
+pub tx_carrier_errors: __u64,
+pub tx_fifo_errors: __u64,
+pub tx_heartbeat_errors: __u64,
+pub tx_window_errors: __u64,
+pub rx_compressed: __u64,
+pub tx_compressed: __u64,
+pub rx_nohandler: __u64,
+pub rx_otherhost_dropped: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtnl_hw_stats64 {
+pub rx_packets: __u64,
+pub tx_packets: __u64,
+pub rx_bytes: __u64,
+pub tx_bytes: __u64,
+pub rx_errors: __u64,
+pub tx_errors: __u64,
+pub rx_dropped: __u64,
+pub tx_dropped: __u64,
+pub multicast: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtnl_link_ifmap {
+pub mem_start: __u64,
+pub mem_end: __u64,
+pub base_addr: __u64,
+pub irq: __u16,
+pub dma: __u8,
+pub port: __u8,
+}
+pub const IFLA_UNSPEC: _bindgen_ty_2 = _bindgen_ty_2::IFLA_UNSPEC;
+pub const IFLA_ADDRESS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_ADDRESS;
+pub const IFLA_BROADCAST: _bindgen_ty_2 = _bindgen_ty_2::IFLA_BROADCAST;
+pub const IFLA_IFNAME: _bindgen_ty_2 = _bindgen_ty_2::IFLA_IFNAME;
+pub const IFLA_MTU: _bindgen_ty_2 = _bindgen_ty_2::IFLA_MTU;
+pub const IFLA_LINK: _bindgen_ty_2 = _bindgen_ty_2::IFLA_LINK;
+pub const IFLA_QDISC: _bindgen_ty_2 = _bindgen_ty_2::IFLA_QDISC;
+pub const IFLA_STATS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_STATS;
+pub const IFLA_COST: _bindgen_ty_2 = _bindgen_ty_2::IFLA_COST;
+pub const IFLA_PRIORITY: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PRIORITY;
+pub const IFLA_MASTER: _bindgen_ty_2 = _bindgen_ty_2::IFLA_MASTER;
+pub const IFLA_WIRELESS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_WIRELESS;
+pub const IFLA_PROTINFO: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PROTINFO;
+pub const IFLA_TXQLEN: _bindgen_ty_2 = _bindgen_ty_2::IFLA_TXQLEN;
+pub const IFLA_MAP: _bindgen_ty_2 = _bindgen_ty_2::IFLA_MAP;
+pub const IFLA_WEIGHT: _bindgen_ty_2 = _bindgen_ty_2::IFLA_WEIGHT;
+pub const IFLA_OPERSTATE: _bindgen_ty_2 = _bindgen_ty_2::IFLA_OPERSTATE;
+pub const IFLA_LINKMODE: _bindgen_ty_2 = _bindgen_ty_2::IFLA_LINKMODE;
+pub const IFLA_LINKINFO: _bindgen_ty_2 = _bindgen_ty_2::IFLA_LINKINFO;
+pub const IFLA_NET_NS_PID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NET_NS_PID;
+pub const IFLA_IFALIAS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_IFALIAS;
+pub const IFLA_NUM_VF: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NUM_VF;
+pub const IFLA_VFINFO_LIST: _bindgen_ty_2 = _bindgen_ty_2::IFLA_VFINFO_LIST;
+pub const IFLA_STATS64: _bindgen_ty_2 = _bindgen_ty_2::IFLA_STATS64;
+pub const IFLA_VF_PORTS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_VF_PORTS;
+pub const IFLA_PORT_SELF: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PORT_SELF;
+pub const IFLA_AF_SPEC: _bindgen_ty_2 = _bindgen_ty_2::IFLA_AF_SPEC;
+pub const IFLA_GROUP: _bindgen_ty_2 = _bindgen_ty_2::IFLA_GROUP;
+pub const IFLA_NET_NS_FD: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NET_NS_FD;
+pub const IFLA_EXT_MASK: _bindgen_ty_2 = _bindgen_ty_2::IFLA_EXT_MASK;
+pub const IFLA_PROMISCUITY: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PROMISCUITY;
+pub const IFLA_NUM_TX_QUEUES: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NUM_TX_QUEUES;
+pub const IFLA_NUM_RX_QUEUES: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NUM_RX_QUEUES;
+pub const IFLA_CARRIER: _bindgen_ty_2 = _bindgen_ty_2::IFLA_CARRIER;
+pub const IFLA_PHYS_PORT_ID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PHYS_PORT_ID;
+pub const IFLA_CARRIER_CHANGES: _bindgen_ty_2 = _bindgen_ty_2::IFLA_CARRIER_CHANGES;
+pub const IFLA_PHYS_SWITCH_ID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PHYS_SWITCH_ID;
+pub const IFLA_LINK_NETNSID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_LINK_NETNSID;
+pub const IFLA_PHYS_PORT_NAME: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PHYS_PORT_NAME;
+pub const IFLA_PROTO_DOWN: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PROTO_DOWN;
+pub const IFLA_GSO_MAX_SEGS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_GSO_MAX_SEGS;
+pub const IFLA_GSO_MAX_SIZE: _bindgen_ty_2 = _bindgen_ty_2::IFLA_GSO_MAX_SIZE;
+pub const IFLA_PAD: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PAD;
+pub const IFLA_XDP: _bindgen_ty_2 = _bindgen_ty_2::IFLA_XDP;
+pub const IFLA_EVENT: _bindgen_ty_2 = _bindgen_ty_2::IFLA_EVENT;
+pub const IFLA_NEW_NETNSID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NEW_NETNSID;
+pub const IFLA_IF_NETNSID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_IF_NETNSID;
+pub const IFLA_TARGET_NETNSID: _bindgen_ty_2 = _bindgen_ty_2::IFLA_IF_NETNSID;
+pub const IFLA_CARRIER_UP_COUNT: _bindgen_ty_2 = _bindgen_ty_2::IFLA_CARRIER_UP_COUNT;
+pub const IFLA_CARRIER_DOWN_COUNT: _bindgen_ty_2 = _bindgen_ty_2::IFLA_CARRIER_DOWN_COUNT;
+pub const IFLA_NEW_IFINDEX: _bindgen_ty_2 = _bindgen_ty_2::IFLA_NEW_IFINDEX;
+pub const IFLA_MIN_MTU: _bindgen_ty_2 = _bindgen_ty_2::IFLA_MIN_MTU;
+pub const IFLA_MAX_MTU: _bindgen_ty_2 = _bindgen_ty_2::IFLA_MAX_MTU;
+pub const IFLA_PROP_LIST: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PROP_LIST;
+pub const IFLA_ALT_IFNAME: _bindgen_ty_2 = _bindgen_ty_2::IFLA_ALT_IFNAME;
+pub const IFLA_PERM_ADDRESS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PERM_ADDRESS;
+pub const IFLA_PROTO_DOWN_REASON: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PROTO_DOWN_REASON;
+pub const IFLA_PARENT_DEV_NAME: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PARENT_DEV_NAME;
+pub const IFLA_PARENT_DEV_BUS_NAME: _bindgen_ty_2 = _bindgen_ty_2::IFLA_PARENT_DEV_BUS_NAME;
+pub const IFLA_GRO_MAX_SIZE: _bindgen_ty_2 = _bindgen_ty_2::IFLA_GRO_MAX_SIZE;
+pub const IFLA_TSO_MAX_SIZE: _bindgen_ty_2 = _bindgen_ty_2::IFLA_TSO_MAX_SIZE;
+pub const IFLA_TSO_MAX_SEGS: _bindgen_ty_2 = _bindgen_ty_2::IFLA_TSO_MAX_SEGS;
+pub const IFLA_ALLMULTI: _bindgen_ty_2 = _bindgen_ty_2::IFLA_ALLMULTI;
+pub const IFLA_DEVLINK_PORT: _bindgen_ty_2 = _bindgen_ty_2::IFLA_DEVLINK_PORT;
+pub const __IFLA_MAX: _bindgen_ty_2 = _bindgen_ty_2::__IFLA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_2 {
+IFLA_UNSPEC = 0,
+IFLA_ADDRESS = 1,
+IFLA_BROADCAST = 2,
+IFLA_IFNAME = 3,
+IFLA_MTU = 4,
+IFLA_LINK = 5,
+IFLA_QDISC = 6,
+IFLA_STATS = 7,
+IFLA_COST = 8,
+IFLA_PRIORITY = 9,
+IFLA_MASTER = 10,
+IFLA_WIRELESS = 11,
+IFLA_PROTINFO = 12,
+IFLA_TXQLEN = 13,
+IFLA_MAP = 14,
+IFLA_WEIGHT = 15,
+IFLA_OPERSTATE = 16,
+IFLA_LINKMODE = 17,
+IFLA_LINKINFO = 18,
+IFLA_NET_NS_PID = 19,
+IFLA_IFALIAS = 20,
+IFLA_NUM_VF = 21,
+IFLA_VFINFO_LIST = 22,
+IFLA_STATS64 = 23,
+IFLA_VF_PORTS = 24,
+IFLA_PORT_SELF = 25,
+IFLA_AF_SPEC = 26,
+IFLA_GROUP = 27,
+IFLA_NET_NS_FD = 28,
+IFLA_EXT_MASK = 29,
+IFLA_PROMISCUITY = 30,
+IFLA_NUM_TX_QUEUES = 31,
+IFLA_NUM_RX_QUEUES = 32,
+IFLA_CARRIER = 33,
+IFLA_PHYS_PORT_ID = 34,
+IFLA_CARRIER_CHANGES = 35,
+IFLA_PHYS_SWITCH_ID = 36,
+IFLA_LINK_NETNSID = 37,
+IFLA_PHYS_PORT_NAME = 38,
+IFLA_PROTO_DOWN = 39,
+IFLA_GSO_MAX_SEGS = 40,
+IFLA_GSO_MAX_SIZE = 41,
+IFLA_PAD = 42,
+IFLA_XDP = 43,
+IFLA_EVENT = 44,
+IFLA_NEW_NETNSID = 45,
+IFLA_IF_NETNSID = 46,
+IFLA_CARRIER_UP_COUNT = 47,
+IFLA_CARRIER_DOWN_COUNT = 48,
+IFLA_NEW_IFINDEX = 49,
+IFLA_MIN_MTU = 50,
+IFLA_MAX_MTU = 51,
+IFLA_PROP_LIST = 52,
+IFLA_ALT_IFNAME = 53,
+IFLA_PERM_ADDRESS = 54,
+IFLA_PROTO_DOWN_REASON = 55,
+IFLA_PARENT_DEV_NAME = 56,
+IFLA_PARENT_DEV_BUS_NAME = 57,
+IFLA_GRO_MAX_SIZE = 58,
+IFLA_TSO_MAX_SIZE = 59,
+IFLA_TSO_MAX_SEGS = 60,
+IFLA_ALLMULTI = 61,
+IFLA_DEVLINK_PORT = 62,
+__IFLA_MAX = 63,
+}
+pub const IFLA_PROTO_DOWN_REASON_UNSPEC: _bindgen_ty_3 = _bindgen_ty_3::IFLA_PROTO_DOWN_REASON_UNSPEC;
+pub const IFLA_PROTO_DOWN_REASON_MASK: _bindgen_ty_3 = _bindgen_ty_3::IFLA_PROTO_DOWN_REASON_MASK;
+pub const IFLA_PROTO_DOWN_REASON_VALUE: _bindgen_ty_3 = _bindgen_ty_3::IFLA_PROTO_DOWN_REASON_VALUE;
+pub const __IFLA_PROTO_DOWN_REASON_CNT: _bindgen_ty_3 = _bindgen_ty_3::__IFLA_PROTO_DOWN_REASON_CNT;
+pub const IFLA_PROTO_DOWN_REASON_MAX: _bindgen_ty_3 = _bindgen_ty_3::IFLA_PROTO_DOWN_REASON_VALUE;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_3 {
+IFLA_PROTO_DOWN_REASON_UNSPEC = 0,
+IFLA_PROTO_DOWN_REASON_MASK = 1,
+IFLA_PROTO_DOWN_REASON_VALUE = 2,
+__IFLA_PROTO_DOWN_REASON_CNT = 3,
+}
+pub const IFLA_INET_UNSPEC: _bindgen_ty_4 = _bindgen_ty_4::IFLA_INET_UNSPEC;
+pub const IFLA_INET_CONF: _bindgen_ty_4 = _bindgen_ty_4::IFLA_INET_CONF;
+pub const __IFLA_INET_MAX: _bindgen_ty_4 = _bindgen_ty_4::__IFLA_INET_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_4 {
+IFLA_INET_UNSPEC = 0,
+IFLA_INET_CONF = 1,
+__IFLA_INET_MAX = 2,
+}
+pub const IFLA_INET6_UNSPEC: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_UNSPEC;
+pub const IFLA_INET6_FLAGS: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_FLAGS;
+pub const IFLA_INET6_CONF: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_CONF;
+pub const IFLA_INET6_STATS: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_STATS;
+pub const IFLA_INET6_MCAST: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_MCAST;
+pub const IFLA_INET6_CACHEINFO: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_CACHEINFO;
+pub const IFLA_INET6_ICMP6STATS: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_ICMP6STATS;
+pub const IFLA_INET6_TOKEN: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_TOKEN;
+pub const IFLA_INET6_ADDR_GEN_MODE: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_ADDR_GEN_MODE;
+pub const IFLA_INET6_RA_MTU: _bindgen_ty_5 = _bindgen_ty_5::IFLA_INET6_RA_MTU;
+pub const __IFLA_INET6_MAX: _bindgen_ty_5 = _bindgen_ty_5::__IFLA_INET6_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_5 {
+IFLA_INET6_UNSPEC = 0,
+IFLA_INET6_FLAGS = 1,
+IFLA_INET6_CONF = 2,
+IFLA_INET6_STATS = 3,
+IFLA_INET6_MCAST = 4,
+IFLA_INET6_CACHEINFO = 5,
+IFLA_INET6_ICMP6STATS = 6,
+IFLA_INET6_TOKEN = 7,
+IFLA_INET6_ADDR_GEN_MODE = 8,
+IFLA_INET6_RA_MTU = 9,
+__IFLA_INET6_MAX = 10,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum in6_addr_gen_mode {
+IN6_ADDR_GEN_MODE_EUI64 = 0,
+IN6_ADDR_GEN_MODE_NONE = 1,
+IN6_ADDR_GEN_MODE_STABLE_PRIVACY = 2,
+IN6_ADDR_GEN_MODE_RANDOM = 3,
+}
+pub const IFLA_BR_UNSPEC: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_UNSPEC;
+pub const IFLA_BR_FORWARD_DELAY: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_FORWARD_DELAY;
+pub const IFLA_BR_HELLO_TIME: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_HELLO_TIME;
+pub const IFLA_BR_MAX_AGE: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MAX_AGE;
+pub const IFLA_BR_AGEING_TIME: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_AGEING_TIME;
+pub const IFLA_BR_STP_STATE: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_STP_STATE;
+pub const IFLA_BR_PRIORITY: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_PRIORITY;
+pub const IFLA_BR_VLAN_FILTERING: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_VLAN_FILTERING;
+pub const IFLA_BR_VLAN_PROTOCOL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_VLAN_PROTOCOL;
+pub const IFLA_BR_GROUP_FWD_MASK: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_GROUP_FWD_MASK;
+pub const IFLA_BR_ROOT_ID: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_ROOT_ID;
+pub const IFLA_BR_BRIDGE_ID: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_BRIDGE_ID;
+pub const IFLA_BR_ROOT_PORT: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_ROOT_PORT;
+pub const IFLA_BR_ROOT_PATH_COST: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_ROOT_PATH_COST;
+pub const IFLA_BR_TOPOLOGY_CHANGE: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_TOPOLOGY_CHANGE;
+pub const IFLA_BR_TOPOLOGY_CHANGE_DETECTED: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_TOPOLOGY_CHANGE_DETECTED;
+pub const IFLA_BR_HELLO_TIMER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_HELLO_TIMER;
+pub const IFLA_BR_TCN_TIMER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_TCN_TIMER;
+pub const IFLA_BR_TOPOLOGY_CHANGE_TIMER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_TOPOLOGY_CHANGE_TIMER;
+pub const IFLA_BR_GC_TIMER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_GC_TIMER;
+pub const IFLA_BR_GROUP_ADDR: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_GROUP_ADDR;
+pub const IFLA_BR_FDB_FLUSH: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_FDB_FLUSH;
+pub const IFLA_BR_MCAST_ROUTER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_ROUTER;
+pub const IFLA_BR_MCAST_SNOOPING: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_SNOOPING;
+pub const IFLA_BR_MCAST_QUERY_USE_IFADDR: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERY_USE_IFADDR;
+pub const IFLA_BR_MCAST_QUERIER: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERIER;
+pub const IFLA_BR_MCAST_HASH_ELASTICITY: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_HASH_ELASTICITY;
+pub const IFLA_BR_MCAST_HASH_MAX: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_HASH_MAX;
+pub const IFLA_BR_MCAST_LAST_MEMBER_CNT: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_LAST_MEMBER_CNT;
+pub const IFLA_BR_MCAST_STARTUP_QUERY_CNT: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_STARTUP_QUERY_CNT;
+pub const IFLA_BR_MCAST_LAST_MEMBER_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_LAST_MEMBER_INTVL;
+pub const IFLA_BR_MCAST_MEMBERSHIP_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_MEMBERSHIP_INTVL;
+pub const IFLA_BR_MCAST_QUERIER_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERIER_INTVL;
+pub const IFLA_BR_MCAST_QUERY_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERY_INTVL;
+pub const IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERY_RESPONSE_INTVL;
+pub const IFLA_BR_MCAST_STARTUP_QUERY_INTVL: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_STARTUP_QUERY_INTVL;
+pub const IFLA_BR_NF_CALL_IPTABLES: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_NF_CALL_IPTABLES;
+pub const IFLA_BR_NF_CALL_IP6TABLES: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_NF_CALL_IP6TABLES;
+pub const IFLA_BR_NF_CALL_ARPTABLES: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_NF_CALL_ARPTABLES;
+pub const IFLA_BR_VLAN_DEFAULT_PVID: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_VLAN_DEFAULT_PVID;
+pub const IFLA_BR_PAD: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_PAD;
+pub const IFLA_BR_VLAN_STATS_ENABLED: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_VLAN_STATS_ENABLED;
+pub const IFLA_BR_MCAST_STATS_ENABLED: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_STATS_ENABLED;
+pub const IFLA_BR_MCAST_IGMP_VERSION: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_IGMP_VERSION;
+pub const IFLA_BR_MCAST_MLD_VERSION: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_MLD_VERSION;
+pub const IFLA_BR_VLAN_STATS_PER_PORT: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_VLAN_STATS_PER_PORT;
+pub const IFLA_BR_MULTI_BOOLOPT: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MULTI_BOOLOPT;
+pub const IFLA_BR_MCAST_QUERIER_STATE: _bindgen_ty_6 = _bindgen_ty_6::IFLA_BR_MCAST_QUERIER_STATE;
+pub const __IFLA_BR_MAX: _bindgen_ty_6 = _bindgen_ty_6::__IFLA_BR_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_6 {
+IFLA_BR_UNSPEC = 0,
+IFLA_BR_FORWARD_DELAY = 1,
+IFLA_BR_HELLO_TIME = 2,
+IFLA_BR_MAX_AGE = 3,
+IFLA_BR_AGEING_TIME = 4,
+IFLA_BR_STP_STATE = 5,
+IFLA_BR_PRIORITY = 6,
+IFLA_BR_VLAN_FILTERING = 7,
+IFLA_BR_VLAN_PROTOCOL = 8,
+IFLA_BR_GROUP_FWD_MASK = 9,
+IFLA_BR_ROOT_ID = 10,
+IFLA_BR_BRIDGE_ID = 11,
+IFLA_BR_ROOT_PORT = 12,
+IFLA_BR_ROOT_PATH_COST = 13,
+IFLA_BR_TOPOLOGY_CHANGE = 14,
+IFLA_BR_TOPOLOGY_CHANGE_DETECTED = 15,
+IFLA_BR_HELLO_TIMER = 16,
+IFLA_BR_TCN_TIMER = 17,
+IFLA_BR_TOPOLOGY_CHANGE_TIMER = 18,
+IFLA_BR_GC_TIMER = 19,
+IFLA_BR_GROUP_ADDR = 20,
+IFLA_BR_FDB_FLUSH = 21,
+IFLA_BR_MCAST_ROUTER = 22,
+IFLA_BR_MCAST_SNOOPING = 23,
+IFLA_BR_MCAST_QUERY_USE_IFADDR = 24,
+IFLA_BR_MCAST_QUERIER = 25,
+IFLA_BR_MCAST_HASH_ELASTICITY = 26,
+IFLA_BR_MCAST_HASH_MAX = 27,
+IFLA_BR_MCAST_LAST_MEMBER_CNT = 28,
+IFLA_BR_MCAST_STARTUP_QUERY_CNT = 29,
+IFLA_BR_MCAST_LAST_MEMBER_INTVL = 30,
+IFLA_BR_MCAST_MEMBERSHIP_INTVL = 31,
+IFLA_BR_MCAST_QUERIER_INTVL = 32,
+IFLA_BR_MCAST_QUERY_INTVL = 33,
+IFLA_BR_MCAST_QUERY_RESPONSE_INTVL = 34,
+IFLA_BR_MCAST_STARTUP_QUERY_INTVL = 35,
+IFLA_BR_NF_CALL_IPTABLES = 36,
+IFLA_BR_NF_CALL_IP6TABLES = 37,
+IFLA_BR_NF_CALL_ARPTABLES = 38,
+IFLA_BR_VLAN_DEFAULT_PVID = 39,
+IFLA_BR_PAD = 40,
+IFLA_BR_VLAN_STATS_ENABLED = 41,
+IFLA_BR_MCAST_STATS_ENABLED = 42,
+IFLA_BR_MCAST_IGMP_VERSION = 43,
+IFLA_BR_MCAST_MLD_VERSION = 44,
+IFLA_BR_VLAN_STATS_PER_PORT = 45,
+IFLA_BR_MULTI_BOOLOPT = 46,
+IFLA_BR_MCAST_QUERIER_STATE = 47,
+__IFLA_BR_MAX = 48,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_bridge_id {
+pub prio: [__u8; 2usize],
+pub addr: [__u8; 6usize],
+}
+pub const BRIDGE_MODE_UNSPEC: _bindgen_ty_7 = _bindgen_ty_7::BRIDGE_MODE_UNSPEC;
+pub const BRIDGE_MODE_HAIRPIN: _bindgen_ty_7 = _bindgen_ty_7::BRIDGE_MODE_HAIRPIN;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_7 {
+BRIDGE_MODE_UNSPEC = 0,
+BRIDGE_MODE_HAIRPIN = 1,
+}
+pub const IFLA_BRPORT_UNSPEC: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_UNSPEC;
+pub const IFLA_BRPORT_STATE: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_STATE;
+pub const IFLA_BRPORT_PRIORITY: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_PRIORITY;
+pub const IFLA_BRPORT_COST: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_COST;
+pub const IFLA_BRPORT_MODE: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MODE;
+pub const IFLA_BRPORT_GUARD: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_GUARD;
+pub const IFLA_BRPORT_PROTECT: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_PROTECT;
+pub const IFLA_BRPORT_FAST_LEAVE: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_FAST_LEAVE;
+pub const IFLA_BRPORT_LEARNING: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_LEARNING;
+pub const IFLA_BRPORT_UNICAST_FLOOD: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_UNICAST_FLOOD;
+pub const IFLA_BRPORT_PROXYARP: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_PROXYARP;
+pub const IFLA_BRPORT_LEARNING_SYNC: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_LEARNING_SYNC;
+pub const IFLA_BRPORT_PROXYARP_WIFI: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_PROXYARP_WIFI;
+pub const IFLA_BRPORT_ROOT_ID: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_ROOT_ID;
+pub const IFLA_BRPORT_BRIDGE_ID: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_BRIDGE_ID;
+pub const IFLA_BRPORT_DESIGNATED_PORT: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_DESIGNATED_PORT;
+pub const IFLA_BRPORT_DESIGNATED_COST: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_DESIGNATED_COST;
+pub const IFLA_BRPORT_ID: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_ID;
+pub const IFLA_BRPORT_NO: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_NO;
+pub const IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_TOPOLOGY_CHANGE_ACK;
+pub const IFLA_BRPORT_CONFIG_PENDING: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_CONFIG_PENDING;
+pub const IFLA_BRPORT_MESSAGE_AGE_TIMER: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MESSAGE_AGE_TIMER;
+pub const IFLA_BRPORT_FORWARD_DELAY_TIMER: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_FORWARD_DELAY_TIMER;
+pub const IFLA_BRPORT_HOLD_TIMER: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_HOLD_TIMER;
+pub const IFLA_BRPORT_FLUSH: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_FLUSH;
+pub const IFLA_BRPORT_MULTICAST_ROUTER: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MULTICAST_ROUTER;
+pub const IFLA_BRPORT_PAD: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_PAD;
+pub const IFLA_BRPORT_MCAST_FLOOD: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MCAST_FLOOD;
+pub const IFLA_BRPORT_MCAST_TO_UCAST: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MCAST_TO_UCAST;
+pub const IFLA_BRPORT_VLAN_TUNNEL: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_VLAN_TUNNEL;
+pub const IFLA_BRPORT_BCAST_FLOOD: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_BCAST_FLOOD;
+pub const IFLA_BRPORT_GROUP_FWD_MASK: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_GROUP_FWD_MASK;
+pub const IFLA_BRPORT_NEIGH_SUPPRESS: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_NEIGH_SUPPRESS;
+pub const IFLA_BRPORT_ISOLATED: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_ISOLATED;
+pub const IFLA_BRPORT_BACKUP_PORT: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_BACKUP_PORT;
+pub const IFLA_BRPORT_MRP_RING_OPEN: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MRP_RING_OPEN;
+pub const IFLA_BRPORT_MRP_IN_OPEN: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MRP_IN_OPEN;
+pub const IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT;
+pub const IFLA_BRPORT_MCAST_EHT_HOSTS_CNT: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MCAST_EHT_HOSTS_CNT;
+pub const IFLA_BRPORT_LOCKED: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_LOCKED;
+pub const IFLA_BRPORT_MAB: _bindgen_ty_8 = _bindgen_ty_8::IFLA_BRPORT_MAB;
+pub const __IFLA_BRPORT_MAX: _bindgen_ty_8 = _bindgen_ty_8::__IFLA_BRPORT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_8 {
+IFLA_BRPORT_UNSPEC = 0,
+IFLA_BRPORT_STATE = 1,
+IFLA_BRPORT_PRIORITY = 2,
+IFLA_BRPORT_COST = 3,
+IFLA_BRPORT_MODE = 4,
+IFLA_BRPORT_GUARD = 5,
+IFLA_BRPORT_PROTECT = 6,
+IFLA_BRPORT_FAST_LEAVE = 7,
+IFLA_BRPORT_LEARNING = 8,
+IFLA_BRPORT_UNICAST_FLOOD = 9,
+IFLA_BRPORT_PROXYARP = 10,
+IFLA_BRPORT_LEARNING_SYNC = 11,
+IFLA_BRPORT_PROXYARP_WIFI = 12,
+IFLA_BRPORT_ROOT_ID = 13,
+IFLA_BRPORT_BRIDGE_ID = 14,
+IFLA_BRPORT_DESIGNATED_PORT = 15,
+IFLA_BRPORT_DESIGNATED_COST = 16,
+IFLA_BRPORT_ID = 17,
+IFLA_BRPORT_NO = 18,
+IFLA_BRPORT_TOPOLOGY_CHANGE_ACK = 19,
+IFLA_BRPORT_CONFIG_PENDING = 20,
+IFLA_BRPORT_MESSAGE_AGE_TIMER = 21,
+IFLA_BRPORT_FORWARD_DELAY_TIMER = 22,
+IFLA_BRPORT_HOLD_TIMER = 23,
+IFLA_BRPORT_FLUSH = 24,
+IFLA_BRPORT_MULTICAST_ROUTER = 25,
+IFLA_BRPORT_PAD = 26,
+IFLA_BRPORT_MCAST_FLOOD = 27,
+IFLA_BRPORT_MCAST_TO_UCAST = 28,
+IFLA_BRPORT_VLAN_TUNNEL = 29,
+IFLA_BRPORT_BCAST_FLOOD = 30,
+IFLA_BRPORT_GROUP_FWD_MASK = 31,
+IFLA_BRPORT_NEIGH_SUPPRESS = 32,
+IFLA_BRPORT_ISOLATED = 33,
+IFLA_BRPORT_BACKUP_PORT = 34,
+IFLA_BRPORT_MRP_RING_OPEN = 35,
+IFLA_BRPORT_MRP_IN_OPEN = 36,
+IFLA_BRPORT_MCAST_EHT_HOSTS_LIMIT = 37,
+IFLA_BRPORT_MCAST_EHT_HOSTS_CNT = 38,
+IFLA_BRPORT_LOCKED = 39,
+IFLA_BRPORT_MAB = 40,
+__IFLA_BRPORT_MAX = 41,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_cacheinfo {
+pub max_reasm_len: __u32,
+pub tstamp: __u32,
+pub reachable_time: __u32,
+pub retrans_time: __u32,
+}
+pub const IFLA_INFO_UNSPEC: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_UNSPEC;
+pub const IFLA_INFO_KIND: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_KIND;
+pub const IFLA_INFO_DATA: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_DATA;
+pub const IFLA_INFO_XSTATS: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_XSTATS;
+pub const IFLA_INFO_SLAVE_KIND: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_SLAVE_KIND;
+pub const IFLA_INFO_SLAVE_DATA: _bindgen_ty_9 = _bindgen_ty_9::IFLA_INFO_SLAVE_DATA;
+pub const __IFLA_INFO_MAX: _bindgen_ty_9 = _bindgen_ty_9::__IFLA_INFO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_9 {
+IFLA_INFO_UNSPEC = 0,
+IFLA_INFO_KIND = 1,
+IFLA_INFO_DATA = 2,
+IFLA_INFO_XSTATS = 3,
+IFLA_INFO_SLAVE_KIND = 4,
+IFLA_INFO_SLAVE_DATA = 5,
+__IFLA_INFO_MAX = 6,
+}
+pub const IFLA_VLAN_UNSPEC: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_UNSPEC;
+pub const IFLA_VLAN_ID: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_ID;
+pub const IFLA_VLAN_FLAGS: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_FLAGS;
+pub const IFLA_VLAN_EGRESS_QOS: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_EGRESS_QOS;
+pub const IFLA_VLAN_INGRESS_QOS: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_INGRESS_QOS;
+pub const IFLA_VLAN_PROTOCOL: _bindgen_ty_10 = _bindgen_ty_10::IFLA_VLAN_PROTOCOL;
+pub const __IFLA_VLAN_MAX: _bindgen_ty_10 = _bindgen_ty_10::__IFLA_VLAN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_10 {
+IFLA_VLAN_UNSPEC = 0,
+IFLA_VLAN_ID = 1,
+IFLA_VLAN_FLAGS = 2,
+IFLA_VLAN_EGRESS_QOS = 3,
+IFLA_VLAN_INGRESS_QOS = 4,
+IFLA_VLAN_PROTOCOL = 5,
+__IFLA_VLAN_MAX = 6,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vlan_flags {
+pub flags: __u32,
+pub mask: __u32,
+}
+pub const IFLA_VLAN_QOS_UNSPEC: _bindgen_ty_11 = _bindgen_ty_11::IFLA_VLAN_QOS_UNSPEC;
+pub const IFLA_VLAN_QOS_MAPPING: _bindgen_ty_11 = _bindgen_ty_11::IFLA_VLAN_QOS_MAPPING;
+pub const __IFLA_VLAN_QOS_MAX: _bindgen_ty_11 = _bindgen_ty_11::__IFLA_VLAN_QOS_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_11 {
+IFLA_VLAN_QOS_UNSPEC = 0,
+IFLA_VLAN_QOS_MAPPING = 1,
+__IFLA_VLAN_QOS_MAX = 2,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vlan_qos_mapping {
+pub from: __u32,
+pub to: __u32,
+}
+pub const IFLA_MACVLAN_UNSPEC: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_UNSPEC;
+pub const IFLA_MACVLAN_MODE: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_MODE;
+pub const IFLA_MACVLAN_FLAGS: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_FLAGS;
+pub const IFLA_MACVLAN_MACADDR_MODE: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_MACADDR_MODE;
+pub const IFLA_MACVLAN_MACADDR: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_MACADDR;
+pub const IFLA_MACVLAN_MACADDR_DATA: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_MACADDR_DATA;
+pub const IFLA_MACVLAN_MACADDR_COUNT: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_MACADDR_COUNT;
+pub const IFLA_MACVLAN_BC_QUEUE_LEN: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_BC_QUEUE_LEN;
+pub const IFLA_MACVLAN_BC_QUEUE_LEN_USED: _bindgen_ty_12 = _bindgen_ty_12::IFLA_MACVLAN_BC_QUEUE_LEN_USED;
+pub const __IFLA_MACVLAN_MAX: _bindgen_ty_12 = _bindgen_ty_12::__IFLA_MACVLAN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_12 {
+IFLA_MACVLAN_UNSPEC = 0,
+IFLA_MACVLAN_MODE = 1,
+IFLA_MACVLAN_FLAGS = 2,
+IFLA_MACVLAN_MACADDR_MODE = 3,
+IFLA_MACVLAN_MACADDR = 4,
+IFLA_MACVLAN_MACADDR_DATA = 5,
+IFLA_MACVLAN_MACADDR_COUNT = 6,
+IFLA_MACVLAN_BC_QUEUE_LEN = 7,
+IFLA_MACVLAN_BC_QUEUE_LEN_USED = 8,
+__IFLA_MACVLAN_MAX = 9,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum macvlan_mode {
+MACVLAN_MODE_PRIVATE = 1,
+MACVLAN_MODE_VEPA = 2,
+MACVLAN_MODE_BRIDGE = 4,
+MACVLAN_MODE_PASSTHRU = 8,
+MACVLAN_MODE_SOURCE = 16,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum macvlan_macaddr_mode {
+MACVLAN_MACADDR_ADD = 0,
+MACVLAN_MACADDR_DEL = 1,
+MACVLAN_MACADDR_FLUSH = 2,
+MACVLAN_MACADDR_SET = 3,
+}
+pub const IFLA_VRF_UNSPEC: _bindgen_ty_13 = _bindgen_ty_13::IFLA_VRF_UNSPEC;
+pub const IFLA_VRF_TABLE: _bindgen_ty_13 = _bindgen_ty_13::IFLA_VRF_TABLE;
+pub const __IFLA_VRF_MAX: _bindgen_ty_13 = _bindgen_ty_13::__IFLA_VRF_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_13 {
+IFLA_VRF_UNSPEC = 0,
+IFLA_VRF_TABLE = 1,
+__IFLA_VRF_MAX = 2,
+}
+pub const IFLA_VRF_PORT_UNSPEC: _bindgen_ty_14 = _bindgen_ty_14::IFLA_VRF_PORT_UNSPEC;
+pub const IFLA_VRF_PORT_TABLE: _bindgen_ty_14 = _bindgen_ty_14::IFLA_VRF_PORT_TABLE;
+pub const __IFLA_VRF_PORT_MAX: _bindgen_ty_14 = _bindgen_ty_14::__IFLA_VRF_PORT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_14 {
+IFLA_VRF_PORT_UNSPEC = 0,
+IFLA_VRF_PORT_TABLE = 1,
+__IFLA_VRF_PORT_MAX = 2,
+}
+pub const IFLA_MACSEC_UNSPEC: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_UNSPEC;
+pub const IFLA_MACSEC_SCI: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_SCI;
+pub const IFLA_MACSEC_PORT: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_PORT;
+pub const IFLA_MACSEC_ICV_LEN: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_ICV_LEN;
+pub const IFLA_MACSEC_CIPHER_SUITE: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_CIPHER_SUITE;
+pub const IFLA_MACSEC_WINDOW: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_WINDOW;
+pub const IFLA_MACSEC_ENCODING_SA: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_ENCODING_SA;
+pub const IFLA_MACSEC_ENCRYPT: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_ENCRYPT;
+pub const IFLA_MACSEC_PROTECT: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_PROTECT;
+pub const IFLA_MACSEC_INC_SCI: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_INC_SCI;
+pub const IFLA_MACSEC_ES: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_ES;
+pub const IFLA_MACSEC_SCB: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_SCB;
+pub const IFLA_MACSEC_REPLAY_PROTECT: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_REPLAY_PROTECT;
+pub const IFLA_MACSEC_VALIDATION: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_VALIDATION;
+pub const IFLA_MACSEC_PAD: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_PAD;
+pub const IFLA_MACSEC_OFFLOAD: _bindgen_ty_15 = _bindgen_ty_15::IFLA_MACSEC_OFFLOAD;
+pub const __IFLA_MACSEC_MAX: _bindgen_ty_15 = _bindgen_ty_15::__IFLA_MACSEC_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_15 {
+IFLA_MACSEC_UNSPEC = 0,
+IFLA_MACSEC_SCI = 1,
+IFLA_MACSEC_PORT = 2,
+IFLA_MACSEC_ICV_LEN = 3,
+IFLA_MACSEC_CIPHER_SUITE = 4,
+IFLA_MACSEC_WINDOW = 5,
+IFLA_MACSEC_ENCODING_SA = 6,
+IFLA_MACSEC_ENCRYPT = 7,
+IFLA_MACSEC_PROTECT = 8,
+IFLA_MACSEC_INC_SCI = 9,
+IFLA_MACSEC_ES = 10,
+IFLA_MACSEC_SCB = 11,
+IFLA_MACSEC_REPLAY_PROTECT = 12,
+IFLA_MACSEC_VALIDATION = 13,
+IFLA_MACSEC_PAD = 14,
+IFLA_MACSEC_OFFLOAD = 15,
+__IFLA_MACSEC_MAX = 16,
+}
+pub const IFLA_XFRM_UNSPEC: _bindgen_ty_16 = _bindgen_ty_16::IFLA_XFRM_UNSPEC;
+pub const IFLA_XFRM_LINK: _bindgen_ty_16 = _bindgen_ty_16::IFLA_XFRM_LINK;
+pub const IFLA_XFRM_IF_ID: _bindgen_ty_16 = _bindgen_ty_16::IFLA_XFRM_IF_ID;
+pub const IFLA_XFRM_COLLECT_METADATA: _bindgen_ty_16 = _bindgen_ty_16::IFLA_XFRM_COLLECT_METADATA;
+pub const __IFLA_XFRM_MAX: _bindgen_ty_16 = _bindgen_ty_16::__IFLA_XFRM_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_16 {
+IFLA_XFRM_UNSPEC = 0,
+IFLA_XFRM_LINK = 1,
+IFLA_XFRM_IF_ID = 2,
+IFLA_XFRM_COLLECT_METADATA = 3,
+__IFLA_XFRM_MAX = 4,
+}
+impl macsec_validation_type {
+pub const MACSEC_VALIDATE_MAX: macsec_validation_type = macsec_validation_type::MACSEC_VALIDATE_STRICT;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum macsec_validation_type {
+MACSEC_VALIDATE_DISABLED = 0,
+MACSEC_VALIDATE_CHECK = 1,
+MACSEC_VALIDATE_STRICT = 2,
+__MACSEC_VALIDATE_END = 3,
+}
+impl macsec_offload {
+pub const MACSEC_OFFLOAD_MAX: macsec_offload = macsec_offload::MACSEC_OFFLOAD_MAC;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum macsec_offload {
+MACSEC_OFFLOAD_OFF = 0,
+MACSEC_OFFLOAD_PHY = 1,
+MACSEC_OFFLOAD_MAC = 2,
+__MACSEC_OFFLOAD_END = 3,
+}
+pub const IFLA_IPVLAN_UNSPEC: _bindgen_ty_17 = _bindgen_ty_17::IFLA_IPVLAN_UNSPEC;
+pub const IFLA_IPVLAN_MODE: _bindgen_ty_17 = _bindgen_ty_17::IFLA_IPVLAN_MODE;
+pub const IFLA_IPVLAN_FLAGS: _bindgen_ty_17 = _bindgen_ty_17::IFLA_IPVLAN_FLAGS;
+pub const __IFLA_IPVLAN_MAX: _bindgen_ty_17 = _bindgen_ty_17::__IFLA_IPVLAN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_17 {
+IFLA_IPVLAN_UNSPEC = 0,
+IFLA_IPVLAN_MODE = 1,
+IFLA_IPVLAN_FLAGS = 2,
+__IFLA_IPVLAN_MAX = 3,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum ipvlan_mode {
+IPVLAN_MODE_L2 = 0,
+IPVLAN_MODE_L3 = 1,
+IPVLAN_MODE_L3S = 2,
+IPVLAN_MODE_MAX = 3,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tunnel_msg {
+pub family: __u8,
+pub flags: __u8,
+pub reserved2: __u16,
+pub ifindex: __u32,
+}
+pub const VNIFILTER_ENTRY_STATS_UNSPEC: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_UNSPEC;
+pub const VNIFILTER_ENTRY_STATS_RX_BYTES: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_RX_BYTES;
+pub const VNIFILTER_ENTRY_STATS_RX_PKTS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_RX_PKTS;
+pub const VNIFILTER_ENTRY_STATS_RX_DROPS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_RX_DROPS;
+pub const VNIFILTER_ENTRY_STATS_RX_ERRORS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_RX_ERRORS;
+pub const VNIFILTER_ENTRY_STATS_TX_BYTES: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_TX_BYTES;
+pub const VNIFILTER_ENTRY_STATS_TX_PKTS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_TX_PKTS;
+pub const VNIFILTER_ENTRY_STATS_TX_DROPS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_TX_DROPS;
+pub const VNIFILTER_ENTRY_STATS_TX_ERRORS: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_TX_ERRORS;
+pub const VNIFILTER_ENTRY_STATS_PAD: _bindgen_ty_18 = _bindgen_ty_18::VNIFILTER_ENTRY_STATS_PAD;
+pub const __VNIFILTER_ENTRY_STATS_MAX: _bindgen_ty_18 = _bindgen_ty_18::__VNIFILTER_ENTRY_STATS_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_18 {
+VNIFILTER_ENTRY_STATS_UNSPEC = 0,
+VNIFILTER_ENTRY_STATS_RX_BYTES = 1,
+VNIFILTER_ENTRY_STATS_RX_PKTS = 2,
+VNIFILTER_ENTRY_STATS_RX_DROPS = 3,
+VNIFILTER_ENTRY_STATS_RX_ERRORS = 4,
+VNIFILTER_ENTRY_STATS_TX_BYTES = 5,
+VNIFILTER_ENTRY_STATS_TX_PKTS = 6,
+VNIFILTER_ENTRY_STATS_TX_DROPS = 7,
+VNIFILTER_ENTRY_STATS_TX_ERRORS = 8,
+VNIFILTER_ENTRY_STATS_PAD = 9,
+__VNIFILTER_ENTRY_STATS_MAX = 10,
+}
+pub const VXLAN_VNIFILTER_ENTRY_UNSPEC: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_UNSPEC;
+pub const VXLAN_VNIFILTER_ENTRY_START: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_START;
+pub const VXLAN_VNIFILTER_ENTRY_END: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_END;
+pub const VXLAN_VNIFILTER_ENTRY_GROUP: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_GROUP;
+pub const VXLAN_VNIFILTER_ENTRY_GROUP6: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_GROUP6;
+pub const VXLAN_VNIFILTER_ENTRY_STATS: _bindgen_ty_19 = _bindgen_ty_19::VXLAN_VNIFILTER_ENTRY_STATS;
+pub const __VXLAN_VNIFILTER_ENTRY_MAX: _bindgen_ty_19 = _bindgen_ty_19::__VXLAN_VNIFILTER_ENTRY_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_19 {
+VXLAN_VNIFILTER_ENTRY_UNSPEC = 0,
+VXLAN_VNIFILTER_ENTRY_START = 1,
+VXLAN_VNIFILTER_ENTRY_END = 2,
+VXLAN_VNIFILTER_ENTRY_GROUP = 3,
+VXLAN_VNIFILTER_ENTRY_GROUP6 = 4,
+VXLAN_VNIFILTER_ENTRY_STATS = 5,
+__VXLAN_VNIFILTER_ENTRY_MAX = 6,
+}
+pub const VXLAN_VNIFILTER_UNSPEC: _bindgen_ty_20 = _bindgen_ty_20::VXLAN_VNIFILTER_UNSPEC;
+pub const VXLAN_VNIFILTER_ENTRY: _bindgen_ty_20 = _bindgen_ty_20::VXLAN_VNIFILTER_ENTRY;
+pub const __VXLAN_VNIFILTER_MAX: _bindgen_ty_20 = _bindgen_ty_20::__VXLAN_VNIFILTER_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_20 {
+VXLAN_VNIFILTER_UNSPEC = 0,
+VXLAN_VNIFILTER_ENTRY = 1,
+__VXLAN_VNIFILTER_MAX = 2,
+}
+pub const IFLA_VXLAN_UNSPEC: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_UNSPEC;
+pub const IFLA_VXLAN_ID: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_ID;
+pub const IFLA_VXLAN_GROUP: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_GROUP;
+pub const IFLA_VXLAN_LINK: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LINK;
+pub const IFLA_VXLAN_LOCAL: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LOCAL;
+pub const IFLA_VXLAN_TTL: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_TTL;
+pub const IFLA_VXLAN_TOS: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_TOS;
+pub const IFLA_VXLAN_LEARNING: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LEARNING;
+pub const IFLA_VXLAN_AGEING: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_AGEING;
+pub const IFLA_VXLAN_LIMIT: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LIMIT;
+pub const IFLA_VXLAN_PORT_RANGE: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_PORT_RANGE;
+pub const IFLA_VXLAN_PROXY: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_PROXY;
+pub const IFLA_VXLAN_RSC: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_RSC;
+pub const IFLA_VXLAN_L2MISS: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_L2MISS;
+pub const IFLA_VXLAN_L3MISS: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_L3MISS;
+pub const IFLA_VXLAN_PORT: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_PORT;
+pub const IFLA_VXLAN_GROUP6: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_GROUP6;
+pub const IFLA_VXLAN_LOCAL6: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LOCAL6;
+pub const IFLA_VXLAN_UDP_CSUM: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_UDP_CSUM;
+pub const IFLA_VXLAN_UDP_ZERO_CSUM6_TX: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_UDP_ZERO_CSUM6_TX;
+pub const IFLA_VXLAN_UDP_ZERO_CSUM6_RX: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_UDP_ZERO_CSUM6_RX;
+pub const IFLA_VXLAN_REMCSUM_TX: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_REMCSUM_TX;
+pub const IFLA_VXLAN_REMCSUM_RX: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_REMCSUM_RX;
+pub const IFLA_VXLAN_GBP: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_GBP;
+pub const IFLA_VXLAN_REMCSUM_NOPARTIAL: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_REMCSUM_NOPARTIAL;
+pub const IFLA_VXLAN_COLLECT_METADATA: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_COLLECT_METADATA;
+pub const IFLA_VXLAN_LABEL: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_LABEL;
+pub const IFLA_VXLAN_GPE: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_GPE;
+pub const IFLA_VXLAN_TTL_INHERIT: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_TTL_INHERIT;
+pub const IFLA_VXLAN_DF: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_DF;
+pub const IFLA_VXLAN_VNIFILTER: _bindgen_ty_21 = _bindgen_ty_21::IFLA_VXLAN_VNIFILTER;
+pub const __IFLA_VXLAN_MAX: _bindgen_ty_21 = _bindgen_ty_21::__IFLA_VXLAN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_21 {
+IFLA_VXLAN_UNSPEC = 0,
+IFLA_VXLAN_ID = 1,
+IFLA_VXLAN_GROUP = 2,
+IFLA_VXLAN_LINK = 3,
+IFLA_VXLAN_LOCAL = 4,
+IFLA_VXLAN_TTL = 5,
+IFLA_VXLAN_TOS = 6,
+IFLA_VXLAN_LEARNING = 7,
+IFLA_VXLAN_AGEING = 8,
+IFLA_VXLAN_LIMIT = 9,
+IFLA_VXLAN_PORT_RANGE = 10,
+IFLA_VXLAN_PROXY = 11,
+IFLA_VXLAN_RSC = 12,
+IFLA_VXLAN_L2MISS = 13,
+IFLA_VXLAN_L3MISS = 14,
+IFLA_VXLAN_PORT = 15,
+IFLA_VXLAN_GROUP6 = 16,
+IFLA_VXLAN_LOCAL6 = 17,
+IFLA_VXLAN_UDP_CSUM = 18,
+IFLA_VXLAN_UDP_ZERO_CSUM6_TX = 19,
+IFLA_VXLAN_UDP_ZERO_CSUM6_RX = 20,
+IFLA_VXLAN_REMCSUM_TX = 21,
+IFLA_VXLAN_REMCSUM_RX = 22,
+IFLA_VXLAN_GBP = 23,
+IFLA_VXLAN_REMCSUM_NOPARTIAL = 24,
+IFLA_VXLAN_COLLECT_METADATA = 25,
+IFLA_VXLAN_LABEL = 26,
+IFLA_VXLAN_GPE = 27,
+IFLA_VXLAN_TTL_INHERIT = 28,
+IFLA_VXLAN_DF = 29,
+IFLA_VXLAN_VNIFILTER = 30,
+__IFLA_VXLAN_MAX = 31,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vxlan_port_range {
+pub low: __be16,
+pub high: __be16,
+}
+impl ifla_vxlan_df {
+pub const VXLAN_DF_MAX: ifla_vxlan_df = ifla_vxlan_df::VXLAN_DF_INHERIT;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum ifla_vxlan_df {
+VXLAN_DF_UNSET = 0,
+VXLAN_DF_SET = 1,
+VXLAN_DF_INHERIT = 2,
+__VXLAN_DF_END = 3,
+}
+pub const IFLA_GENEVE_UNSPEC: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_UNSPEC;
+pub const IFLA_GENEVE_ID: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_ID;
+pub const IFLA_GENEVE_REMOTE: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_REMOTE;
+pub const IFLA_GENEVE_TTL: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_TTL;
+pub const IFLA_GENEVE_TOS: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_TOS;
+pub const IFLA_GENEVE_PORT: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_PORT;
+pub const IFLA_GENEVE_COLLECT_METADATA: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_COLLECT_METADATA;
+pub const IFLA_GENEVE_REMOTE6: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_REMOTE6;
+pub const IFLA_GENEVE_UDP_CSUM: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_UDP_CSUM;
+pub const IFLA_GENEVE_UDP_ZERO_CSUM6_TX: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_UDP_ZERO_CSUM6_TX;
+pub const IFLA_GENEVE_UDP_ZERO_CSUM6_RX: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_UDP_ZERO_CSUM6_RX;
+pub const IFLA_GENEVE_LABEL: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_LABEL;
+pub const IFLA_GENEVE_TTL_INHERIT: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_TTL_INHERIT;
+pub const IFLA_GENEVE_DF: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_DF;
+pub const IFLA_GENEVE_INNER_PROTO_INHERIT: _bindgen_ty_22 = _bindgen_ty_22::IFLA_GENEVE_INNER_PROTO_INHERIT;
+pub const __IFLA_GENEVE_MAX: _bindgen_ty_22 = _bindgen_ty_22::__IFLA_GENEVE_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_22 {
+IFLA_GENEVE_UNSPEC = 0,
+IFLA_GENEVE_ID = 1,
+IFLA_GENEVE_REMOTE = 2,
+IFLA_GENEVE_TTL = 3,
+IFLA_GENEVE_TOS = 4,
+IFLA_GENEVE_PORT = 5,
+IFLA_GENEVE_COLLECT_METADATA = 6,
+IFLA_GENEVE_REMOTE6 = 7,
+IFLA_GENEVE_UDP_CSUM = 8,
+IFLA_GENEVE_UDP_ZERO_CSUM6_TX = 9,
+IFLA_GENEVE_UDP_ZERO_CSUM6_RX = 10,
+IFLA_GENEVE_LABEL = 11,
+IFLA_GENEVE_TTL_INHERIT = 12,
+IFLA_GENEVE_DF = 13,
+IFLA_GENEVE_INNER_PROTO_INHERIT = 14,
+__IFLA_GENEVE_MAX = 15,
+}
+impl ifla_geneve_df {
+pub const GENEVE_DF_MAX: ifla_geneve_df = ifla_geneve_df::GENEVE_DF_INHERIT;
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum ifla_geneve_df {
+GENEVE_DF_UNSET = 0,
+GENEVE_DF_SET = 1,
+GENEVE_DF_INHERIT = 2,
+__GENEVE_DF_END = 3,
+}
+pub const IFLA_BAREUDP_UNSPEC: _bindgen_ty_23 = _bindgen_ty_23::IFLA_BAREUDP_UNSPEC;
+pub const IFLA_BAREUDP_PORT: _bindgen_ty_23 = _bindgen_ty_23::IFLA_BAREUDP_PORT;
+pub const IFLA_BAREUDP_ETHERTYPE: _bindgen_ty_23 = _bindgen_ty_23::IFLA_BAREUDP_ETHERTYPE;
+pub const IFLA_BAREUDP_SRCPORT_MIN: _bindgen_ty_23 = _bindgen_ty_23::IFLA_BAREUDP_SRCPORT_MIN;
+pub const IFLA_BAREUDP_MULTIPROTO_MODE: _bindgen_ty_23 = _bindgen_ty_23::IFLA_BAREUDP_MULTIPROTO_MODE;
+pub const __IFLA_BAREUDP_MAX: _bindgen_ty_23 = _bindgen_ty_23::__IFLA_BAREUDP_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_23 {
+IFLA_BAREUDP_UNSPEC = 0,
+IFLA_BAREUDP_PORT = 1,
+IFLA_BAREUDP_ETHERTYPE = 2,
+IFLA_BAREUDP_SRCPORT_MIN = 3,
+IFLA_BAREUDP_MULTIPROTO_MODE = 4,
+__IFLA_BAREUDP_MAX = 5,
+}
+pub const IFLA_PPP_UNSPEC: _bindgen_ty_24 = _bindgen_ty_24::IFLA_PPP_UNSPEC;
+pub const IFLA_PPP_DEV_FD: _bindgen_ty_24 = _bindgen_ty_24::IFLA_PPP_DEV_FD;
+pub const __IFLA_PPP_MAX: _bindgen_ty_24 = _bindgen_ty_24::__IFLA_PPP_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_24 {
+IFLA_PPP_UNSPEC = 0,
+IFLA_PPP_DEV_FD = 1,
+__IFLA_PPP_MAX = 2,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum ifla_gtp_role {
+GTP_ROLE_GGSN = 0,
+GTP_ROLE_SGSN = 1,
+}
+pub const IFLA_GTP_UNSPEC: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_UNSPEC;
+pub const IFLA_GTP_FD0: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_FD0;
+pub const IFLA_GTP_FD1: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_FD1;
+pub const IFLA_GTP_PDP_HASHSIZE: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_PDP_HASHSIZE;
+pub const IFLA_GTP_ROLE: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_ROLE;
+pub const IFLA_GTP_CREATE_SOCKETS: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_CREATE_SOCKETS;
+pub const IFLA_GTP_RESTART_COUNT: _bindgen_ty_25 = _bindgen_ty_25::IFLA_GTP_RESTART_COUNT;
+pub const __IFLA_GTP_MAX: _bindgen_ty_25 = _bindgen_ty_25::__IFLA_GTP_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_25 {
+IFLA_GTP_UNSPEC = 0,
+IFLA_GTP_FD0 = 1,
+IFLA_GTP_FD1 = 2,
+IFLA_GTP_PDP_HASHSIZE = 3,
+IFLA_GTP_ROLE = 4,
+IFLA_GTP_CREATE_SOCKETS = 5,
+IFLA_GTP_RESTART_COUNT = 6,
+__IFLA_GTP_MAX = 7,
+}
+pub const IFLA_BOND_UNSPEC: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_UNSPEC;
+pub const IFLA_BOND_MODE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_MODE;
+pub const IFLA_BOND_ACTIVE_SLAVE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ACTIVE_SLAVE;
+pub const IFLA_BOND_MIIMON: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_MIIMON;
+pub const IFLA_BOND_UPDELAY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_UPDELAY;
+pub const IFLA_BOND_DOWNDELAY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_DOWNDELAY;
+pub const IFLA_BOND_USE_CARRIER: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_USE_CARRIER;
+pub const IFLA_BOND_ARP_INTERVAL: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ARP_INTERVAL;
+pub const IFLA_BOND_ARP_IP_TARGET: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ARP_IP_TARGET;
+pub const IFLA_BOND_ARP_VALIDATE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ARP_VALIDATE;
+pub const IFLA_BOND_ARP_ALL_TARGETS: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ARP_ALL_TARGETS;
+pub const IFLA_BOND_PRIMARY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_PRIMARY;
+pub const IFLA_BOND_PRIMARY_RESELECT: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_PRIMARY_RESELECT;
+pub const IFLA_BOND_FAIL_OVER_MAC: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_FAIL_OVER_MAC;
+pub const IFLA_BOND_XMIT_HASH_POLICY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_XMIT_HASH_POLICY;
+pub const IFLA_BOND_RESEND_IGMP: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_RESEND_IGMP;
+pub const IFLA_BOND_NUM_PEER_NOTIF: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_NUM_PEER_NOTIF;
+pub const IFLA_BOND_ALL_SLAVES_ACTIVE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_ALL_SLAVES_ACTIVE;
+pub const IFLA_BOND_MIN_LINKS: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_MIN_LINKS;
+pub const IFLA_BOND_LP_INTERVAL: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_LP_INTERVAL;
+pub const IFLA_BOND_PACKETS_PER_SLAVE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_PACKETS_PER_SLAVE;
+pub const IFLA_BOND_AD_LACP_RATE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_LACP_RATE;
+pub const IFLA_BOND_AD_SELECT: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_SELECT;
+pub const IFLA_BOND_AD_INFO: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_INFO;
+pub const IFLA_BOND_AD_ACTOR_SYS_PRIO: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_ACTOR_SYS_PRIO;
+pub const IFLA_BOND_AD_USER_PORT_KEY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_USER_PORT_KEY;
+pub const IFLA_BOND_AD_ACTOR_SYSTEM: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_ACTOR_SYSTEM;
+pub const IFLA_BOND_TLB_DYNAMIC_LB: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_TLB_DYNAMIC_LB;
+pub const IFLA_BOND_PEER_NOTIF_DELAY: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_PEER_NOTIF_DELAY;
+pub const IFLA_BOND_AD_LACP_ACTIVE: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_AD_LACP_ACTIVE;
+pub const IFLA_BOND_MISSED_MAX: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_MISSED_MAX;
+pub const IFLA_BOND_NS_IP6_TARGET: _bindgen_ty_26 = _bindgen_ty_26::IFLA_BOND_NS_IP6_TARGET;
+pub const __IFLA_BOND_MAX: _bindgen_ty_26 = _bindgen_ty_26::__IFLA_BOND_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_26 {
+IFLA_BOND_UNSPEC = 0,
+IFLA_BOND_MODE = 1,
+IFLA_BOND_ACTIVE_SLAVE = 2,
+IFLA_BOND_MIIMON = 3,
+IFLA_BOND_UPDELAY = 4,
+IFLA_BOND_DOWNDELAY = 5,
+IFLA_BOND_USE_CARRIER = 6,
+IFLA_BOND_ARP_INTERVAL = 7,
+IFLA_BOND_ARP_IP_TARGET = 8,
+IFLA_BOND_ARP_VALIDATE = 9,
+IFLA_BOND_ARP_ALL_TARGETS = 10,
+IFLA_BOND_PRIMARY = 11,
+IFLA_BOND_PRIMARY_RESELECT = 12,
+IFLA_BOND_FAIL_OVER_MAC = 13,
+IFLA_BOND_XMIT_HASH_POLICY = 14,
+IFLA_BOND_RESEND_IGMP = 15,
+IFLA_BOND_NUM_PEER_NOTIF = 16,
+IFLA_BOND_ALL_SLAVES_ACTIVE = 17,
+IFLA_BOND_MIN_LINKS = 18,
+IFLA_BOND_LP_INTERVAL = 19,
+IFLA_BOND_PACKETS_PER_SLAVE = 20,
+IFLA_BOND_AD_LACP_RATE = 21,
+IFLA_BOND_AD_SELECT = 22,
+IFLA_BOND_AD_INFO = 23,
+IFLA_BOND_AD_ACTOR_SYS_PRIO = 24,
+IFLA_BOND_AD_USER_PORT_KEY = 25,
+IFLA_BOND_AD_ACTOR_SYSTEM = 26,
+IFLA_BOND_TLB_DYNAMIC_LB = 27,
+IFLA_BOND_PEER_NOTIF_DELAY = 28,
+IFLA_BOND_AD_LACP_ACTIVE = 29,
+IFLA_BOND_MISSED_MAX = 30,
+IFLA_BOND_NS_IP6_TARGET = 31,
+__IFLA_BOND_MAX = 32,
+}
+pub const IFLA_BOND_AD_INFO_UNSPEC: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_UNSPEC;
+pub const IFLA_BOND_AD_INFO_AGGREGATOR: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_AGGREGATOR;
+pub const IFLA_BOND_AD_INFO_NUM_PORTS: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_NUM_PORTS;
+pub const IFLA_BOND_AD_INFO_ACTOR_KEY: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_ACTOR_KEY;
+pub const IFLA_BOND_AD_INFO_PARTNER_KEY: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_PARTNER_KEY;
+pub const IFLA_BOND_AD_INFO_PARTNER_MAC: _bindgen_ty_27 = _bindgen_ty_27::IFLA_BOND_AD_INFO_PARTNER_MAC;
+pub const __IFLA_BOND_AD_INFO_MAX: _bindgen_ty_27 = _bindgen_ty_27::__IFLA_BOND_AD_INFO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_27 {
+IFLA_BOND_AD_INFO_UNSPEC = 0,
+IFLA_BOND_AD_INFO_AGGREGATOR = 1,
+IFLA_BOND_AD_INFO_NUM_PORTS = 2,
+IFLA_BOND_AD_INFO_ACTOR_KEY = 3,
+IFLA_BOND_AD_INFO_PARTNER_KEY = 4,
+IFLA_BOND_AD_INFO_PARTNER_MAC = 5,
+__IFLA_BOND_AD_INFO_MAX = 6,
+}
+pub const IFLA_BOND_SLAVE_UNSPEC: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_UNSPEC;
+pub const IFLA_BOND_SLAVE_STATE: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_STATE;
+pub const IFLA_BOND_SLAVE_MII_STATUS: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_MII_STATUS;
+pub const IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_LINK_FAILURE_COUNT;
+pub const IFLA_BOND_SLAVE_PERM_HWADDR: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_PERM_HWADDR;
+pub const IFLA_BOND_SLAVE_QUEUE_ID: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_QUEUE_ID;
+pub const IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_AD_AGGREGATOR_ID;
+pub const IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE;
+pub const IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE;
+pub const IFLA_BOND_SLAVE_PRIO: _bindgen_ty_28 = _bindgen_ty_28::IFLA_BOND_SLAVE_PRIO;
+pub const __IFLA_BOND_SLAVE_MAX: _bindgen_ty_28 = _bindgen_ty_28::__IFLA_BOND_SLAVE_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_28 {
+IFLA_BOND_SLAVE_UNSPEC = 0,
+IFLA_BOND_SLAVE_STATE = 1,
+IFLA_BOND_SLAVE_MII_STATUS = 2,
+IFLA_BOND_SLAVE_LINK_FAILURE_COUNT = 3,
+IFLA_BOND_SLAVE_PERM_HWADDR = 4,
+IFLA_BOND_SLAVE_QUEUE_ID = 5,
+IFLA_BOND_SLAVE_AD_AGGREGATOR_ID = 6,
+IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE = 7,
+IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE = 8,
+IFLA_BOND_SLAVE_PRIO = 9,
+__IFLA_BOND_SLAVE_MAX = 10,
+}
+pub const IFLA_VF_INFO_UNSPEC: _bindgen_ty_29 = _bindgen_ty_29::IFLA_VF_INFO_UNSPEC;
+pub const IFLA_VF_INFO: _bindgen_ty_29 = _bindgen_ty_29::IFLA_VF_INFO;
+pub const __IFLA_VF_INFO_MAX: _bindgen_ty_29 = _bindgen_ty_29::__IFLA_VF_INFO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_29 {
+IFLA_VF_INFO_UNSPEC = 0,
+IFLA_VF_INFO = 1,
+__IFLA_VF_INFO_MAX = 2,
+}
+pub const IFLA_VF_UNSPEC: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_UNSPEC;
+pub const IFLA_VF_MAC: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_MAC;
+pub const IFLA_VF_VLAN: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_VLAN;
+pub const IFLA_VF_TX_RATE: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_TX_RATE;
+pub const IFLA_VF_SPOOFCHK: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_SPOOFCHK;
+pub const IFLA_VF_LINK_STATE: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_LINK_STATE;
+pub const IFLA_VF_RATE: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_RATE;
+pub const IFLA_VF_RSS_QUERY_EN: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_RSS_QUERY_EN;
+pub const IFLA_VF_STATS: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_STATS;
+pub const IFLA_VF_TRUST: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_TRUST;
+pub const IFLA_VF_IB_NODE_GUID: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_IB_NODE_GUID;
+pub const IFLA_VF_IB_PORT_GUID: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_IB_PORT_GUID;
+pub const IFLA_VF_VLAN_LIST: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_VLAN_LIST;
+pub const IFLA_VF_BROADCAST: _bindgen_ty_30 = _bindgen_ty_30::IFLA_VF_BROADCAST;
+pub const __IFLA_VF_MAX: _bindgen_ty_30 = _bindgen_ty_30::__IFLA_VF_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_30 {
+IFLA_VF_UNSPEC = 0,
+IFLA_VF_MAC = 1,
+IFLA_VF_VLAN = 2,
+IFLA_VF_TX_RATE = 3,
+IFLA_VF_SPOOFCHK = 4,
+IFLA_VF_LINK_STATE = 5,
+IFLA_VF_RATE = 6,
+IFLA_VF_RSS_QUERY_EN = 7,
+IFLA_VF_STATS = 8,
+IFLA_VF_TRUST = 9,
+IFLA_VF_IB_NODE_GUID = 10,
+IFLA_VF_IB_PORT_GUID = 11,
+IFLA_VF_VLAN_LIST = 12,
+IFLA_VF_BROADCAST = 13,
+__IFLA_VF_MAX = 14,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_mac {
+pub vf: __u32,
+pub mac: [__u8; 32usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_broadcast {
+pub broadcast: [__u8; 32usize],
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_vlan {
+pub vf: __u32,
+pub vlan: __u32,
+pub qos: __u32,
+}
+pub const IFLA_VF_VLAN_INFO_UNSPEC: _bindgen_ty_31 = _bindgen_ty_31::IFLA_VF_VLAN_INFO_UNSPEC;
+pub const IFLA_VF_VLAN_INFO: _bindgen_ty_31 = _bindgen_ty_31::IFLA_VF_VLAN_INFO;
+pub const __IFLA_VF_VLAN_INFO_MAX: _bindgen_ty_31 = _bindgen_ty_31::__IFLA_VF_VLAN_INFO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_31 {
+IFLA_VF_VLAN_INFO_UNSPEC = 0,
+IFLA_VF_VLAN_INFO = 1,
+__IFLA_VF_VLAN_INFO_MAX = 2,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_vlan_info {
+pub vf: __u32,
+pub vlan: __u32,
+pub qos: __u32,
+pub vlan_proto: __be16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_tx_rate {
+pub vf: __u32,
+pub rate: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_rate {
+pub vf: __u32,
+pub min_tx_rate: __u32,
+pub max_tx_rate: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_spoofchk {
+pub vf: __u32,
+pub setting: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_guid {
+pub vf: __u32,
+pub guid: __u64,
+}
+pub const IFLA_VF_LINK_STATE_AUTO: _bindgen_ty_32 = _bindgen_ty_32::IFLA_VF_LINK_STATE_AUTO;
+pub const IFLA_VF_LINK_STATE_ENABLE: _bindgen_ty_32 = _bindgen_ty_32::IFLA_VF_LINK_STATE_ENABLE;
+pub const IFLA_VF_LINK_STATE_DISABLE: _bindgen_ty_32 = _bindgen_ty_32::IFLA_VF_LINK_STATE_DISABLE;
+pub const __IFLA_VF_LINK_STATE_MAX: _bindgen_ty_32 = _bindgen_ty_32::__IFLA_VF_LINK_STATE_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_32 {
+IFLA_VF_LINK_STATE_AUTO = 0,
+IFLA_VF_LINK_STATE_ENABLE = 1,
+IFLA_VF_LINK_STATE_DISABLE = 2,
+__IFLA_VF_LINK_STATE_MAX = 3,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_link_state {
+pub vf: __u32,
+pub link_state: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_rss_query_en {
+pub vf: __u32,
+pub setting: __u32,
+}
+pub const IFLA_VF_STATS_RX_PACKETS: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_RX_PACKETS;
+pub const IFLA_VF_STATS_TX_PACKETS: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_TX_PACKETS;
+pub const IFLA_VF_STATS_RX_BYTES: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_RX_BYTES;
+pub const IFLA_VF_STATS_TX_BYTES: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_TX_BYTES;
+pub const IFLA_VF_STATS_BROADCAST: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_BROADCAST;
+pub const IFLA_VF_STATS_MULTICAST: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_MULTICAST;
+pub const IFLA_VF_STATS_PAD: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_PAD;
+pub const IFLA_VF_STATS_RX_DROPPED: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_RX_DROPPED;
+pub const IFLA_VF_STATS_TX_DROPPED: _bindgen_ty_33 = _bindgen_ty_33::IFLA_VF_STATS_TX_DROPPED;
+pub const __IFLA_VF_STATS_MAX: _bindgen_ty_33 = _bindgen_ty_33::__IFLA_VF_STATS_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_33 {
+IFLA_VF_STATS_RX_PACKETS = 0,
+IFLA_VF_STATS_TX_PACKETS = 1,
+IFLA_VF_STATS_RX_BYTES = 2,
+IFLA_VF_STATS_TX_BYTES = 3,
+IFLA_VF_STATS_BROADCAST = 4,
+IFLA_VF_STATS_MULTICAST = 5,
+IFLA_VF_STATS_PAD = 6,
+IFLA_VF_STATS_RX_DROPPED = 7,
+IFLA_VF_STATS_TX_DROPPED = 8,
+__IFLA_VF_STATS_MAX = 9,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_vf_trust {
+pub vf: __u32,
+pub setting: __u32,
+}
+pub const IFLA_VF_PORT_UNSPEC: _bindgen_ty_34 = _bindgen_ty_34::IFLA_VF_PORT_UNSPEC;
+pub const IFLA_VF_PORT: _bindgen_ty_34 = _bindgen_ty_34::IFLA_VF_PORT;
+pub const __IFLA_VF_PORT_MAX: _bindgen_ty_34 = _bindgen_ty_34::__IFLA_VF_PORT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_34 {
+IFLA_VF_PORT_UNSPEC = 0,
+IFLA_VF_PORT = 1,
+__IFLA_VF_PORT_MAX = 2,
+}
+pub const IFLA_PORT_UNSPEC: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_UNSPEC;
+pub const IFLA_PORT_VF: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_VF;
+pub const IFLA_PORT_PROFILE: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_PROFILE;
+pub const IFLA_PORT_VSI_TYPE: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_VSI_TYPE;
+pub const IFLA_PORT_INSTANCE_UUID: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_INSTANCE_UUID;
+pub const IFLA_PORT_HOST_UUID: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_HOST_UUID;
+pub const IFLA_PORT_REQUEST: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_REQUEST;
+pub const IFLA_PORT_RESPONSE: _bindgen_ty_35 = _bindgen_ty_35::IFLA_PORT_RESPONSE;
+pub const __IFLA_PORT_MAX: _bindgen_ty_35 = _bindgen_ty_35::__IFLA_PORT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_35 {
+IFLA_PORT_UNSPEC = 0,
+IFLA_PORT_VF = 1,
+IFLA_PORT_PROFILE = 2,
+IFLA_PORT_VSI_TYPE = 3,
+IFLA_PORT_INSTANCE_UUID = 4,
+IFLA_PORT_HOST_UUID = 5,
+IFLA_PORT_REQUEST = 6,
+IFLA_PORT_RESPONSE = 7,
+__IFLA_PORT_MAX = 8,
+}
+pub const PORT_REQUEST_PREASSOCIATE: _bindgen_ty_36 = _bindgen_ty_36::PORT_REQUEST_PREASSOCIATE;
+pub const PORT_REQUEST_PREASSOCIATE_RR: _bindgen_ty_36 = _bindgen_ty_36::PORT_REQUEST_PREASSOCIATE_RR;
+pub const PORT_REQUEST_ASSOCIATE: _bindgen_ty_36 = _bindgen_ty_36::PORT_REQUEST_ASSOCIATE;
+pub const PORT_REQUEST_DISASSOCIATE: _bindgen_ty_36 = _bindgen_ty_36::PORT_REQUEST_DISASSOCIATE;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_36 {
+PORT_REQUEST_PREASSOCIATE = 0,
+PORT_REQUEST_PREASSOCIATE_RR = 1,
+PORT_REQUEST_ASSOCIATE = 2,
+PORT_REQUEST_DISASSOCIATE = 3,
+}
+pub const PORT_VDP_RESPONSE_SUCCESS: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_SUCCESS;
+pub const PORT_VDP_RESPONSE_INVALID_FORMAT: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_INVALID_FORMAT;
+pub const PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES;
+pub const PORT_VDP_RESPONSE_UNUSED_VTID: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_UNUSED_VTID;
+pub const PORT_VDP_RESPONSE_VTID_VIOLATION: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_VTID_VIOLATION;
+pub const PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION;
+pub const PORT_VDP_RESPONSE_OUT_OF_SYNC: _bindgen_ty_37 = _bindgen_ty_37::PORT_VDP_RESPONSE_OUT_OF_SYNC;
+pub const PORT_PROFILE_RESPONSE_SUCCESS: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_SUCCESS;
+pub const PORT_PROFILE_RESPONSE_INPROGRESS: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_INPROGRESS;
+pub const PORT_PROFILE_RESPONSE_INVALID: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_INVALID;
+pub const PORT_PROFILE_RESPONSE_BADSTATE: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_BADSTATE;
+pub const PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES;
+pub const PORT_PROFILE_RESPONSE_ERROR: _bindgen_ty_37 = _bindgen_ty_37::PORT_PROFILE_RESPONSE_ERROR;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_37 {
+PORT_VDP_RESPONSE_SUCCESS = 0,
+PORT_VDP_RESPONSE_INVALID_FORMAT = 1,
+PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES = 2,
+PORT_VDP_RESPONSE_UNUSED_VTID = 3,
+PORT_VDP_RESPONSE_VTID_VIOLATION = 4,
+PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION = 5,
+PORT_VDP_RESPONSE_OUT_OF_SYNC = 6,
+PORT_PROFILE_RESPONSE_SUCCESS = 256,
+PORT_PROFILE_RESPONSE_INPROGRESS = 257,
+PORT_PROFILE_RESPONSE_INVALID = 258,
+PORT_PROFILE_RESPONSE_BADSTATE = 259,
+PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES = 260,
+PORT_PROFILE_RESPONSE_ERROR = 261,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_port_vsi {
+pub vsi_mgr_id: __u8,
+pub vsi_type_id: [__u8; 3usize],
+pub vsi_type_version: __u8,
+pub pad: [__u8; 3usize],
+}
+pub const IFLA_IPOIB_UNSPEC: _bindgen_ty_38 = _bindgen_ty_38::IFLA_IPOIB_UNSPEC;
+pub const IFLA_IPOIB_PKEY: _bindgen_ty_38 = _bindgen_ty_38::IFLA_IPOIB_PKEY;
+pub const IFLA_IPOIB_MODE: _bindgen_ty_38 = _bindgen_ty_38::IFLA_IPOIB_MODE;
+pub const IFLA_IPOIB_UMCAST: _bindgen_ty_38 = _bindgen_ty_38::IFLA_IPOIB_UMCAST;
+pub const __IFLA_IPOIB_MAX: _bindgen_ty_38 = _bindgen_ty_38::__IFLA_IPOIB_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_38 {
+IFLA_IPOIB_UNSPEC = 0,
+IFLA_IPOIB_PKEY = 1,
+IFLA_IPOIB_MODE = 2,
+IFLA_IPOIB_UMCAST = 3,
+__IFLA_IPOIB_MAX = 4,
+}
+pub const IPOIB_MODE_DATAGRAM: _bindgen_ty_39 = _bindgen_ty_39::IPOIB_MODE_DATAGRAM;
+pub const IPOIB_MODE_CONNECTED: _bindgen_ty_39 = _bindgen_ty_39::IPOIB_MODE_CONNECTED;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_39 {
+IPOIB_MODE_DATAGRAM = 0,
+IPOIB_MODE_CONNECTED = 1,
+}
+pub const HSR_PROTOCOL_HSR: _bindgen_ty_40 = _bindgen_ty_40::HSR_PROTOCOL_HSR;
+pub const HSR_PROTOCOL_PRP: _bindgen_ty_40 = _bindgen_ty_40::HSR_PROTOCOL_PRP;
+pub const HSR_PROTOCOL_MAX: _bindgen_ty_40 = _bindgen_ty_40::HSR_PROTOCOL_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_40 {
+HSR_PROTOCOL_HSR = 0,
+HSR_PROTOCOL_PRP = 1,
+HSR_PROTOCOL_MAX = 2,
+}
+pub const IFLA_HSR_UNSPEC: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_UNSPEC;
+pub const IFLA_HSR_SLAVE1: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_SLAVE1;
+pub const IFLA_HSR_SLAVE2: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_SLAVE2;
+pub const IFLA_HSR_MULTICAST_SPEC: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_MULTICAST_SPEC;
+pub const IFLA_HSR_SUPERVISION_ADDR: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_SUPERVISION_ADDR;
+pub const IFLA_HSR_SEQ_NR: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_SEQ_NR;
+pub const IFLA_HSR_VERSION: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_VERSION;
+pub const IFLA_HSR_PROTOCOL: _bindgen_ty_41 = _bindgen_ty_41::IFLA_HSR_PROTOCOL;
+pub const __IFLA_HSR_MAX: _bindgen_ty_41 = _bindgen_ty_41::__IFLA_HSR_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_41 {
+IFLA_HSR_UNSPEC = 0,
+IFLA_HSR_SLAVE1 = 1,
+IFLA_HSR_SLAVE2 = 2,
+IFLA_HSR_MULTICAST_SPEC = 3,
+IFLA_HSR_SUPERVISION_ADDR = 4,
+IFLA_HSR_SEQ_NR = 5,
+IFLA_HSR_VERSION = 6,
+IFLA_HSR_PROTOCOL = 7,
+__IFLA_HSR_MAX = 8,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct if_stats_msg {
+pub family: __u8,
+pub pad1: __u8,
+pub pad2: __u16,
+pub ifindex: __u32,
+pub filter_mask: __u32,
+}
+pub const IFLA_STATS_UNSPEC: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_UNSPEC;
+pub const IFLA_STATS_LINK_64: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_LINK_64;
+pub const IFLA_STATS_LINK_XSTATS: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_LINK_XSTATS;
+pub const IFLA_STATS_LINK_XSTATS_SLAVE: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_LINK_XSTATS_SLAVE;
+pub const IFLA_STATS_LINK_OFFLOAD_XSTATS: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_LINK_OFFLOAD_XSTATS;
+pub const IFLA_STATS_AF_SPEC: _bindgen_ty_42 = _bindgen_ty_42::IFLA_STATS_AF_SPEC;
+pub const __IFLA_STATS_MAX: _bindgen_ty_42 = _bindgen_ty_42::__IFLA_STATS_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_42 {
+IFLA_STATS_UNSPEC = 0,
+IFLA_STATS_LINK_64 = 1,
+IFLA_STATS_LINK_XSTATS = 2,
+IFLA_STATS_LINK_XSTATS_SLAVE = 3,
+IFLA_STATS_LINK_OFFLOAD_XSTATS = 4,
+IFLA_STATS_AF_SPEC = 5,
+__IFLA_STATS_MAX = 6,
+}
+pub const IFLA_STATS_GETSET_UNSPEC: _bindgen_ty_43 = _bindgen_ty_43::IFLA_STATS_GETSET_UNSPEC;
+pub const IFLA_STATS_GET_FILTERS: _bindgen_ty_43 = _bindgen_ty_43::IFLA_STATS_GET_FILTERS;
+pub const IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS: _bindgen_ty_43 = _bindgen_ty_43::IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS;
+pub const __IFLA_STATS_GETSET_MAX: _bindgen_ty_43 = _bindgen_ty_43::__IFLA_STATS_GETSET_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_43 {
+IFLA_STATS_GETSET_UNSPEC = 0,
+IFLA_STATS_GET_FILTERS = 1,
+IFLA_STATS_SET_OFFLOAD_XSTATS_L3_STATS = 2,
+__IFLA_STATS_GETSET_MAX = 3,
+}
+pub const LINK_XSTATS_TYPE_UNSPEC: _bindgen_ty_44 = _bindgen_ty_44::LINK_XSTATS_TYPE_UNSPEC;
+pub const LINK_XSTATS_TYPE_BRIDGE: _bindgen_ty_44 = _bindgen_ty_44::LINK_XSTATS_TYPE_BRIDGE;
+pub const LINK_XSTATS_TYPE_BOND: _bindgen_ty_44 = _bindgen_ty_44::LINK_XSTATS_TYPE_BOND;
+pub const __LINK_XSTATS_TYPE_MAX: _bindgen_ty_44 = _bindgen_ty_44::__LINK_XSTATS_TYPE_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_44 {
+LINK_XSTATS_TYPE_UNSPEC = 0,
+LINK_XSTATS_TYPE_BRIDGE = 1,
+LINK_XSTATS_TYPE_BOND = 2,
+__LINK_XSTATS_TYPE_MAX = 3,
+}
+pub const IFLA_OFFLOAD_XSTATS_UNSPEC: _bindgen_ty_45 = _bindgen_ty_45::IFLA_OFFLOAD_XSTATS_UNSPEC;
+pub const IFLA_OFFLOAD_XSTATS_CPU_HIT: _bindgen_ty_45 = _bindgen_ty_45::IFLA_OFFLOAD_XSTATS_CPU_HIT;
+pub const IFLA_OFFLOAD_XSTATS_HW_S_INFO: _bindgen_ty_45 = _bindgen_ty_45::IFLA_OFFLOAD_XSTATS_HW_S_INFO;
+pub const IFLA_OFFLOAD_XSTATS_L3_STATS: _bindgen_ty_45 = _bindgen_ty_45::IFLA_OFFLOAD_XSTATS_L3_STATS;
+pub const __IFLA_OFFLOAD_XSTATS_MAX: _bindgen_ty_45 = _bindgen_ty_45::__IFLA_OFFLOAD_XSTATS_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_45 {
+IFLA_OFFLOAD_XSTATS_UNSPEC = 0,
+IFLA_OFFLOAD_XSTATS_CPU_HIT = 1,
+IFLA_OFFLOAD_XSTATS_HW_S_INFO = 2,
+IFLA_OFFLOAD_XSTATS_L3_STATS = 3,
+__IFLA_OFFLOAD_XSTATS_MAX = 4,
+}
+pub const IFLA_OFFLOAD_XSTATS_HW_S_INFO_UNSPEC: _bindgen_ty_46 = _bindgen_ty_46::IFLA_OFFLOAD_XSTATS_HW_S_INFO_UNSPEC;
+pub const IFLA_OFFLOAD_XSTATS_HW_S_INFO_REQUEST: _bindgen_ty_46 = _bindgen_ty_46::IFLA_OFFLOAD_XSTATS_HW_S_INFO_REQUEST;
+pub const IFLA_OFFLOAD_XSTATS_HW_S_INFO_USED: _bindgen_ty_46 = _bindgen_ty_46::IFLA_OFFLOAD_XSTATS_HW_S_INFO_USED;
+pub const __IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX: _bindgen_ty_46 = _bindgen_ty_46::__IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_46 {
+IFLA_OFFLOAD_XSTATS_HW_S_INFO_UNSPEC = 0,
+IFLA_OFFLOAD_XSTATS_HW_S_INFO_REQUEST = 1,
+IFLA_OFFLOAD_XSTATS_HW_S_INFO_USED = 2,
+__IFLA_OFFLOAD_XSTATS_HW_S_INFO_MAX = 3,
+}
+pub const XDP_ATTACHED_NONE: _bindgen_ty_47 = _bindgen_ty_47::XDP_ATTACHED_NONE;
+pub const XDP_ATTACHED_DRV: _bindgen_ty_47 = _bindgen_ty_47::XDP_ATTACHED_DRV;
+pub const XDP_ATTACHED_SKB: _bindgen_ty_47 = _bindgen_ty_47::XDP_ATTACHED_SKB;
+pub const XDP_ATTACHED_HW: _bindgen_ty_47 = _bindgen_ty_47::XDP_ATTACHED_HW;
+pub const XDP_ATTACHED_MULTI: _bindgen_ty_47 = _bindgen_ty_47::XDP_ATTACHED_MULTI;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_47 {
+XDP_ATTACHED_NONE = 0,
+XDP_ATTACHED_DRV = 1,
+XDP_ATTACHED_SKB = 2,
+XDP_ATTACHED_HW = 3,
+XDP_ATTACHED_MULTI = 4,
+}
+pub const IFLA_XDP_UNSPEC: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_UNSPEC;
+pub const IFLA_XDP_FD: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_FD;
+pub const IFLA_XDP_ATTACHED: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_ATTACHED;
+pub const IFLA_XDP_FLAGS: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_FLAGS;
+pub const IFLA_XDP_PROG_ID: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_PROG_ID;
+pub const IFLA_XDP_DRV_PROG_ID: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_DRV_PROG_ID;
+pub const IFLA_XDP_SKB_PROG_ID: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_SKB_PROG_ID;
+pub const IFLA_XDP_HW_PROG_ID: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_HW_PROG_ID;
+pub const IFLA_XDP_EXPECTED_FD: _bindgen_ty_48 = _bindgen_ty_48::IFLA_XDP_EXPECTED_FD;
+pub const __IFLA_XDP_MAX: _bindgen_ty_48 = _bindgen_ty_48::__IFLA_XDP_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_48 {
+IFLA_XDP_UNSPEC = 0,
+IFLA_XDP_FD = 1,
+IFLA_XDP_ATTACHED = 2,
+IFLA_XDP_FLAGS = 3,
+IFLA_XDP_PROG_ID = 4,
+IFLA_XDP_DRV_PROG_ID = 5,
+IFLA_XDP_SKB_PROG_ID = 6,
+IFLA_XDP_HW_PROG_ID = 7,
+IFLA_XDP_EXPECTED_FD = 8,
+__IFLA_XDP_MAX = 9,
+}
+pub const IFLA_EVENT_NONE: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_NONE;
+pub const IFLA_EVENT_REBOOT: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_REBOOT;
+pub const IFLA_EVENT_FEATURES: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_FEATURES;
+pub const IFLA_EVENT_BONDING_FAILOVER: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_BONDING_FAILOVER;
+pub const IFLA_EVENT_NOTIFY_PEERS: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_NOTIFY_PEERS;
+pub const IFLA_EVENT_IGMP_RESEND: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_IGMP_RESEND;
+pub const IFLA_EVENT_BONDING_OPTIONS: _bindgen_ty_49 = _bindgen_ty_49::IFLA_EVENT_BONDING_OPTIONS;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_49 {
+IFLA_EVENT_NONE = 0,
+IFLA_EVENT_REBOOT = 1,
+IFLA_EVENT_FEATURES = 2,
+IFLA_EVENT_BONDING_FAILOVER = 3,
+IFLA_EVENT_NOTIFY_PEERS = 4,
+IFLA_EVENT_IGMP_RESEND = 5,
+IFLA_EVENT_BONDING_OPTIONS = 6,
+}
+pub const IFLA_TUN_UNSPEC: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_UNSPEC;
+pub const IFLA_TUN_OWNER: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_OWNER;
+pub const IFLA_TUN_GROUP: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_GROUP;
+pub const IFLA_TUN_TYPE: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_TYPE;
+pub const IFLA_TUN_PI: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_PI;
+pub const IFLA_TUN_VNET_HDR: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_VNET_HDR;
+pub const IFLA_TUN_PERSIST: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_PERSIST;
+pub const IFLA_TUN_MULTI_QUEUE: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_MULTI_QUEUE;
+pub const IFLA_TUN_NUM_QUEUES: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_NUM_QUEUES;
+pub const IFLA_TUN_NUM_DISABLED_QUEUES: _bindgen_ty_50 = _bindgen_ty_50::IFLA_TUN_NUM_DISABLED_QUEUES;
+pub const __IFLA_TUN_MAX: _bindgen_ty_50 = _bindgen_ty_50::__IFLA_TUN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_50 {
+IFLA_TUN_UNSPEC = 0,
+IFLA_TUN_OWNER = 1,
+IFLA_TUN_GROUP = 2,
+IFLA_TUN_TYPE = 3,
+IFLA_TUN_PI = 4,
+IFLA_TUN_VNET_HDR = 5,
+IFLA_TUN_PERSIST = 6,
+IFLA_TUN_MULTI_QUEUE = 7,
+IFLA_TUN_NUM_QUEUES = 8,
+IFLA_TUN_NUM_DISABLED_QUEUES = 9,
+__IFLA_TUN_MAX = 10,
+}
+pub const IFLA_RMNET_UNSPEC: _bindgen_ty_51 = _bindgen_ty_51::IFLA_RMNET_UNSPEC;
+pub const IFLA_RMNET_MUX_ID: _bindgen_ty_51 = _bindgen_ty_51::IFLA_RMNET_MUX_ID;
+pub const IFLA_RMNET_FLAGS: _bindgen_ty_51 = _bindgen_ty_51::IFLA_RMNET_FLAGS;
+pub const __IFLA_RMNET_MAX: _bindgen_ty_51 = _bindgen_ty_51::__IFLA_RMNET_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_51 {
+IFLA_RMNET_UNSPEC = 0,
+IFLA_RMNET_MUX_ID = 1,
+IFLA_RMNET_FLAGS = 2,
+__IFLA_RMNET_MAX = 3,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifla_rmnet_flags {
+pub flags: __u32,
+pub mask: __u32,
+}
+pub const IFLA_MCTP_UNSPEC: _bindgen_ty_52 = _bindgen_ty_52::IFLA_MCTP_UNSPEC;
+pub const IFLA_MCTP_NET: _bindgen_ty_52 = _bindgen_ty_52::IFLA_MCTP_NET;
+pub const __IFLA_MCTP_MAX: _bindgen_ty_52 = _bindgen_ty_52::__IFLA_MCTP_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_52 {
+IFLA_MCTP_UNSPEC = 0,
+IFLA_MCTP_NET = 1,
+__IFLA_MCTP_MAX = 2,
+}
+pub const IFLA_DSA_UNSPEC: _bindgen_ty_53 = _bindgen_ty_53::IFLA_DSA_UNSPEC;
+pub const IFLA_DSA_MASTER: _bindgen_ty_53 = _bindgen_ty_53::IFLA_DSA_MASTER;
+pub const __IFLA_DSA_MAX: _bindgen_ty_53 = _bindgen_ty_53::__IFLA_DSA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_53 {
+IFLA_DSA_UNSPEC = 0,
+IFLA_DSA_MASTER = 1,
+__IFLA_DSA_MAX = 2,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifaddrmsg {
+pub ifa_family: __u8,
+pub ifa_prefixlen: __u8,
+pub ifa_flags: __u8,
+pub ifa_scope: __u8,
+pub ifa_index: __u32,
+}
+pub const IFA_UNSPEC: _bindgen_ty_54 = _bindgen_ty_54::IFA_UNSPEC;
+pub const IFA_ADDRESS: _bindgen_ty_54 = _bindgen_ty_54::IFA_ADDRESS;
+pub const IFA_LOCAL: _bindgen_ty_54 = _bindgen_ty_54::IFA_LOCAL;
+pub const IFA_LABEL: _bindgen_ty_54 = _bindgen_ty_54::IFA_LABEL;
+pub const IFA_BROADCAST: _bindgen_ty_54 = _bindgen_ty_54::IFA_BROADCAST;
+pub const IFA_ANYCAST: _bindgen_ty_54 = _bindgen_ty_54::IFA_ANYCAST;
+pub const IFA_CACHEINFO: _bindgen_ty_54 = _bindgen_ty_54::IFA_CACHEINFO;
+pub const IFA_MULTICAST: _bindgen_ty_54 = _bindgen_ty_54::IFA_MULTICAST;
+pub const IFA_FLAGS: _bindgen_ty_54 = _bindgen_ty_54::IFA_FLAGS;
+pub const IFA_RT_PRIORITY: _bindgen_ty_54 = _bindgen_ty_54::IFA_RT_PRIORITY;
+pub const IFA_TARGET_NETNSID: _bindgen_ty_54 = _bindgen_ty_54::IFA_TARGET_NETNSID;
+pub const IFA_PROTO: _bindgen_ty_54 = _bindgen_ty_54::IFA_PROTO;
+pub const __IFA_MAX: _bindgen_ty_54 = _bindgen_ty_54::__IFA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_54 {
+IFA_UNSPEC = 0,
+IFA_ADDRESS = 1,
+IFA_LOCAL = 2,
+IFA_LABEL = 3,
+IFA_BROADCAST = 4,
+IFA_ANYCAST = 5,
+IFA_CACHEINFO = 6,
+IFA_MULTICAST = 7,
+IFA_FLAGS = 8,
+IFA_RT_PRIORITY = 9,
+IFA_TARGET_NETNSID = 10,
+IFA_PROTO = 11,
+__IFA_MAX = 12,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifa_cacheinfo {
+pub ifa_prefered: __u32,
+pub ifa_valid: __u32,
+pub cstamp: __u32,
+pub tstamp: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ndmsg {
+pub ndm_family: __u8,
+pub ndm_pad1: __u8,
+pub ndm_pad2: __u16,
+pub ndm_ifindex: __s32,
+pub ndm_state: __u16,
+pub ndm_flags: __u8,
+pub ndm_type: __u8,
+}
+pub const NDA_UNSPEC: _bindgen_ty_55 = _bindgen_ty_55::NDA_UNSPEC;
+pub const NDA_DST: _bindgen_ty_55 = _bindgen_ty_55::NDA_DST;
+pub const NDA_LLADDR: _bindgen_ty_55 = _bindgen_ty_55::NDA_LLADDR;
+pub const NDA_CACHEINFO: _bindgen_ty_55 = _bindgen_ty_55::NDA_CACHEINFO;
+pub const NDA_PROBES: _bindgen_ty_55 = _bindgen_ty_55::NDA_PROBES;
+pub const NDA_VLAN: _bindgen_ty_55 = _bindgen_ty_55::NDA_VLAN;
+pub const NDA_PORT: _bindgen_ty_55 = _bindgen_ty_55::NDA_PORT;
+pub const NDA_VNI: _bindgen_ty_55 = _bindgen_ty_55::NDA_VNI;
+pub const NDA_IFINDEX: _bindgen_ty_55 = _bindgen_ty_55::NDA_IFINDEX;
+pub const NDA_MASTER: _bindgen_ty_55 = _bindgen_ty_55::NDA_MASTER;
+pub const NDA_LINK_NETNSID: _bindgen_ty_55 = _bindgen_ty_55::NDA_LINK_NETNSID;
+pub const NDA_SRC_VNI: _bindgen_ty_55 = _bindgen_ty_55::NDA_SRC_VNI;
+pub const NDA_PROTOCOL: _bindgen_ty_55 = _bindgen_ty_55::NDA_PROTOCOL;
+pub const NDA_NH_ID: _bindgen_ty_55 = _bindgen_ty_55::NDA_NH_ID;
+pub const NDA_FDB_EXT_ATTRS: _bindgen_ty_55 = _bindgen_ty_55::NDA_FDB_EXT_ATTRS;
+pub const NDA_FLAGS_EXT: _bindgen_ty_55 = _bindgen_ty_55::NDA_FLAGS_EXT;
+pub const NDA_NDM_STATE_MASK: _bindgen_ty_55 = _bindgen_ty_55::NDA_NDM_STATE_MASK;
+pub const NDA_NDM_FLAGS_MASK: _bindgen_ty_55 = _bindgen_ty_55::NDA_NDM_FLAGS_MASK;
+pub const __NDA_MAX: _bindgen_ty_55 = _bindgen_ty_55::__NDA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_55 {
+NDA_UNSPEC = 0,
+NDA_DST = 1,
+NDA_LLADDR = 2,
+NDA_CACHEINFO = 3,
+NDA_PROBES = 4,
+NDA_VLAN = 5,
+NDA_PORT = 6,
+NDA_VNI = 7,
+NDA_IFINDEX = 8,
+NDA_MASTER = 9,
+NDA_LINK_NETNSID = 10,
+NDA_SRC_VNI = 11,
+NDA_PROTOCOL = 12,
+NDA_NH_ID = 13,
+NDA_FDB_EXT_ATTRS = 14,
+NDA_FLAGS_EXT = 15,
+NDA_NDM_STATE_MASK = 16,
+NDA_NDM_FLAGS_MASK = 17,
+__NDA_MAX = 18,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nda_cacheinfo {
+pub ndm_confirmed: __u32,
+pub ndm_used: __u32,
+pub ndm_updated: __u32,
+pub ndm_refcnt: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ndt_stats {
+pub ndts_allocs: __u64,
+pub ndts_destroys: __u64,
+pub ndts_hash_grows: __u64,
+pub ndts_res_failed: __u64,
+pub ndts_lookups: __u64,
+pub ndts_hits: __u64,
+pub ndts_rcv_probes_mcast: __u64,
+pub ndts_rcv_probes_ucast: __u64,
+pub ndts_periodic_gc_runs: __u64,
+pub ndts_forced_gc_runs: __u64,
+pub ndts_table_fulls: __u64,
+}
+pub const NDTPA_UNSPEC: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_UNSPEC;
+pub const NDTPA_IFINDEX: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_IFINDEX;
+pub const NDTPA_REFCNT: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_REFCNT;
+pub const NDTPA_REACHABLE_TIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_REACHABLE_TIME;
+pub const NDTPA_BASE_REACHABLE_TIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_BASE_REACHABLE_TIME;
+pub const NDTPA_RETRANS_TIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_RETRANS_TIME;
+pub const NDTPA_GC_STALETIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_GC_STALETIME;
+pub const NDTPA_DELAY_PROBE_TIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_DELAY_PROBE_TIME;
+pub const NDTPA_QUEUE_LEN: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_QUEUE_LEN;
+pub const NDTPA_APP_PROBES: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_APP_PROBES;
+pub const NDTPA_UCAST_PROBES: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_UCAST_PROBES;
+pub const NDTPA_MCAST_PROBES: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_MCAST_PROBES;
+pub const NDTPA_ANYCAST_DELAY: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_ANYCAST_DELAY;
+pub const NDTPA_PROXY_DELAY: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_PROXY_DELAY;
+pub const NDTPA_PROXY_QLEN: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_PROXY_QLEN;
+pub const NDTPA_LOCKTIME: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_LOCKTIME;
+pub const NDTPA_QUEUE_LENBYTES: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_QUEUE_LENBYTES;
+pub const NDTPA_MCAST_REPROBES: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_MCAST_REPROBES;
+pub const NDTPA_PAD: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_PAD;
+pub const NDTPA_INTERVAL_PROBE_TIME_MS: _bindgen_ty_56 = _bindgen_ty_56::NDTPA_INTERVAL_PROBE_TIME_MS;
+pub const __NDTPA_MAX: _bindgen_ty_56 = _bindgen_ty_56::__NDTPA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_56 {
+NDTPA_UNSPEC = 0,
+NDTPA_IFINDEX = 1,
+NDTPA_REFCNT = 2,
+NDTPA_REACHABLE_TIME = 3,
+NDTPA_BASE_REACHABLE_TIME = 4,
+NDTPA_RETRANS_TIME = 5,
+NDTPA_GC_STALETIME = 6,
+NDTPA_DELAY_PROBE_TIME = 7,
+NDTPA_QUEUE_LEN = 8,
+NDTPA_APP_PROBES = 9,
+NDTPA_UCAST_PROBES = 10,
+NDTPA_MCAST_PROBES = 11,
+NDTPA_ANYCAST_DELAY = 12,
+NDTPA_PROXY_DELAY = 13,
+NDTPA_PROXY_QLEN = 14,
+NDTPA_LOCKTIME = 15,
+NDTPA_QUEUE_LENBYTES = 16,
+NDTPA_MCAST_REPROBES = 17,
+NDTPA_PAD = 18,
+NDTPA_INTERVAL_PROBE_TIME_MS = 19,
+__NDTPA_MAX = 20,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ndtmsg {
+pub ndtm_family: __u8,
+pub ndtm_pad1: __u8,
+pub ndtm_pad2: __u16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ndt_config {
+pub ndtc_key_len: __u16,
+pub ndtc_entry_size: __u16,
+pub ndtc_entries: __u32,
+pub ndtc_last_flush: __u32,
+pub ndtc_last_rand: __u32,
+pub ndtc_hash_rnd: __u32,
+pub ndtc_hash_mask: __u32,
+pub ndtc_hash_chain_gc: __u32,
+pub ndtc_proxy_qlen: __u32,
+}
+pub const NDTA_UNSPEC: _bindgen_ty_57 = _bindgen_ty_57::NDTA_UNSPEC;
+pub const NDTA_NAME: _bindgen_ty_57 = _bindgen_ty_57::NDTA_NAME;
+pub const NDTA_THRESH1: _bindgen_ty_57 = _bindgen_ty_57::NDTA_THRESH1;
+pub const NDTA_THRESH2: _bindgen_ty_57 = _bindgen_ty_57::NDTA_THRESH2;
+pub const NDTA_THRESH3: _bindgen_ty_57 = _bindgen_ty_57::NDTA_THRESH3;
+pub const NDTA_CONFIG: _bindgen_ty_57 = _bindgen_ty_57::NDTA_CONFIG;
+pub const NDTA_PARMS: _bindgen_ty_57 = _bindgen_ty_57::NDTA_PARMS;
+pub const NDTA_STATS: _bindgen_ty_57 = _bindgen_ty_57::NDTA_STATS;
+pub const NDTA_GC_INTERVAL: _bindgen_ty_57 = _bindgen_ty_57::NDTA_GC_INTERVAL;
+pub const NDTA_PAD: _bindgen_ty_57 = _bindgen_ty_57::NDTA_PAD;
+pub const __NDTA_MAX: _bindgen_ty_57 = _bindgen_ty_57::__NDTA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_57 {
+NDTA_UNSPEC = 0,
+NDTA_NAME = 1,
+NDTA_THRESH1 = 2,
+NDTA_THRESH2 = 3,
+NDTA_THRESH3 = 4,
+NDTA_CONFIG = 5,
+NDTA_PARMS = 6,
+NDTA_STATS = 7,
+NDTA_GC_INTERVAL = 8,
+NDTA_PAD = 9,
+__NDTA_MAX = 10,
+}
+pub const FDB_NOTIFY_BIT: _bindgen_ty_58 = _bindgen_ty_58::FDB_NOTIFY_BIT;
+pub const FDB_NOTIFY_INACTIVE_BIT: _bindgen_ty_58 = _bindgen_ty_58::FDB_NOTIFY_INACTIVE_BIT;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_58 {
+FDB_NOTIFY_BIT = 1,
+FDB_NOTIFY_INACTIVE_BIT = 2,
+}
+pub const NFEA_UNSPEC: _bindgen_ty_59 = _bindgen_ty_59::NFEA_UNSPEC;
+pub const NFEA_ACTIVITY_NOTIFY: _bindgen_ty_59 = _bindgen_ty_59::NFEA_ACTIVITY_NOTIFY;
+pub const NFEA_DONT_REFRESH: _bindgen_ty_59 = _bindgen_ty_59::NFEA_DONT_REFRESH;
+pub const __NFEA_MAX: _bindgen_ty_59 = _bindgen_ty_59::__NFEA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_59 {
+NFEA_UNSPEC = 0,
+NFEA_ACTIVITY_NOTIFY = 1,
+NFEA_DONT_REFRESH = 2,
+__NFEA_MAX = 3,
+}
+pub const RTM_BASE: _bindgen_ty_60 = _bindgen_ty_60::RTM_BASE;
+pub const RTM_NEWLINK: _bindgen_ty_60 = _bindgen_ty_60::RTM_BASE;
+pub const RTM_DELLINK: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELLINK;
+pub const RTM_GETLINK: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETLINK;
+pub const RTM_SETLINK: _bindgen_ty_60 = _bindgen_ty_60::RTM_SETLINK;
+pub const RTM_NEWADDR: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWADDR;
+pub const RTM_DELADDR: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELADDR;
+pub const RTM_GETADDR: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETADDR;
+pub const RTM_NEWROUTE: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWROUTE;
+pub const RTM_DELROUTE: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELROUTE;
+pub const RTM_GETROUTE: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETROUTE;
+pub const RTM_NEWNEIGH: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNEIGH;
+pub const RTM_DELNEIGH: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELNEIGH;
+pub const RTM_GETNEIGH: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNEIGH;
+pub const RTM_NEWRULE: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWRULE;
+pub const RTM_DELRULE: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELRULE;
+pub const RTM_GETRULE: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETRULE;
+pub const RTM_NEWQDISC: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWQDISC;
+pub const RTM_DELQDISC: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELQDISC;
+pub const RTM_GETQDISC: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETQDISC;
+pub const RTM_NEWTCLASS: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWTCLASS;
+pub const RTM_DELTCLASS: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELTCLASS;
+pub const RTM_GETTCLASS: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETTCLASS;
+pub const RTM_NEWTFILTER: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWTFILTER;
+pub const RTM_DELTFILTER: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELTFILTER;
+pub const RTM_GETTFILTER: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETTFILTER;
+pub const RTM_NEWACTION: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWACTION;
+pub const RTM_DELACTION: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELACTION;
+pub const RTM_GETACTION: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETACTION;
+pub const RTM_NEWPREFIX: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWPREFIX;
+pub const RTM_GETMULTICAST: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETMULTICAST;
+pub const RTM_GETANYCAST: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETANYCAST;
+pub const RTM_NEWNEIGHTBL: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNEIGHTBL;
+pub const RTM_GETNEIGHTBL: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNEIGHTBL;
+pub const RTM_SETNEIGHTBL: _bindgen_ty_60 = _bindgen_ty_60::RTM_SETNEIGHTBL;
+pub const RTM_NEWNDUSEROPT: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNDUSEROPT;
+pub const RTM_NEWADDRLABEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWADDRLABEL;
+pub const RTM_DELADDRLABEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELADDRLABEL;
+pub const RTM_GETADDRLABEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETADDRLABEL;
+pub const RTM_GETDCB: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETDCB;
+pub const RTM_SETDCB: _bindgen_ty_60 = _bindgen_ty_60::RTM_SETDCB;
+pub const RTM_NEWNETCONF: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNETCONF;
+pub const RTM_DELNETCONF: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELNETCONF;
+pub const RTM_GETNETCONF: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNETCONF;
+pub const RTM_NEWMDB: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWMDB;
+pub const RTM_DELMDB: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELMDB;
+pub const RTM_GETMDB: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETMDB;
+pub const RTM_NEWNSID: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNSID;
+pub const RTM_DELNSID: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELNSID;
+pub const RTM_GETNSID: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNSID;
+pub const RTM_NEWSTATS: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWSTATS;
+pub const RTM_GETSTATS: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETSTATS;
+pub const RTM_SETSTATS: _bindgen_ty_60 = _bindgen_ty_60::RTM_SETSTATS;
+pub const RTM_NEWCACHEREPORT: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWCACHEREPORT;
+pub const RTM_NEWCHAIN: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWCHAIN;
+pub const RTM_DELCHAIN: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELCHAIN;
+pub const RTM_GETCHAIN: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETCHAIN;
+pub const RTM_NEWNEXTHOP: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNEXTHOP;
+pub const RTM_DELNEXTHOP: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELNEXTHOP;
+pub const RTM_GETNEXTHOP: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNEXTHOP;
+pub const RTM_NEWLINKPROP: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWLINKPROP;
+pub const RTM_DELLINKPROP: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELLINKPROP;
+pub const RTM_GETLINKPROP: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETLINKPROP;
+pub const RTM_NEWVLAN: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWVLAN;
+pub const RTM_DELVLAN: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELVLAN;
+pub const RTM_GETVLAN: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETVLAN;
+pub const RTM_NEWNEXTHOPBUCKET: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWNEXTHOPBUCKET;
+pub const RTM_DELNEXTHOPBUCKET: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELNEXTHOPBUCKET;
+pub const RTM_GETNEXTHOPBUCKET: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETNEXTHOPBUCKET;
+pub const RTM_NEWTUNNEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_NEWTUNNEL;
+pub const RTM_DELTUNNEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_DELTUNNEL;
+pub const RTM_GETTUNNEL: _bindgen_ty_60 = _bindgen_ty_60::RTM_GETTUNNEL;
+pub const __RTM_MAX: _bindgen_ty_60 = _bindgen_ty_60::__RTM_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_60 {
+RTM_BASE = 16,
+RTM_DELLINK = 17,
+RTM_GETLINK = 18,
+RTM_SETLINK = 19,
+RTM_NEWADDR = 20,
+RTM_DELADDR = 21,
+RTM_GETADDR = 22,
+RTM_NEWROUTE = 24,
+RTM_DELROUTE = 25,
+RTM_GETROUTE = 26,
+RTM_NEWNEIGH = 28,
+RTM_DELNEIGH = 29,
+RTM_GETNEIGH = 30,
+RTM_NEWRULE = 32,
+RTM_DELRULE = 33,
+RTM_GETRULE = 34,
+RTM_NEWQDISC = 36,
+RTM_DELQDISC = 37,
+RTM_GETQDISC = 38,
+RTM_NEWTCLASS = 40,
+RTM_DELTCLASS = 41,
+RTM_GETTCLASS = 42,
+RTM_NEWTFILTER = 44,
+RTM_DELTFILTER = 45,
+RTM_GETTFILTER = 46,
+RTM_NEWACTION = 48,
+RTM_DELACTION = 49,
+RTM_GETACTION = 50,
+RTM_NEWPREFIX = 52,
+RTM_GETMULTICAST = 58,
+RTM_GETANYCAST = 62,
+RTM_NEWNEIGHTBL = 64,
+RTM_GETNEIGHTBL = 66,
+RTM_SETNEIGHTBL = 67,
+RTM_NEWNDUSEROPT = 68,
+RTM_NEWADDRLABEL = 72,
+RTM_DELADDRLABEL = 73,
+RTM_GETADDRLABEL = 74,
+RTM_GETDCB = 78,
+RTM_SETDCB = 79,
+RTM_NEWNETCONF = 80,
+RTM_DELNETCONF = 81,
+RTM_GETNETCONF = 82,
+RTM_NEWMDB = 84,
+RTM_DELMDB = 85,
+RTM_GETMDB = 86,
+RTM_NEWNSID = 88,
+RTM_DELNSID = 89,
+RTM_GETNSID = 90,
+RTM_NEWSTATS = 92,
+RTM_GETSTATS = 94,
+RTM_SETSTATS = 95,
+RTM_NEWCACHEREPORT = 96,
+RTM_NEWCHAIN = 100,
+RTM_DELCHAIN = 101,
+RTM_GETCHAIN = 102,
+RTM_NEWNEXTHOP = 104,
+RTM_DELNEXTHOP = 105,
+RTM_GETNEXTHOP = 106,
+RTM_NEWLINKPROP = 108,
+RTM_DELLINKPROP = 109,
+RTM_GETLINKPROP = 110,
+RTM_NEWVLAN = 112,
+RTM_DELVLAN = 113,
+RTM_GETVLAN = 114,
+RTM_NEWNEXTHOPBUCKET = 116,
+RTM_DELNEXTHOPBUCKET = 117,
+RTM_GETNEXTHOPBUCKET = 118,
+RTM_NEWTUNNEL = 120,
+RTM_DELTUNNEL = 121,
+RTM_GETTUNNEL = 122,
+__RTM_MAX = 123,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtattr {
+pub rta_len: crate::ctypes::c_ushort,
+pub rta_type: crate::ctypes::c_ushort,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtmsg {
+pub rtm_family: crate::ctypes::c_uchar,
+pub rtm_dst_len: crate::ctypes::c_uchar,
+pub rtm_src_len: crate::ctypes::c_uchar,
+pub rtm_tos: crate::ctypes::c_uchar,
+pub rtm_table: crate::ctypes::c_uchar,
+pub rtm_protocol: crate::ctypes::c_uchar,
+pub rtm_scope: crate::ctypes::c_uchar,
+pub rtm_type: crate::ctypes::c_uchar,
+pub rtm_flags: crate::ctypes::c_uint,
+}
+pub const RTN_UNSPEC: _bindgen_ty_61 = _bindgen_ty_61::RTN_UNSPEC;
+pub const RTN_UNICAST: _bindgen_ty_61 = _bindgen_ty_61::RTN_UNICAST;
+pub const RTN_LOCAL: _bindgen_ty_61 = _bindgen_ty_61::RTN_LOCAL;
+pub const RTN_BROADCAST: _bindgen_ty_61 = _bindgen_ty_61::RTN_BROADCAST;
+pub const RTN_ANYCAST: _bindgen_ty_61 = _bindgen_ty_61::RTN_ANYCAST;
+pub const RTN_MULTICAST: _bindgen_ty_61 = _bindgen_ty_61::RTN_MULTICAST;
+pub const RTN_BLACKHOLE: _bindgen_ty_61 = _bindgen_ty_61::RTN_BLACKHOLE;
+pub const RTN_UNREACHABLE: _bindgen_ty_61 = _bindgen_ty_61::RTN_UNREACHABLE;
+pub const RTN_PROHIBIT: _bindgen_ty_61 = _bindgen_ty_61::RTN_PROHIBIT;
+pub const RTN_THROW: _bindgen_ty_61 = _bindgen_ty_61::RTN_THROW;
+pub const RTN_NAT: _bindgen_ty_61 = _bindgen_ty_61::RTN_NAT;
+pub const RTN_XRESOLVE: _bindgen_ty_61 = _bindgen_ty_61::RTN_XRESOLVE;
+pub const __RTN_MAX: _bindgen_ty_61 = _bindgen_ty_61::__RTN_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_61 {
+RTN_UNSPEC = 0,
+RTN_UNICAST = 1,
+RTN_LOCAL = 2,
+RTN_BROADCAST = 3,
+RTN_ANYCAST = 4,
+RTN_MULTICAST = 5,
+RTN_BLACKHOLE = 6,
+RTN_UNREACHABLE = 7,
+RTN_PROHIBIT = 8,
+RTN_THROW = 9,
+RTN_NAT = 10,
+RTN_XRESOLVE = 11,
+__RTN_MAX = 12,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum rt_scope_t {
+RT_SCOPE_UNIVERSE = 0,
+RT_SCOPE_SITE = 200,
+RT_SCOPE_LINK = 253,
+RT_SCOPE_HOST = 254,
+RT_SCOPE_NOWHERE = 255,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum rt_class_t {
+RT_TABLE_UNSPEC = 0,
+RT_TABLE_COMPAT = 252,
+RT_TABLE_DEFAULT = 253,
+RT_TABLE_MAIN = 254,
+RT_TABLE_LOCAL = 255,
+RT_TABLE_MAX = 4294967295,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum rtattr_type_t {
+RTA_UNSPEC = 0,
+RTA_DST = 1,
+RTA_SRC = 2,
+RTA_IIF = 3,
+RTA_OIF = 4,
+RTA_GATEWAY = 5,
+RTA_PRIORITY = 6,
+RTA_PREFSRC = 7,
+RTA_METRICS = 8,
+RTA_MULTIPATH = 9,
+RTA_PROTOINFO = 10,
+RTA_FLOW = 11,
+RTA_CACHEINFO = 12,
+RTA_SESSION = 13,
+RTA_MP_ALGO = 14,
+RTA_TABLE = 15,
+RTA_MARK = 16,
+RTA_MFC_STATS = 17,
+RTA_VIA = 18,
+RTA_NEWDST = 19,
+RTA_PREF = 20,
+RTA_ENCAP_TYPE = 21,
+RTA_ENCAP = 22,
+RTA_EXPIRES = 23,
+RTA_PAD = 24,
+RTA_UID = 25,
+RTA_TTL_PROPAGATE = 26,
+RTA_IP_PROTO = 27,
+RTA_SPORT = 28,
+RTA_DPORT = 29,
+RTA_NH_ID = 30,
+__RTA_MAX = 31,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtnexthop {
+pub rtnh_len: crate::ctypes::c_ushort,
+pub rtnh_flags: crate::ctypes::c_uchar,
+pub rtnh_hops: crate::ctypes::c_uchar,
+pub rtnh_ifindex: crate::ctypes::c_int,
+}
+#[repr(C)]
+#[derive(Debug)]
+pub struct rtvia {
+pub rtvia_family: __kernel_sa_family_t,
+pub rtvia_addr: __IncompleteArrayField<__u8>,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rta_cacheinfo {
+pub rta_clntref: __u32,
+pub rta_lastuse: __u32,
+pub rta_expires: __s32,
+pub rta_error: __u32,
+pub rta_used: __u32,
+pub rta_id: __u32,
+pub rta_ts: __u32,
+pub rta_tsage: __u32,
+}
+pub const RTAX_UNSPEC: _bindgen_ty_62 = _bindgen_ty_62::RTAX_UNSPEC;
+pub const RTAX_LOCK: _bindgen_ty_62 = _bindgen_ty_62::RTAX_LOCK;
+pub const RTAX_MTU: _bindgen_ty_62 = _bindgen_ty_62::RTAX_MTU;
+pub const RTAX_WINDOW: _bindgen_ty_62 = _bindgen_ty_62::RTAX_WINDOW;
+pub const RTAX_RTT: _bindgen_ty_62 = _bindgen_ty_62::RTAX_RTT;
+pub const RTAX_RTTVAR: _bindgen_ty_62 = _bindgen_ty_62::RTAX_RTTVAR;
+pub const RTAX_SSTHRESH: _bindgen_ty_62 = _bindgen_ty_62::RTAX_SSTHRESH;
+pub const RTAX_CWND: _bindgen_ty_62 = _bindgen_ty_62::RTAX_CWND;
+pub const RTAX_ADVMSS: _bindgen_ty_62 = _bindgen_ty_62::RTAX_ADVMSS;
+pub const RTAX_REORDERING: _bindgen_ty_62 = _bindgen_ty_62::RTAX_REORDERING;
+pub const RTAX_HOPLIMIT: _bindgen_ty_62 = _bindgen_ty_62::RTAX_HOPLIMIT;
+pub const RTAX_INITCWND: _bindgen_ty_62 = _bindgen_ty_62::RTAX_INITCWND;
+pub const RTAX_FEATURES: _bindgen_ty_62 = _bindgen_ty_62::RTAX_FEATURES;
+pub const RTAX_RTO_MIN: _bindgen_ty_62 = _bindgen_ty_62::RTAX_RTO_MIN;
+pub const RTAX_INITRWND: _bindgen_ty_62 = _bindgen_ty_62::RTAX_INITRWND;
+pub const RTAX_QUICKACK: _bindgen_ty_62 = _bindgen_ty_62::RTAX_QUICKACK;
+pub const RTAX_CC_ALGO: _bindgen_ty_62 = _bindgen_ty_62::RTAX_CC_ALGO;
+pub const RTAX_FASTOPEN_NO_COOKIE: _bindgen_ty_62 = _bindgen_ty_62::RTAX_FASTOPEN_NO_COOKIE;
+pub const __RTAX_MAX: _bindgen_ty_62 = _bindgen_ty_62::__RTAX_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_62 {
+RTAX_UNSPEC = 0,
+RTAX_LOCK = 1,
+RTAX_MTU = 2,
+RTAX_WINDOW = 3,
+RTAX_RTT = 4,
+RTAX_RTTVAR = 5,
+RTAX_SSTHRESH = 6,
+RTAX_CWND = 7,
+RTAX_ADVMSS = 8,
+RTAX_REORDERING = 9,
+RTAX_HOPLIMIT = 10,
+RTAX_INITCWND = 11,
+RTAX_FEATURES = 12,
+RTAX_RTO_MIN = 13,
+RTAX_INITRWND = 14,
+RTAX_QUICKACK = 15,
+RTAX_CC_ALGO = 16,
+RTAX_FASTOPEN_NO_COOKIE = 17,
+__RTAX_MAX = 18,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub struct rta_session {
+pub proto: __u8,
+pub pad1: __u8,
+pub pad2: __u16,
+pub u: rta_session__bindgen_ty_1,
+}
+#[repr(C)]
+#[derive(Copy, Clone)]
+pub union rta_session__bindgen_ty_1 {
+pub ports: rta_session__bindgen_ty_1__bindgen_ty_1,
+pub icmpt: rta_session__bindgen_ty_1__bindgen_ty_2,
+pub spi: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rta_session__bindgen_ty_1__bindgen_ty_1 {
+pub sport: __u16,
+pub dport: __u16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rta_session__bindgen_ty_1__bindgen_ty_2 {
+pub type_: __u8,
+pub code: __u8,
+pub ident: __u16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rta_mfc_stats {
+pub mfcs_packets: __u64,
+pub mfcs_bytes: __u64,
+pub mfcs_wrong_if: __u64,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct rtgenmsg {
+pub rtgen_family: crate::ctypes::c_uchar,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct ifinfomsg {
+pub ifi_family: crate::ctypes::c_uchar,
+pub __ifi_pad: crate::ctypes::c_uchar,
+pub ifi_type: crate::ctypes::c_ushort,
+pub ifi_index: crate::ctypes::c_int,
+pub ifi_flags: crate::ctypes::c_uint,
+pub ifi_change: crate::ctypes::c_uint,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct prefixmsg {
+pub prefix_family: crate::ctypes::c_uchar,
+pub prefix_pad1: crate::ctypes::c_uchar,
+pub prefix_pad2: crate::ctypes::c_ushort,
+pub prefix_ifindex: crate::ctypes::c_int,
+pub prefix_type: crate::ctypes::c_uchar,
+pub prefix_len: crate::ctypes::c_uchar,
+pub prefix_flags: crate::ctypes::c_uchar,
+pub prefix_pad3: crate::ctypes::c_uchar,
+}
+pub const PREFIX_UNSPEC: _bindgen_ty_63 = _bindgen_ty_63::PREFIX_UNSPEC;
+pub const PREFIX_ADDRESS: _bindgen_ty_63 = _bindgen_ty_63::PREFIX_ADDRESS;
+pub const PREFIX_CACHEINFO: _bindgen_ty_63 = _bindgen_ty_63::PREFIX_CACHEINFO;
+pub const __PREFIX_MAX: _bindgen_ty_63 = _bindgen_ty_63::__PREFIX_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_63 {
+PREFIX_UNSPEC = 0,
+PREFIX_ADDRESS = 1,
+PREFIX_CACHEINFO = 2,
+__PREFIX_MAX = 3,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct prefix_cacheinfo {
+pub preferred_time: __u32,
+pub valid_time: __u32,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcmsg {
+pub tcm_family: crate::ctypes::c_uchar,
+pub tcm__pad1: crate::ctypes::c_uchar,
+pub tcm__pad2: crate::ctypes::c_ushort,
+pub tcm_ifindex: crate::ctypes::c_int,
+pub tcm_handle: __u32,
+pub tcm_parent: __u32,
+pub tcm_info: __u32,
+}
+pub const TCA_UNSPEC: _bindgen_ty_64 = _bindgen_ty_64::TCA_UNSPEC;
+pub const TCA_KIND: _bindgen_ty_64 = _bindgen_ty_64::TCA_KIND;
+pub const TCA_OPTIONS: _bindgen_ty_64 = _bindgen_ty_64::TCA_OPTIONS;
+pub const TCA_STATS: _bindgen_ty_64 = _bindgen_ty_64::TCA_STATS;
+pub const TCA_XSTATS: _bindgen_ty_64 = _bindgen_ty_64::TCA_XSTATS;
+pub const TCA_RATE: _bindgen_ty_64 = _bindgen_ty_64::TCA_RATE;
+pub const TCA_FCNT: _bindgen_ty_64 = _bindgen_ty_64::TCA_FCNT;
+pub const TCA_STATS2: _bindgen_ty_64 = _bindgen_ty_64::TCA_STATS2;
+pub const TCA_STAB: _bindgen_ty_64 = _bindgen_ty_64::TCA_STAB;
+pub const TCA_PAD: _bindgen_ty_64 = _bindgen_ty_64::TCA_PAD;
+pub const TCA_DUMP_INVISIBLE: _bindgen_ty_64 = _bindgen_ty_64::TCA_DUMP_INVISIBLE;
+pub const TCA_CHAIN: _bindgen_ty_64 = _bindgen_ty_64::TCA_CHAIN;
+pub const TCA_HW_OFFLOAD: _bindgen_ty_64 = _bindgen_ty_64::TCA_HW_OFFLOAD;
+pub const TCA_INGRESS_BLOCK: _bindgen_ty_64 = _bindgen_ty_64::TCA_INGRESS_BLOCK;
+pub const TCA_EGRESS_BLOCK: _bindgen_ty_64 = _bindgen_ty_64::TCA_EGRESS_BLOCK;
+pub const TCA_DUMP_FLAGS: _bindgen_ty_64 = _bindgen_ty_64::TCA_DUMP_FLAGS;
+pub const __TCA_MAX: _bindgen_ty_64 = _bindgen_ty_64::__TCA_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_64 {
+TCA_UNSPEC = 0,
+TCA_KIND = 1,
+TCA_OPTIONS = 2,
+TCA_STATS = 3,
+TCA_XSTATS = 4,
+TCA_RATE = 5,
+TCA_FCNT = 6,
+TCA_STATS2 = 7,
+TCA_STAB = 8,
+TCA_PAD = 9,
+TCA_DUMP_INVISIBLE = 10,
+TCA_CHAIN = 11,
+TCA_HW_OFFLOAD = 12,
+TCA_INGRESS_BLOCK = 13,
+TCA_EGRESS_BLOCK = 14,
+TCA_DUMP_FLAGS = 15,
+__TCA_MAX = 16,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct nduseroptmsg {
+pub nduseropt_family: crate::ctypes::c_uchar,
+pub nduseropt_pad1: crate::ctypes::c_uchar,
+pub nduseropt_opts_len: crate::ctypes::c_ushort,
+pub nduseropt_ifindex: crate::ctypes::c_int,
+pub nduseropt_icmp_type: __u8,
+pub nduseropt_icmp_code: __u8,
+pub nduseropt_pad2: crate::ctypes::c_ushort,
+pub nduseropt_pad3: crate::ctypes::c_uint,
+}
+pub const NDUSEROPT_UNSPEC: _bindgen_ty_65 = _bindgen_ty_65::NDUSEROPT_UNSPEC;
+pub const NDUSEROPT_SRCADDR: _bindgen_ty_65 = _bindgen_ty_65::NDUSEROPT_SRCADDR;
+pub const __NDUSEROPT_MAX: _bindgen_ty_65 = _bindgen_ty_65::__NDUSEROPT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_65 {
+NDUSEROPT_UNSPEC = 0,
+NDUSEROPT_SRCADDR = 1,
+__NDUSEROPT_MAX = 2,
+}
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum rtnetlink_groups {
+RTNLGRP_NONE = 0,
+RTNLGRP_LINK = 1,
+RTNLGRP_NOTIFY = 2,
+RTNLGRP_NEIGH = 3,
+RTNLGRP_TC = 4,
+RTNLGRP_IPV4_IFADDR = 5,
+RTNLGRP_IPV4_MROUTE = 6,
+RTNLGRP_IPV4_ROUTE = 7,
+RTNLGRP_IPV4_RULE = 8,
+RTNLGRP_IPV6_IFADDR = 9,
+RTNLGRP_IPV6_MROUTE = 10,
+RTNLGRP_IPV6_ROUTE = 11,
+RTNLGRP_IPV6_IFINFO = 12,
+RTNLGRP_DECnet_IFADDR = 13,
+RTNLGRP_NOP2 = 14,
+RTNLGRP_DECnet_ROUTE = 15,
+RTNLGRP_DECnet_RULE = 16,
+RTNLGRP_NOP4 = 17,
+RTNLGRP_IPV6_PREFIX = 18,
+RTNLGRP_IPV6_RULE = 19,
+RTNLGRP_ND_USEROPT = 20,
+RTNLGRP_PHONET_IFADDR = 21,
+RTNLGRP_PHONET_ROUTE = 22,
+RTNLGRP_DCB = 23,
+RTNLGRP_IPV4_NETCONF = 24,
+RTNLGRP_IPV6_NETCONF = 25,
+RTNLGRP_MDB = 26,
+RTNLGRP_MPLS_ROUTE = 27,
+RTNLGRP_NSID = 28,
+RTNLGRP_MPLS_NETCONF = 29,
+RTNLGRP_IPV4_MROUTE_R = 30,
+RTNLGRP_IPV6_MROUTE_R = 31,
+RTNLGRP_NEXTHOP = 32,
+RTNLGRP_BRVLAN = 33,
+RTNLGRP_MCTP_IFADDR = 34,
+RTNLGRP_TUNNEL = 35,
+RTNLGRP_STATS = 36,
+__RTNLGRP_MAX = 37,
+}
+#[repr(C)]
+#[derive(Debug, Copy, Clone)]
+pub struct tcamsg {
+pub tca_family: crate::ctypes::c_uchar,
+pub tca__pad1: crate::ctypes::c_uchar,
+pub tca__pad2: crate::ctypes::c_ushort,
+}
+pub const TCA_ROOT_UNSPEC: _bindgen_ty_66 = _bindgen_ty_66::TCA_ROOT_UNSPEC;
+pub const TCA_ROOT_TAB: _bindgen_ty_66 = _bindgen_ty_66::TCA_ROOT_TAB;
+pub const TCA_ROOT_FLAGS: _bindgen_ty_66 = _bindgen_ty_66::TCA_ROOT_FLAGS;
+pub const TCA_ROOT_COUNT: _bindgen_ty_66 = _bindgen_ty_66::TCA_ROOT_COUNT;
+pub const TCA_ROOT_TIME_DELTA: _bindgen_ty_66 = _bindgen_ty_66::TCA_ROOT_TIME_DELTA;
+pub const __TCA_ROOT_MAX: _bindgen_ty_66 = _bindgen_ty_66::__TCA_ROOT_MAX;
+#[repr(u32)]
+#[non_exhaustive]
+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
+pub enum _bindgen_ty_66 {
+TCA_ROOT_UNSPEC = 0,
+TCA_ROOT_TAB = 1,
+TCA_ROOT_FLAGS = 2,
+TCA_ROOT_COUNT = 3,
+TCA_ROOT_TIME_DELTA = 4,
+__TCA_ROOT_MAX = 5,
+}
-- 
2.31.1

