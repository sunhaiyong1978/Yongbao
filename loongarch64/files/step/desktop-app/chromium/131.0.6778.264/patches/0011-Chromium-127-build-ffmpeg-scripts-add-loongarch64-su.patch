From cc3a1f644e01c3a635cc5ab9f6804c9489946263 Mon Sep 17 00:00:00 2001
From: Sun Haiyong <sunhaiyong@zdbr.net>
Date: Mon, 17 Jun 2024 08:24:07 +0000
Subject: [PATCH 11/11] Chromium 127 build ffmpeg scripts add loongarch64
 supprot.

---
 media/ffmpeg/scripts/build_ffmpeg.py    | 24 ++++++++++++--
 media/ffmpeg/scripts/generate_gn.py     |  2 +-
 media/ffmpeg/scripts/robo_lib/config.py | 40 +++++++++++++------------
 3 files changed, 43 insertions(+), 23 deletions(-)

diff --git a/media/ffmpeg/scripts/build_ffmpeg.py b/media/ffmpeg/scripts/build_ffmpeg.py
index 75589ce6a2..2a760c6419 100755
--- a/media/ffmpeg/scripts/build_ffmpeg.py
+++ b/media/ffmpeg/scripts/build_ffmpeg.py
@@ -43,7 +43,7 @@ BRANDINGS = [
 
 ARCH_MAP = {
     'android': ['ia32', 'x64', 'arm-neon', 'arm64'],
-    'linux': ['ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64'],
+    'linux': ['ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64', 'loong64'],
     'mac': ['x64', 'arm64'],
     'win': ['ia32', 'x64', 'arm64'],
 }
@@ -726,10 +726,13 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch,
                     '--target-os=linux',
                 ])
 
-                if host_arch != 'x64':
+                if host_arch != '':
                     configure_flags['Common'].extend([
                         '--enable-cross-compile',
-                        '--cross-prefix=/usr/bin/x86_64-linux-gnu-',
+                        '--sysroot=' + os.path.join(
+                            CHROMIUM_ROOT_DIR,
+                            'build/linux/debian_bullseye_amd64-sysroot'),
+#                        '--cross-prefix=/usr/bin/x86_64-linux-gnu-',
                         '--extra-cflags=--target=x86_64-linux-gnu',
                         '--extra-ldflags=--target=x86_64-linux-gnu',
                     ])
@@ -898,6 +903,21 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch,
                     '--extra-cflags=--target=mips64el-linux-gnuabi64',
                     '--extra-ldflags=--target=mips64el-linux-gnuabi64',
                 ])
+        elif target_arch == 'loong64':
+            # These flags taken from android chrome build with target_cpu='mips64el'
+            configure_flags['Common'].extend([
+                '--arch=loongarch64',
+            ])
+            if target_os == 'linux':
+                configure_flags['Common'].extend([
+                    '--enable-cross-compile',
+                    '--target-os=linux',
+                    '--sysroot=' + os.path.join(
+                        CHROMIUM_ROOT_DIR,
+                        'build/linux/loongarch64-sysroot'),
+                    '--extra-cflags=--target=loongarch64-unknown-linux-gnu',
+                    '--extra-ldflags=--target=loongarch64-unknown-linux-gnu',
+                ])
         else:
             print('Error: Unknown target arch %r for target OS %r!' %
                   (target_arch, target_os),
diff --git a/media/ffmpeg/scripts/generate_gn.py b/media/ffmpeg/scripts/generate_gn.py
index e2d6b7ef21..7386bc448f 100755
--- a/media/ffmpeg/scripts/generate_gn.py
+++ b/media/ffmpeg/scripts/generate_gn.py
@@ -80,7 +80,7 @@ GN_SOURCE_END = """]
 _Attrs = ('ARCHITECTURE', 'TARGET', 'PLATFORM')
 Attr = collections.namedtuple('Attr', _Attrs)(*_Attrs)
 SUPPORT_MATRIX = {
-    Attr.ARCHITECTURE: set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon']),
+    Attr.ARCHITECTURE: set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon', 'loong64']),
     Attr.TARGET: set(['Chromium', 'Chrome']),
     Attr.PLATFORM: set(['android', 'linux', 'win', 'mac'])
 }
diff --git a/media/ffmpeg/scripts/robo_lib/config.py b/media/ffmpeg/scripts/robo_lib/config.py
index 84a6bf5196..7c3bae6079 100644
--- a/media/ffmpeg/scripts/robo_lib/config.py
+++ b/media/ffmpeg/scripts/robo_lib/config.py
@@ -55,8 +55,8 @@ class RoboConfiguration:
         self._llvm_path = os.path.join(self.chrome_src(), "third_party",
                                        "llvm-build", "Release+Asserts", "bin")
 
-        self.EnsurePathContainsLLVM()
-        self.EnsureNoMakeInfo()
+#        self.EnsurePathContainsLLVM()
+#        self.EnsureNoMakeInfo()
         self.EnsureFFmpegHome()
         self.EnsureGNConfig()
         self.ComputeBranchName()
@@ -194,6 +194,8 @@ class RoboConfiguration:
             self._host_architecture = "mipsel"
         elif platform.machine() == "mips64":
             self._host_architecture = "mips64el"
+        elif platform.machine() == "loongarch64":
+            self._host_architecture = "loong64"
         elif platform.machine().startswith("arm"):
             self._host_architecture = "arm"
         else:
@@ -203,21 +205,21 @@ class RoboConfiguration:
         if platform.system() == "Linux":
             self._host_operating_system = "linux"
 
-            try:
-                with open("/etc/lsb-release", "r") as f:
-                    result = f.read()
-                    if "Ubuntu" in result or "Debian" in result:
-                        self._os_flavor = packages.OsFlavor.Debian
-                    elif "Arch" in result:
-                        self._os_flavor = packages.OsFlavor.Arch
-                    else:
-                        raise Exception(
-                            "Couldn't determine OS flavor from lsb-release "
-                            "(needed to install packages)")
-            except:
-                raise Exception(
-                    "Couldn't read OS flavor from /etc/lsb-release file "
-                    "(needed to install packages)")
+#            try:
+#                with open("/etc/lsb-release", "r") as f:
+#                    result = f.read()
+#                    if "Ubuntu" in result or "Debian" in result:
+#                        self._os_flavor = packages.OsFlavor.Debian
+#                    elif "Arch" in result:
+#                        self._os_flavor = packages.OsFlavor.Arch
+#                    else:
+#                        raise Exception(
+#                            "Couldn't determine OS flavor from lsb-release "
+#                            "(needed to install packages)")
+#            except:
+#                raise Exception(
+#                    "Couldn't read OS flavor from /etc/lsb-release file "
+#                    "(needed to install packages)")
         elif platform.system() == "Darwin":
             self._host_operating_system = "mac"
         elif platform.system() == "Windows" or "CYGWIN_NT" in platform.system(
@@ -231,8 +233,8 @@ class RoboConfiguration:
         wd = os.getcwd()
         # Walk up the tree until we find src/AUTHORS
         while wd != "/":
-            if os.path.isfile(os.path.join(wd, "src", "AUTHORS")):
-                self._chrome_src = os.path.join(wd, "src")
+            if os.path.isfile(os.path.join(wd, "AUTHORS")):
+                self._chrome_src = os.path.join(wd)
                 return
             wd = os.path.dirname(wd)
         raise Exception("could not find src/AUTHORS in any parent of the wd")
-- 
2.31.1

