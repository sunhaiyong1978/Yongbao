From 0985dcfef62652aa255ce7f322a779bc7acef00d Mon Sep 17 00:00:00 2001
From: Sun Haiyong <sunhaiyong@zdbr.net>
Date: Tue, 16 Apr 2024 06:48:59 +0000
Subject: [PATCH 11/19] qtwebengine ffmpeg first_dts. patch form Fedora
 qt6-qtwebengine package.

---
 qtwebengine/configure.cmake                   | 24 -------------------
 qtwebengine/src/3rdparty/chromium/AUTHORS     |  1 +
 .../chromium/media/filters/ffmpeg_demuxer.cc  | 22 +++++++++++------
 .../chromium/media/filters/ffmpeg_demuxer.h   |  3 +++
 .../ffmpeg/chromium/scripts/build_ffmpeg.py   |  4 +++-
 .../ffmpeg/chromium/scripts/copy_config.sh    |  2 +-
 .../ffmpeg/chromium/scripts/generate_gn.py    |  2 +-
 7 files changed, 24 insertions(+), 34 deletions(-)

diff --git a/qtwebengine/configure.cmake b/qtwebengine/configure.cmake
index 9715488b1..7182774ae 100644
--- a/qtwebengine/configure.cmake
+++ b/qtwebengine/configure.cmake
@@ -198,25 +198,6 @@ int main(void) {
 }"
 )
 
-qt_config_compile_test(libavformat
-    LABEL "libavformat"
-    LIBRARIES
-        PkgConfig::FFMPEG
-    CODE
-"
-#include \"libavformat/version.h\"
-extern \"C\" {
-#include \"libavformat/avformat.h\"
-}
-int main(void) {
-#if LIBAVFORMAT_VERSION_MAJOR >= 59
-    AVStream stream;
-    auto first_dts = av_stream_get_first_dts(&stream);
-#endif
-    return 0;
-}"
-)
-
 #### Features
 
 qt_feature("qtwebengine-build" PUBLIC
@@ -554,11 +535,6 @@ add_check_for_support(
    CONDITION NOT LINUX OR DBUS_FOUND
    MESSAGE "Build requires dbus."
 )
-add_check_for_support(
-    MODULES QtWebEngine
-    CONDITION NOT LINUX OR NOT QT_FEATURE_webengine_system_ffmpeg OR TEST_libavformat
-    MESSAGE "Unmodified ffmpeg >= 5.0 is not supported."
-)
 # FIXME: This prevents non XCB Linux builds from building:
 set(xcbSupport X11 LIBDRM XCOMPOSITE XCURSOR XRANDR XI XPROTO XSHMFENCE XTST)
 foreach(xs ${xcbSupport})
diff --git a/qtwebengine/src/3rdparty/chromium/AUTHORS b/qtwebengine/src/3rdparty/chromium/AUTHORS
index 5b604c40c..2e31a9fd5 100644
--- a/qtwebengine/src/3rdparty/chromium/AUTHORS
+++ b/qtwebengine/src/3rdparty/chromium/AUTHORS
@@ -105,6 +105,7 @@ Andra Paraschiv <andra.paraschiv@intel.com>
 Andras Tokodi <a.tokodi@eyeo.com>
 Andreas Nazlidis <andreas221b@gmail.com>
 Andreas Papacharalampous <andreas@apap04.com>
+Andreas Schneider <asn@cryptomilk.org>
 Andrei Borza <andrei.borza@gmail.com>
 Andrei Parvu <andrei.prv@gmail.com>
 Andrei Parvu <parvu@adobe.com>
diff --git a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
index 138cea9d6..91c20058d 100644
--- a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
+++ b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.cc
@@ -59,7 +59,7 @@ namespace media {
 
 namespace {
 
-constexpr int64_t kInvalidPTSMarker = static_cast<int64_t>(0x8000000000000000);
+constexpr int64_t kRelativeTsBase = static_cast<int64_t>(0x7ffeffffffffffff);
 
 void SetAVStreamDiscard(AVStream* stream, AVDiscard discard) {
   DCHECK(stream);
@@ -108,7 +108,7 @@ static base::TimeDelta FramesToTimeDelta(int frames, double sample_rate) {
                             sample_rate);
 }
 
-static base::TimeDelta ExtractStartTime(AVStream* stream) {
+static base::TimeDelta ExtractStartTime(AVStream* stream, int64_t first_dts) {
   // The default start time is zero.
   base::TimeDelta start_time;
 
@@ -118,12 +118,12 @@ static base::TimeDelta ExtractStartTime(AVStream* stream) {
 
   // Next try to use the first DTS value, for codecs where we know PTS == DTS
   // (excludes all H26x codecs). The start time must be returned in PTS.
-  if (av_stream_get_first_dts(stream) != kInvalidPTSMarker &&
+  if (first_dts != AV_NOPTS_VALUE &&
       stream->codecpar->codec_id != AV_CODEC_ID_HEVC &&
       stream->codecpar->codec_id != AV_CODEC_ID_H264 &&
       stream->codecpar->codec_id != AV_CODEC_ID_MPEG4) {
     const base::TimeDelta first_pts =
-        ConvertFromTimeBase(stream->time_base, av_stream_get_first_dts(stream));
+        ConvertFromTimeBase(stream->time_base, first_dts);
     if (first_pts < start_time)
       start_time = first_pts;
   }
@@ -281,6 +281,7 @@ FFmpegDemuxerStream::FFmpegDemuxerStream(
       fixup_negative_timestamps_(false),
       fixup_chained_ogg_(false),
       num_discarded_packet_warnings_(0),
+      first_dts_(AV_NOPTS_VALUE),
       last_packet_pos_(AV_NOPTS_VALUE),
       last_packet_dts_(AV_NOPTS_VALUE) {
   DCHECK(demuxer_);
@@ -347,6 +348,11 @@ void FFmpegDemuxerStream::EnqueuePacket(ScopedAVPacket packet) {
   int64_t packet_dts =
       packet->dts == AV_NOPTS_VALUE ? packet->pts : packet->dts;
 
+  if (first_dts_ == AV_NOPTS_VALUE && packet->dts != AV_NOPTS_VALUE &&
+      last_packet_dts_ != AV_NOPTS_VALUE) {
+    first_dts_ = packet->dts - (last_packet_dts_ + kRelativeTsBase);
+  }
+
   // Chained ogg files have non-monotonically increasing position and time stamp
   // values, which prevents us from using them to determine if a packet should
   // be dropped. Since chained ogg is only allowed on single track audio only
@@ -683,6 +689,7 @@ void FFmpegDemuxerStream::FlushBuffers(bool preserve_packet_position) {
   ResetBitstreamConverter();
 
   if (!preserve_packet_position) {
+    first_dts_ = AV_NOPTS_VALUE;
     last_packet_pos_ = AV_NOPTS_VALUE;
     last_packet_dts_ = AV_NOPTS_VALUE;
   }
@@ -1461,7 +1468,8 @@ void FFmpegDemuxer::OnFindStreamInfoDone(int result) {
 
     max_duration = std::max(max_duration, streams_[i]->duration());
 
-    base::TimeDelta start_time = ExtractStartTime(stream);
+    base::TimeDelta start_time =
+        ExtractStartTime(stream, streams_[i]->first_dts());
 
     // Note: This value is used for seeking, so we must take the true value and
     // not the one possibly clamped to zero below.
@@ -1623,7 +1631,7 @@ FFmpegDemuxerStream* FFmpegDemuxer::FindStreamWithLowestStartTimestamp(
   for (const auto& stream : streams_) {
     if (!stream || stream->IsEnabled() != enabled)
       continue;
-    if (av_stream_get_first_dts(stream->av_stream()) == kInvalidPTSMarker)
+    if (stream->first_dts() == AV_NOPTS_VALUE)
       continue;
     if (!lowest_start_time_stream ||
         stream->start_time() < lowest_start_time_stream->start_time()) {
@@ -1644,7 +1652,7 @@ FFmpegDemuxerStream* FFmpegDemuxer::FindPreferredStreamForSeeking(
     if (stream->type() != DemuxerStream::VIDEO)
       continue;
 
-    if (av_stream_get_first_dts(stream->av_stream()) == kInvalidPTSMarker)
+    if (stream->first_dts() == AV_NOPTS_VALUE)
       continue;
 
     if (!stream->IsEnabled())
diff --git a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.h b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.h
index e234a2078..bada6eedd 100644
--- a/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.h
+++ b/qtwebengine/src/3rdparty/chromium/media/filters/ffmpeg_demuxer.h
@@ -145,6 +145,8 @@ class MEDIA_EXPORT FFmpegDemuxerStream : public DemuxerStream {
   base::TimeDelta start_time() const { return start_time_; }
   void set_start_time(base::TimeDelta time) { start_time_ = time; }
 
+  int64_t first_dts() const { return first_dts_; }
+
  private:
   friend class FFmpegDemuxerTest;
 
@@ -202,6 +204,7 @@ class MEDIA_EXPORT FFmpegDemuxerStream : public DemuxerStream {
   bool fixup_chained_ogg_;
 
   int num_discarded_packet_warnings_;
+  int64_t first_dts_;
   int64_t last_packet_pos_;
   int64_t last_packet_dts_;
   // Requested buffer count. The actual returned buffer count could be less
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
index 44739f5d7..45b3bd14e 100755
--- a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
+++ b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
@@ -43,7 +43,7 @@ BRANDINGS = [
 ARCH_MAP = {
     'android': ['ia32', 'x64', 'arm-neon', 'arm64'],
     'linux': [
-        'ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64'
+        'ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64', 'loong64'
     ],
     'mac': ['x64', 'arm64'],
     'win': ['ia32', 'x64', 'arm64'],
@@ -139,6 +139,8 @@ def DetermineHostOsAndArch():
     host_arch = 'x64'
   elif platform.machine() == 'aarch64':
     host_arch = 'arm64'
+  elif platform.machine() == 'loongarch64':
+    host_arch = 'loong64'
   elif platform.machine() == 'mips32':
     host_arch = 'mipsel'
   elif platform.machine() == 'mips64':
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/copy_config.sh b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/copy_config.sh
index a18048cf0..d81645152 100755
--- a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/copy_config.sh
+++ b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/copy_config.sh
@@ -10,7 +10,7 @@ for os in android linux linux-noasm mac win; do
     # Copy config files for various architectures:
     #   - ia32/x64 have config.asm, config.h
     #   - arm/arm-neon have config.h
-    for arch in arm arm-neon arm64 ia32 x64 mipsel mips64el; do
+    for arch in arm arm-neon arm64 ia32 x64 mipsel mips64el loong64; do
       # Don't waste time on non-existent configs, if no config.h then skip.
       [ ! -e "build.$arch.$os/$target/config.h" ] && continue
       for f in config.h config_components.h config.asm libavutil/avconfig.h libavutil/ffversion.h libavcodec/bsf_list.c libavcodec/codec_list.c libavcodec/parser_list.c libavformat/demuxer_list.c libavformat/muxer_list.c libavformat/protocol_list.c; do
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/generate_gn.py b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/generate_gn.py
index 7fd44ec47..67461cbe3 100755
--- a/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/generate_gn.py
+++ b/qtwebengine/src/3rdparty/chromium/third_party/ffmpeg/chromium/scripts/generate_gn.py
@@ -82,7 +82,7 @@ _Attrs = ('ARCHITECTURE', 'TARGET', 'PLATFORM')
 Attr = collections.namedtuple('Attr', _Attrs)(*_Attrs)
 SUPPORT_MATRIX = {
     Attr.ARCHITECTURE:
-        set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon']),
+        set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon', 'loong64']),
     Attr.TARGET:
         set(['Chromium', 'Chrome', 'ChromeOS']),
     Attr.PLATFORM:
-- 
2.31.1

