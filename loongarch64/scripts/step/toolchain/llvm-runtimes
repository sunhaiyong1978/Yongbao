source env/toolchain/config
source env/distro.info
source env/function.sh
export STEP_BUILDNAME=toolchain
export STEP_PACKAGENAME=llvm-runtimes
export PACKAGE_VERSION=main_git-default
export RESOURCEDIR=${NEW_TARGET_SYSDIR}/files/toolchain/llvm-runtimes/main_git-default/
rm -rf ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
tar xvf ${DOWNLOADDIR}/llvm-project_git-main_git-default_git.tar.gz -C ${BUILD_DIRECTORY} 
pushd ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
    if [ "x$(get_user_set_env target)" == "x" ]; then
        CROSS_TARGET=$(archname_to_triple "$(get_user_set_env host ${CROSS_HOST})" "${CROSS_HOST}")
        ARCH_MABI=$(archname_to_anyparm "$(get_user_set_env host ${CROSS_TARGET})" "MABI" "")
    else
        CROSS_TARGET=$(archname_to_triple "$(get_user_set_env target ${CROSS_TARGET})" "${CROSS_TARGET}")
        ARCH_MABI=$(archname_to_anyparm "$(get_user_set_env target ${CROSS_TARGET})" "MABI" "")
    fi
    LIB_SUFF=$(archname_to_lib_suff "${CROSS_TARGET}")
    INSTALL_PREFIX_DIR=$(archname_to_anyparm "${CROSS_TARGET}" "PREFIX_DIR" "/usr")

    TARGET_VENDOR=$(get_user_set_env vendor "unknown")

    if [ "x$(get_user_set_env compat)" == "x1" ] || [ "x$(get_user_set_env target_compat)" == "x1" ]; then
	COMPAT_TARGET="$(echo "${CROSS_TARGET}" | sed "s@unknown@compat@g")"
    else
	case "x${TARGET_VENDOR}" in
		"xunknown")
			COMPAT_TARGET="${CROSS_TARGET}"
			;;
		"xNULL")
			COMPAT_TARGET="$(echo "${CROSS_TARGET}" | sed "s@-unknown-@-@g")"
			;;
		*)
			COMPAT_TARGET="$(echo "${CROSS_TARGET}" | sed "s@unknown@${TARGET_VENDOR}@g")"
			;;
	esac
    fi

    

    INSTALL_DIST_DIR="${TOOLCHAIN_DIRECTORY}/${COMPAT_TARGET}/llvm-runtimes"

    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/bin:${PATH}
    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin:${PATH}


    LLVM_MARJO_VERSION="$(${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-config --version | cut -d'.' -f1)"

    pushd runtimes
	mkdir cross-build
	pushd cross-build
		cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX:PATH=/usr \
			-DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_COMPILER="clang" \
			-DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_BUILD_TYPE=Release \
			-DLLVM_CONFIG=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-config \
			-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_ASM_COMPILER=clang \
			-DCMAKE_ASM_FLAGS="-DNDEBUG -target ${COMPAT_TARGET} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/target" \
			-DCMAKE_C_FLAGS="-DNDEBUG -target ${COMPAT_TARGET} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/target" \
			-DCMAKE_CXX_FLAGS="-DNDEBUG -target ${COMPAT_TARGET} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_TARGET}/cross-tools/target " \
			-DCMAKE_AR="${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-ar" \
			-DCMAKE_RANLIB="${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-ranlib" \
			-DLIBCXX_INCLUDE_TESTS=OFF \
			-DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;pstl;libcxx" \
			-DCMAKE_MAKE_PROGRAM:PATH=${HOST_TOOLS_DIR}/bin/ninja \
			-DPython3_EXECUTABLE=${HOST_TOOLS_DIR}/bin/python3 \
 			-DCOMPILER_RT_INSTALL_PATH:PATH=lib/clang/${LLVM_MARJO_VERSION} \
			-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-DLLVM_DEFAULT_TARGET_TRIPLE=${COMPAT_TARGET} \
			-DCMAKE_PASSTHROUGH_VARIABLES="-DLLVM_DEFAULT_TARGET_TRIPLE=${COMPAT_TARGET}"
		ninja
		if [ -d ${TOOLCHAIN_DIRECTORY}/${COMPAT_TARGET}/llvm-runtimes ]; then
			mv ${TOOLCHAIN_DIRECTORY}/${COMPAT_TARGET}/llvm-runtimes{,.$(date +%Y%m%d%H%M%S)}
		fi
		DESTDIR=${INSTALL_DIST_DIR} ninja install/strip
	popd
    popd
popd 
rm -rf ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
