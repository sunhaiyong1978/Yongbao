source env/toolchain/config
source env/distro.info
source env/function.sh
export STEP_BUILDNAME=toolchain
export STEP_PACKAGENAME=cross-llvm-project
export PACKAGE_VERSION=19.1.7
export RESOURCEDIR=${NEW_TARGET_SYSDIR}/files/toolchain/cross-llvm-project/19.1.7/
rm -rf ${BUILD_DIRECTORY}/llvm-project-19.1.7.src
tar xvf ${DOWNLOADDIR}/llvm-project-19.1.7.src.tar.xz -C ${BUILD_DIRECTORY} 
pushd ${BUILD_DIRECTORY}/llvm-project-19.1.7.src
    HOST_HOST=$(archname_to_triple "$(get_user_set_env host ${CROSS_HOST})" "${CROSS_HOST}")
    HOST_TARGET=$(archname_to_triple "$(get_user_set_env target ${CROSS_TARGET})" "${CROSS_TARGET}")
    ARCH_ABI=$(archname_to_archabi "$(get_user_set_env target ${HOST_TARGET})" "${ARCH_ABI}")
    

    if [ "x$(get_user_set_env compat)" == "x1" ]; then
	COMPAT_HOST="$(echo "${HOST_HOST}" | sed "s@unknown@compat@g")"
    else
	COMPAT_HOST="${HOST_HOST}"
    fi

    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/bin:${TOOLCHAIN_DIRECTORY}/cross-target/${HOST_TARGET}/cross-tools/bin:${PATH}
    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin:${PATH}

    if [ -d ${PREFIX}/cross-tools ]; then
        mv ${PREFIX}/cross-tools{,.$(date +%Y%m%d%H%M%S)}
    fi
    mkdir -pv ${PREFIX}/cross-tools
    cp -a ${TOOLCHAIN_DIRECTORY}/cross-target/${HOST_TARGET}/cross-tools/target ${PREFIX}/cross-tools/


    LLVM_DIST_VERSION="$(echo "19.1.7" | sed "s@-default@@g")"

    pushd llvm

	    mkdir -p cross-build
	    pushd cross-build
        	CC="${COMPAT_HOST}-gcc" CXX="${COMPAT_HOST}-g++" \
        	LDFLAGS="" PKG_CONFIG_SYSROOT_DIR="" \
	        cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${PREFIX}/cross-tools -DCMAKE_BUILD_TYPE=Release \
        	      -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_ENABLE_LIBCXX:BOOL=OFF \
	              -DLLVM_LIBDIR_SUFFIX=64 \
        	      -DCMAKE_C_FLAGS="-DNDEBUG" -DCMAKE_CXX_FLAGS="-DNDEBUG" \
	              -DLLVM_BUILD_RUNTIME:BOOL=ON -DLLVM_ENABLE_RTTI:BOOL=ON \
        	      -DLLVM_ENABLE_ZLIB:BOOL=ON -DLLVM_ENABLE_FFI:BOOL=OFF \
	              -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
        	      -DLLVM_TABLEGEN:PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-tblgen \
        	      -DCLANG_TABLEGEN:PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/clang-tblgen \
        	      -DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
	              -DLLVM_LINK_LLVM_DYLIB:BOOL=OFF -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON \
	              -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF -DLLVM_BUILD_STATIC=OFF \
		      -DLLVM_ENABLE_PROJECTS='clang;lld' \
		      -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind;compiler-rt;pstl" -DLLVM_RUNTIME_TARGETS=loongarch64-unknown-linux-gnu \
		      -DDEFAULT_SYSROOT:PATH="${PREFIX}/cross-tools/target" \
	              -DLLVM_DEFAULT_TARGET_TRIPLE=${HOST_TARGET}
		sed -i "s@${PWD}/bin/clang-ast-dump@qemu-x86_64 ${PWD}/bin/clang-ast-dump@g" build.ninja
		ninja

		if [ -d ${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/${HOST_TARGET}/llvm-project ]; then
			mv ${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/${HOST_TARGET}/llvm-project{,.$(date +%Y%m%d%H%M%S)}
		fi
		DESTDIR=${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/${HOST_TARGET}/llvm-project ninja install
	    popd
    popd
popd 
rm -rf ${BUILD_DIRECTORY}/llvm-project-19.1.7.src
