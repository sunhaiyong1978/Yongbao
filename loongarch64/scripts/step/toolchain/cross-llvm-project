source env/toolchain/config
source env/distro.info
source env/function.sh
export STEP_BUILDNAME=toolchain
export STEP_PACKAGENAME=cross-llvm-project
export PACKAGE_VERSION=main_git-default
export RESOURCEDIR=${NEW_TARGET_SYSDIR}/files/toolchain/cross-llvm-project/main_git-default/
rm -rf ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
tar xvf ${DOWNLOADDIR}/llvm-project_git-main_git-default_git.tar.gz -C ${BUILD_DIRECTORY} 
pushd ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
    HOST_HOST=$(archname_to_triple "$(get_user_set_env host ${CROSS_HOST})" "${CROSS_HOST}")
    

    if [ "x$(get_user_set_env compat)" == "x1" ]; then
	COMPAT_HOST="$(echo "${HOST_HOST}" | sed "s@unknown@compat@g")"
    else
	COMPAT_HOST="${HOST_HOST}"
    fi

    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/bin:${PATH}
    PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin:${PATH}



     LLVM_DIST_VERSION="$(echo "main_git-default" | sed "s@-default@@g")"

    CFLAGS=""
    CXXFLAGS=""
    case "${COMPAT_HOST}" in
        loongarch64*)
		CFLAGS="${CFLAGS} -mcmodel=medium"
		CXXFLAGS="${CXXFLAGS} -mcmodel=medium"
		;;
        *)
		;;
    esac

    LLVM_MARJO_VERSION=""
    pushd llvm
	    mkdir -p cross-build
	    pushd cross-build
        	CC="${COMPAT_HOST}-gcc" CXX="${COMPAT_HOST}-g++" \
        	LDFLAGS="" PKG_CONFIG_SYSROOT_DIR="" \
	        cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${CROSS_TOOLCHAIN_PREFIX}/cross-tools -DCMAKE_BUILD_TYPE=Release \
        	      -DBUILD_SHARED_LIBS:BOOL=OFF -DLLVM_ENABLE_LIBCXX:BOOL=OFF \
		      -DLLVM_APPEND_VC_REV:BOOL=OFF \
        	      -DCMAKE_C_FLAGS="${CFLAGS} -DNDEBUG" -DCMAKE_CXX_FLAGS="${CXXFLAGS} -DNDEBUG" \
	              -DLLVM_BUILD_RUNTIME:BOOL=ON -DLLVM_ENABLE_RTTI:BOOL=ON \
		      -DLLVM_BUILD_LLVM_DYLIB:BOOL=ON  -DLLVM_LINK_LLVM_DYLIB:BOOL=ON -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
        	      -DLLVM_ENABLE_ZLIB:BOOL=ON -DLLVM_ENABLE_FFI:BOOL=OFF \
	              -DLLVM_ENABLE_TERMINFO:BOOL=OFF \
		      -DCLANG_DEFAULT_LINKER=lld \
        	      -DLLVM_TABLEGEN:PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-tblgen \
        	      -DCLANG_TABLEGEN:PATH=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/clang-tblgen \
		      -DCLANG_TIDY_CONFUSABLE_CHARS_GEN=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/clang-tidy-confusable-chars-gen \
	              -DLLVM_BUILD_EXTERNAL_COMPILER_RT:BOOL=ON \
 	              -DLLVM_INSTALL_TOOLCHAIN_ONLY:BOOL=OFF \
		      -DCLANG_ENABLE_STATIC_ANALYZER=ON \
		      -DLLVM_ENABLE_PROJECTS='llvm;clang;clang-tools-extra;lld' \
                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
		      -DLLVM_VERSION_SUFFIX='' \
 	              -DLLVM_DEFAULT_TARGET_TRIPLE=${COMPAT_HOST}
		ninja


		if [ -d ${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/llvm-project ]; then
			mv ${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/llvm-project{,.$(date +%Y%m%d%H%M%S)}
		fi
		DESTDIR=${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/llvm-project ninja install/strip
		LLVM_MARJO_VERSION="$(grep "CPACK_PACKAGE_VERSION_MAJOR" CPackConfig.cmake | grep -oP '"\K\d+')"
	    popd
    popd

    pushd runtimes
	mkdir cross-build
	pushd cross-build
		cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX:PATH=${CROSS_TOOLCHAIN_PREFIX}/cross-tools \
			-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_ASM_COMPILER=clang \
			-DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_BUILD_TYPE=Release \
			-DLLVM_CONFIG=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-config \
			-DCMAKE_ASM_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target" \
			-DCMAKE_C_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target" \
			-DCMAKE_CXX_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target " \
			-DCMAKE_MAKE_PROGRAM:PATH=${HOST_TOOLS_DIR}/bin/ninja \
			-DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxxabi;pstl;libcxx" \
 			-DCOMPILER_RT_INSTALL_PATH:PATH=lib/clang/${LLVM_MARJO_VERSION} \
			-DLIBCXX_INCLUDE_TESTS=OFF \
			-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-DLLVM_DEFAULT_TARGET_TRIPLE=${COMPAT_HOST}
		ninja
		DESTDIR=${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/llvm-project ninja install/strip
	popd
    popd

    pushd openmp
	mkdir cross-build
	pushd cross-build
		cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${CROSS_TOOLCHAIN_PREFIX}/cross-tools -DCMAKE_BUILD_TYPE=Release \
			-DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_ASM_COMPILER=clang \
			-DCMAKE_ASM_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target" \
			-DCMAKE_C_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target" \
			-DCMAKE_CXX_FLAGS="-DNDEBUG -target ${COMPAT_HOST} --gcc-toolchain=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/ --sysroot=${TOOLCHAIN_DIRECTORY}/cross-target/${COMPAT_HOST}/cross-tools/target " \
			-DCMAKE_MAKE_PROGRAM:PATH=${HOST_TOOLS_DIR}/bin/ninja \
			-DLLVM_CONFIG=${TOOLCHAIN_DIRECTORY}/cross-target/llvm-project/bin/llvm-config \
			-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
			-DLIBOMP_OMPD_GDB_SUPPORT=OFF \
			-DLLVM_DEFAULT_TARGET_TRIPLE=${COMPAT_HOST}
		ninja
		DESTDIR=${TOOLCHAIN_DIRECTORY}/${COMPAT_HOST}/llvm-project ninja install/strip
	popd
    popd



popd 
rm -rf ${BUILD_DIRECTORY}/llvm-project_git-main_git-default_git
